<?php
if (!defined('BASEPATH')) exit('You Have Not Permission To access');

class Osi extends CI_Controller
{

	public function __construct()
	{
		parent::__construct();
		$this->permission->is_logged_in();
		$this->permission->clear_cache();

		define('VARIABLE_QUANTITY', 6);
	}
	public function allUsersExcel()
	{
		$this->load->model('Osi_model');
		$this->load->helper('common_helper');
		$default_cols = array('newosi.man_id', 'newosi.name as empName', 'presentrank', 'depttno', 'dateofbith', 'dateofinlitment', 'newosi.bat_id', 'dateofretirment', 'dateofinlitment', 'dateofretirment', 'eduqalification', 'ierank', 'phono1', 'district', 'gender', 'maritalstatus', 'caste', 'category', 'bloodgroup', 'comlit', 'ono');
		$selected_columns = array();
		if (null != $this->input->post('columns')) {
			$cols = array_keys($this->input->post('columns'));
			if (null != $cols && !empty($cols)) {
				$columns = $cols;
			} else {
				$columns = $default_cols;
			}
		} else {
			$columns = $default_cols;
		}
		if (null != $this->input->post('download')) {
			$data['users'] = $users = $this->Osi_model->getAllUsers($columns, FALSE);
		} else {
			$data['users'] = $users = $this->Osi_model->getAllUsers($columns, TRUE);
		}
		if (in_array('bat_id', $columns)) {
			$columns = array_merge(array('nickname'), $columns);
		}
		//echo count($users);
		//die;
		if (null != $this->input->post('submitForm')) {
			$data['columns'] = $columns;
		} elseif (null != $this->input->post('download')) {
			$this->createCSV($users, $columns);
			//$this->createAllUserExcel($users, $columns);
		} else {	//download
			$data['columns'] = $columns;
		}
		if (in_array('posting', $columns)) {
			$columns = array_merge(array('posting', $columns));
		}
		$this->load->view('Osi/allUsers', $data);
	}
	public function createAllUserExcel($users, $columns)
	{
		set_time_limit(0);
		ini_set("memory_limit", "-1");
		error_reporting(0);
		$this->load->library('excel');
		$objPHPExcel = new PHPExcel();
		$objPHPExcel->getProperties()->setCreator("ERMS-PAP")
			->setLastModifiedBy("ERMS-PAP")
			->setTitle("Office 2007 XLSX Test Document")
			->setSubject("Office 2007 XLSX Test Document")
			->setDescription("Vehicle consolidated figures, Generated by ERMS-PAP.")
			->setKeywords("Figures of vehicles/battalion in MT")
			->setCategory("Vehicle/Battalion figure view");
		$counti = 0;
		$objPHPExcel->createSheet($counti);
		$objPHPExcel->setActiveSheetIndex($counti);
		$objPHPExcel->getActiveSheet()->setTitle('Figure View');
		$counter = 0;
		$row = 1;
		$titleStyle = array(
			'font'  => array(
				'size'  => 13,
				'name'  => 'Verdana',
				'fill' => array(
					'type' => PHPExcel_Style_Fill::FILL_SOLID,
					'color' => array('rgb' => 'FF00a0')
				)
			)
		);

		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('A1', 'All Users');
		$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray($titleStyle);
		$objPHPExcel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
		$objPHPExcel->setActiveSheetIndex($counti)->mergeCells("A1:H1");

		$equipmentNameStyle = array(
			'font'  => array(
				'size'  => 12,
				'name'  => 'Verdana',
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			)
		);


		$cols = array('C', 'D', 'E');
		$cols_temp = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ');

		$row++;
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('A' . $row, 'S. No.');
		$i = 1;

		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('B' . $row, 'Man ID');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('C' . $row, 'Name');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('D' . $row, 'Battalion');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('E' . $row, 'Staff Type');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('F' . $row, 'Present Rank');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('G' . $row, 'Permanent Rank');

		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('H' . $row, 'Belt Number');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('I' . $row, 'Phone Number');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('J' . $row, 'District');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('K' . $row, 'Gender');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('L' . $row, 'Maritial Status');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('M' . $row, 'Caste');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('N' . $row, 'Category');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('O' . $row, 'Blood Group');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('P' . $row, 'Computer Literate');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Q' . $row, 'Date of Birth');

		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('R' . $row, 'Enlistment Unit');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('S' . $row, 'Date of Enlistment');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('T' . $row, 'Date of Retirement');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('U' . $row, 'Qualification');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('V' . $row, 'Present Posting');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('X' . $row, 'Date of Posting');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y' . $row, 'ONO');
		$counter = 1;
		foreach ($users as $k => $user) {
			$row++;
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('A' . $row, $counter);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('B' . $row, $user->man_id);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('C' . $row, $user->name);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('D' . $row, $user->nickname);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('E' . $row, $user->presentrank);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('F' . $row, $user->permanent_rank);

			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('G' . $row, $user->ierank1);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('H' . $row, $user->depttno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('I' . $row, $user->phono1);


			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('J' . $row, $user->district);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('K' . $row, $user->gender);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('L' . $row, $user->maritalstatus);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('M' . $row, $user->caste);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('N' . $row, $user->category);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('O' . $row, $user->bloodgroup);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('P' . $row, $user->comlit);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Q' . $row, $user->dateofbith);

			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('R' . $row, $user->EnlistmentUnit);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('S' . $row, $user->dateofinlitment);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('T' . $row, $user->dateofretirment);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('U' . $row, $user->eduqalification1);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('V' . $row, trim($user->posting_concat1));
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('X' . $row, trim($user->dateofposting1) . ' ' . trim($user->officer_name));
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y' . $row, trim($user->ono));

			/*$pos = fetchoneinfodesc('newosip',array('man_id' => $user->man_id ),'man_id');
				if($pos!=''){
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('T'.$row, 
						$pos->fone1.$pos->vploc.$pos->vpdis.$pos->fone2.$pos->noj.$pos->jsdis.$pos->fone3.$pos->fone4.$pos->fone5.$pos->osgloc.$pos->osgdis.$pos->fone6.$pos->fone7.$pos->fone8.$pos->fone9.$pos->bsdnob.$pos->bsddis.$pos->bsdloc.$pos->fone10.$pos->fone11.$pos->fone12.$pos->lone1.$pos->perdupod.$pos->perdudis.$pos->perduorno.$pos->perduordate.$pos->lone2.$pos->dgppod.$pos->dgpdis.$pos->dgporno.$pos->dgpordate.$pos->lone3.$pos->tertdpod.$pos->tertddis.$pos->tertdorno.$pos->tertdordate.$pos->sqone1.$pos->sqone2.$pos->sqone3.$pos->sqone4.$pos->sqone5.$pos->sstgpod.$pos->sstgdis.$pos->sstgorno.$pos->sstgordate.$pos->sqone6.$pos->sqone7.$pos->sqone8.$pos->swatpod.$pos->swatdis.$pos->swatorno.$pos->swatordate.$pos->paone1.$pos->paone2.$pos->awdpmpod.$pos->awdpmorno.$pos->awdpmordate.$pos->paone3.$pos->awdpfpod.$pos->awdpforno.$pos->awdpfordate.$pos->paone4.$pos->awdpompod.$pos->awdpomorno.$pos->awdpomordate.$pos->paone5.$pos->awdpofpod.$pos->awdpoforno.$pos->awdpofordate.$pos->paone6.$pos->paone7.$pos->paone8.$pos->paone9.$pos->paone10.$pos->paone11.$pos->paone12.$pos->paone13.$pos->paone14.$pos->paone15.$pos->paone16.$pos->paone17.$pos->paone18.$pos->paone19.$pos->paone20.$pos->paone21.$pos->paone22.$pos->paone23.$pos->paone24.$pos->paone27.$pos->ssone23.$pos->dsopod.$pos->dsoorno.$pos->dsoordate.$pos->ssone24.$pos->csojalorno.$pos->csojalordate.$pos->ssone25.$pos->mispatorno.$pos->mispatordate.$pos->ssone26.$pos->othersnod.$pos->othersnodis.$pos->othersorno.$pos->othersordate.$pos->awbone1.$pos->awbone2.$pos->pssawonof.$pos->pssaworank.$pos->pssawoordate.$pos->awbone3.$pos->osihonoo.$pos->awbone4.$pos->Readerosinbo.$pos->Orderly.$pos->telopr.$pos->darrun.$pos->awbone5.$pos->bnkgdop.$pos->awbone6.$pos->bhogpog.$pos->bhogdop.$pos->awbone7.$pos->tradestot.$pos->tradestt.$pos->tradesbat.$pos->tradesdop.$pos->tradesorno.$pos->awbone8.$pos->mtsecpod.$pos->mtsecvehno.$pos->mtsecdop.$pos->mtsecorno.$pos->awbone9.$pos->quartbradop.$pos->quartbraorno.$pos->awbone10.$pos->awbone11.$pos->awbone12.$pos->awbone13.$pos->recrutnorb.$pos->recrutorno.$pos->recrutordate.$pos->bmdone1.$pos->bmdone2.$pos->leavefrom.'&nbsp;'.$pos->leaveto.$pos->bmdone3.$pos->absentfrom.$pos->absentddr.$pos->absentdate.$pos->bmdone4.$pos->usdos.$pos->usros.$pos->bmdone5.$pos->bmdone6.$pos->bmdone7.$pos->bmdone8.$pos->bmdone9.$pos->bmdone10.$pos->instone1.$pos->instone2.$pos->instone3.$pos->instone4.$pos->traning1.$pos->traning2.$pos->traning3.$pos->btarin1.$pos->btarin2.$pos->btarin3.$pos->btarin4.$pos->btarin5.$pos->btarin6.$pos->btarin7.$pos->btarin8.$pos->btarin9.$pos->btarin10.$pos->cfpop.$pos->cfppd.$pos->cfpdop.$pos->game.$pos->adminstaff);
					
						$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('U'.$row, $pos->dateofposting1);
				}*/
			$counter++;
		}

		// $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);
		//$objWriter->save(dirname(__FILE__).'/file/dalwinder.xlsx');
		//$objWriter->save('D://dalwinder.xlsx');
		//die('file created');
		//			// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="all_users.xls"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
		$objWriter->save('php://output');
		exit;
	}
	public function createCSV($users, $columns)
	{
		$f = fopen("tmp.csv", "w");
		$counter = 1;
		$heading = array('S. No.', ' Man id', ' Name', 'Battalion', 'Staff type', 'Present Rank', 'Belt Number', 'Phone Number', 'District', 'Gender', 'Maritial Status', 'Caste', 'Category', 'Blood Group', 'Computer Literate', 'Date Of Birth', 'Date of enlistment', 'Date of retirement', 'Qualification', 'Present Posting', 'Date of Posting', 'ONO');
		fputcsv($f, $heading);
		foreach ($users as $k => $user) {
			$v = [$counter, $user->man_id, $user->empName, $user->nickname, $user->presentrank, $user->ierank1, $user->depttno, $user->phono1, $user->district, $user->gender, $user->maritalstatus, $user->caste, $user->category, $user->bloodgroup, $user->comlit, $user->dateofbith, $user->dateofinlitment, $user->dateofretirment, $user->eduqalification1, trim($user->posting_concat1) . ' ' . trim($user->officer_name), trim($user->dateofposting1), trim($user->ono)];
			//$v = array_merge(array($counter),$v);
			fputcsv($f, $v);
			$counter++;
		}
		// Redirect output to a client’s web browser (Excel2007)
		header("Content-type: text/csv");
		header("Content-disposition: attachment; filename = user_report.csv");
		readfile('tmp.csv');
		exit;
	}


	//--------------------------Start of Updated Search functionality from previous Btalion controllers----------------------------------
	public function osi_olddataall()
	{ /*Osi all data*/
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->library('pagination');
		$this->load->helper('common');
		$this->load->model('Osi_model');
		$data['uname'] = $this->Osi_model->fetchinfo('users', array('user_log' => 4));		//all osi fetched	
		//var_dump($data['uname']);

		$ito = $this->input->get("ito", TRUE);				//battalion
		if ($this->session->userdata('user_log') == 4) {		//battalion login
			$ito = array($this->session->userdata('userid'));
		}

		$mobno = $this->input->get("mobno", TRUE);
		$name = $this->input->get("name", TRUE);
		$bloodgroup = $this->input->get("bloodgroup", TRUE);
		$rcnum = $this->input->get("rcnum", TRUE);
		$RankRankre = $this->input->get("RankRankre", TRUE);
		$eor1 =  $this->input->get("eor1", TRUE);
		$eor2 =  $this->input->get("eor2", TRUE);
		$eor3 =  $this->input->get("eor3", TRUE);
		$eor4 =  $this->input->get("eor4", TRUE);
		$eor5 =  $this->input->get("eor5", TRUE);
		$postate = $this->input->get("postate", TRUE);
		$pcity = $this->input->get("pcity", TRUE);
		$stts = $this->input->get("stts", TRUE);
		$classes = $this->input->get('classes', TRUE);
		$UnderGraduate = $this->input->get("UnderGraduate", TRUE);
		$Graduate = $this->input->get("Graduate", TRUE);
		$PostGraduate = $this->input->get("PostGraduate", TRUE);
		$Doctorate = $this->input->get("Doctorate", TRUE);
		$gender = $this->input->get("gender", TRUE);
		$single =  $this->input->get("single", TRUE);
		$Modemdr = $this->input->get("Modemdr", TRUE);
		$Rankre = $this->input->get("Rankre", TRUE);
		$Enlistmentec = $this->input->get("Enlistmentec", TRUE);
		$InductionModeim = $this->input->get("InductionModeim", TRUE);
		$clit = $this->input->get("clit", TRUE);
		$EnlistmentUnit = $this->input->get("EnlistmentUnit", TRUE);
		$dateofesnlistment1 = $this->input->get("dateofesnlistment1", TRUE);
		$dateofesnlistment2 =  $this->input->get("dateofesnlistment2", TRUE);
		$NamesofsCourses =  $this->input->get("NamesofsCourses1", TRUE);
		$NamesofsCourses2 =  $this->input->get("NamesofsCourses2", TRUE);
		$DateofRetirementdor = $this->input->get("DateofRetirementdor", TRUE);
		$dateofbirth = $this->input->get("dateofbirth", TRUE);
		$dateofbirthi = $this->input->get("dateofbirthi", TRUE);
		$dateofbirthi = $this->input->get("dateofbirthi", TRUE);
		$height = $this->input->get("height", TRUE);
		$inch = $this->input->get("inch", TRUE);
		$Postingtiset = $this->input->get("Postingtiset", TRUE);
		$Postingtiset2 = $this->input->get("Postingtiset2", TRUE);
		$Postingtiset3 = $this->input->get("Postingtiset3", TRUE);
		$Postingtiset4 = $this->input->get("Postingtiset4", TRUE);
		$Postingtiset5 = $this->input->get("Postingtiset5", TRUE);
		$Postingtiset6 = $this->input->get("Postingtiset6", TRUE);
		$Postingtiset7 = $this->input->get("Postingtiset7", TRUE);
		$Postingtiset8 = $this->input->get("Postingtiset8", TRUE);
		$Postingtiset9 = $this->input->get("Postingtiset9", TRUE);
		$advanceSearch = $this->input->get('advancedSearch', TRUE);
		//echo '<hr>';
		//var_dump($advaceSearch);
		$p = '';
		//die('dalwinder');
		//echo '<hr>';
		// var_dump($ito);
		// echo '<hr>';
		//var_dump($ito);
		if (isset($ito) && is_array($ito)) {
			if (count($ito) == 0) {
				$sortedBattalions = array_keys($this->getAllBattalions());
			} else {
				//var_dump($ito);
				$sortedBattalions = $this->sortBattalions($ito);
				//var_dump($sortedBattalions);
			}
		} else {
			$sortedBattalions = array_keys($this->getAllBattalions());
		}
		//var_dump($sortedBattalions);
		//die;
		$data['counts'] =  $this->Osi_model->get_users_countosiall($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $mobno, $classes);
		//echo $data['counts'];
		//die;
		//echo $this->db->last_query();
		//die('llll');
		$weapon = $data['counts'];
		//echo 'Counting is ok';
		//echo $weapon;
		//die;
		//echo $data['counts'];
		//die('a');
		$data['statelist'] = $this->Osi_model->fetchinfo('state_list', array('state_status' => 1));
		//var_dump($data['statelist']);
		//die;
		$config = array();
		$config["base_url"] = base_url() . "bt-osi-old";
		$config["total_rows"] = $weapon;
		$download = $this->input->get('download');
		if ($download == 'download') {
			$config["per_page"] = $weapon;
		} else {
			$config["per_page"] = 100;
		}
		$config['use_page_numbers'] = TRUE;
		$config['reuse_query_string'] = TRUE;
		$config['full_tag_open'] = "<ul class='pagination'>";
		$config['full_tag_close'] = "</ul>";
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		$config['cur_tag_open'] = "<li class='disabled'><li class='active'><a href='#'>";
		$config['cur_tag_close'] = "<span class='sr-only'></span></a></li>";
		$config['next_tag_open'] = "<li>";
		$config['next_tagl_close'] = "</li>";
		$config['prev_tag_open'] = "<li>";
		$config['prev_tagl_close'] = "</li>";
		$config['first_tag_open'] = "<li>";
		$config['first_tagl_close'] = "</li>";
		$config['last_tag_open'] = "<li>";
		$config['last_tagl_close'] = "</li>";

		$this->pagination->initialize($config);
		$data["links"] = $this->pagination->create_links();
		$page = ($this->uri->segment(2)) ? $this->uri->segment(2) : 1;
		$start = ($page - 1) * $config["per_page"];
		//echo $start; die();
		//print_r($data["links"]); die();
		//die("hi");


		$data["weapon"] = $this->Osi_model->get_usersosiall($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $config["per_page"], $start, $mobno, $classes, $advanceSearch);
		//var_dump($data['weapon']);
		//echo $this->db->last_query();
		//die;
		//$data["counts"] = $this->Osi_model->get_users_countosiall($ito,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$mobno,$classes);
		//die;
		//echo '<HR>';
		//echo $this->db->last_query();
		$data['nm'] = $NamesofsCourses . $NamesofsCourses2;
		$this->form_validation->set_rules("BattalionUnitito", "BattalionUnitito", "trim");
		//die;
		if ($this->form_validation->run()) {
			//die;

			//$data["weapon"] = $this->Osi_model->get_usersosiall($ito,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$config["per_page"],$start,$mobno,$classes);

			//echo $this->db->last_query();

			//$data["counts"] = $this->Osi_model->get_users_countosiall($ito,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$mobno,$classes);
			$data['nm'] = $NamesofsCourses . $NamesofsCourses2;
		}
		$data['name'] = '';
		//echo $this->db->last_query();
		//echo 'dalwinder';

		if ($download == 'download') {
			$this->download_users_excel($data["weapon"]);
		}
		$this->load->view('Osi/search/search', $data);
	}
	//--------------------------Start of Updated Search functionality from previous Btalion controllers----------------------------------
	public function osi_olddataall2()
	{ /*Osi all data*/
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->library('pagination');
		$this->load->helper('common');
		$this->load->helper('osi');
		$this->load->model('Osi_model');
		$data['uname'] = $this->Osi_model->fetchinfo('users', array('user_log' => 4));

		if ($this->session->userdata('userid') == 209 || $this->session->userdata('userid') == 210) {
			$data['battalions'] =                                    osi_getIRBBattalions();
		} elseif ($this->session->userdata('userid') == 211 || $this->session->userdata('userid') == 212) {
			$data['battalions'] =                                    osi_getCDOBattalions();
		} else {
			$data['battalions'] =                                osi_getAllBattalions();
		}
		$ito = $this->input->get("ito", TRUE);				//battalion
		if ($this->session->userdata('user_log') == 4) {		//battalion login
			$ito = array($this->session->userdata('userid'));
		}

		$mobno = $this->input->get("mobno", TRUE);
		$name = $this->input->get("name", TRUE);
		$bloodgroup = $this->input->get("bloodgroup", TRUE);
		$rcnum = $this->input->get("rcnum", TRUE);
		$RankRankre = $this->input->get("RankRankre", TRUE);
		$eor1 =  $this->input->get("eor1", TRUE);
		$eor2 =  $this->input->get("eor2", TRUE);
		$eor3 =  $this->input->get("eor3", TRUE);
		$eor4 =  $this->input->get("eor4", TRUE);
		$eor5 =  $this->input->get("eor5", TRUE);
		$postate = $this->input->get("postate", TRUE);
		$pcity = $this->input->get("pcity", TRUE);
		$stts = $this->input->get("stts", TRUE);
		$classes = $this->input->get('classes', TRUE);
		$UnderGraduate = $this->input->get("UnderGraduate", TRUE);
		$Graduate = $this->input->get("Graduate", TRUE);
		$PostGraduate = $this->input->get("PostGraduate", TRUE);
		$Doctorate = $this->input->get("Doctorate", TRUE);
		$gender = $this->input->get("gender", TRUE);
		$single =  $this->input->get("single", TRUE);
		$Modemdr = $this->input->get("Modemdr", TRUE);
		$Rankre = $this->input->get("Rankre", TRUE);
		$Enlistmentec = $this->input->get("Enlistmentec", TRUE);
		$InductionModeim = $this->input->get("InductionModeim", TRUE);
		$clit = $this->input->get("clit", TRUE);
		$EnlistmentUnit = $this->input->get("EnlistmentUnit", TRUE);
		$dateofesnlistment1 = $this->input->get("dateofesnlistment1", TRUE);
		$dateofesnlistment2 =  $this->input->get("dateofesnlistment2", TRUE);
		$NamesofsCourses =  $this->input->get("NamesofsCourses1", TRUE);
		$NamesofsCourses2 =  $this->input->get("NamesofsCourses2", TRUE);
		$DateofRetirementdor = $this->input->get("DateofRetirementdor", TRUE);
		$dateofbirth = $this->input->get("dateofbirth", TRUE);
		$dateofbirthi = $this->input->get("dateofbirthi", TRUE);
		$dateofbirthi = $this->input->get("dateofbirthi", TRUE);
		$height = $this->input->get("height", TRUE);
		$inch = $this->input->get("inch", TRUE);
		$Postingtiset = $this->input->get("Postingtiset", TRUE);
		$Postingtiset2 = $this->input->get("Postingtiset2", TRUE);
		$Postingtiset3 = $this->input->get("Postingtiset3", TRUE);
		$Postingtiset4 = $this->input->get("Postingtiset4", TRUE);
		$Postingtiset5 = $this->input->get("Postingtiset5", TRUE);
		$Postingtiset6 = $this->input->get("Postingtiset6", TRUE);
		$Postingtiset7 = $this->input->get("Postingtiset7", TRUE);
		$Postingtiset8 = $this->input->get("Postingtiset8", TRUE);
		$Postingtiset9 = $this->input->get("Postingtiset9", TRUE);
		$advanceSearch = $this->input->get('advancedSearch', TRUE);
		/* $training_institutes = $this->input->get('training_institutes',TRUE);
			$courses = $this->input->get('courses',TRUE);
			if($training_institutes!=null || $courses!=null){
				$employee_ids = implode(',',$this->CourseMember_model->getEmployeeIdsByCourseAndTrainingInstituteId($courses,$training_institutes));
				//var_dump($employee_ids);
			}else{
				
			} */
		//echo '<hr>';
		//var_dump($advaceSearch);
		$p = '';

		if (isset($ito) && is_array($ito)) {
			if (count($ito) == 0) {
				$sortedBattalions = array_keys(osi_getAllBattalions());
			} else {
				//var_dump($ito);
				$sortedBattalions = $this->sortBattalions($ito);
				//var_dump($sortedBattalions);
			}
		} else {
			$sortedBattalions = array_keys(osi_getAllBattalions());
		}
		//var_dump($sortedBattalions);
		//die;
		$data['counts'] = $this->Osi_model->get_users_countosiall_ajax($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $mobno, $classes, $basic_training_center = null, $batch_number = null, $passoutyear = null);
		//echo $data['counts'];
		//die;
		//echo $this->db->last_query();
		//die('llll');
		$weapon = $data['counts'];
		//echo 'Counting is ok';
		//echo $weapon;
		//die;
		//echo $data['counts'];
		//die('a');
		$data['statelist'] = $this->Osi_model->fetchinfo('state_list', array('state_status' => 1));
		//var_dump($data['statelist']);
		//die;
		$config = array();
		$config["base_url"] = base_url() . "bt-osi-old";
		$config["total_rows"] = $weapon;
		$download = $this->input->get('download');
		if ($download == 'download') {
			$config["per_page"] = $weapon;
		} else {
			$config["per_page"] = 10;
		}
		$config['use_page_numbers'] = TRUE;
		$config['reuse_query_string'] = TRUE;
		$config['full_tag_open'] = "<ul class='pagination'>";
		$config['full_tag_close'] = "</ul>";
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		$config['cur_tag_open'] = "<li class='disabled'><li class='active'><a href='#'>";
		$config['cur_tag_close'] = "<span class='sr-only'></span></a></li>";
		$config['next_tag_open'] = "<li>";
		$config['next_tagl_close'] = "</li>";
		$config['prev_tag_open'] = "<li>";
		$config['prev_tagl_close'] = "</li>";
		$config['first_tag_open'] = "<li>";
		$config['first_tagl_close'] = "</li>";
		$config['last_tag_open'] = "<li>";
		$config['last_tagl_close'] = "</li>";

		$this->pagination->initialize($config);
		$data["links"] = $this->pagination->create_links();
		$page = ($this->uri->segment(2)) ? $this->uri->segment(2) : 1;
		$start = ($page - 1) * $config["per_page"];
		//echo $start; die();
		//print_r($data["links"]); die();
		//die("hi");


		$data["weapon"] = []; //= $this->Osi_model->get_usersosiall_ajax($sortedBattalions,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$config["per_page"],$start,$mobno,$classes,$advanceSearch);

		$data['nm'] = $NamesofsCourses . $NamesofsCourses2;
		$this->form_validation->set_rules("BattalionUnitito", "BattalionUnitito", "trim");
		//die;

		$data['name'] = '';
		//echo $this->db->last_query();
		//echo 'dalwinder';
		$this->load->model('TrainingInstitute_model');
		$this->load->model('Course_model');

		$where = ['deleted' => 'NO', 'enabled' => 'YES'];
		$training_institutes_objs = $this->TrainingInstitute_model->getInstitutesIDNamePair($where);
		$training_institutes = [];
		$training_institutes[''] = '--Select Training Institute--';

		foreach ($training_institutes_objs as $k => $val) {
			$training_institutes[$val->id] = $val->institute_name;
		}
		$data['training_institutes'] = $training_institutes;
		$courses = [];
		$courses[''] = "--Select Course--";
		$courses_objs = $this->Course_model->getCoursesIDNamePair($where);
		foreach ($courses_objs as $k => $val) {
			$courses[$val->id] = $val->course_name;
		}
		$data['courses'] = $courses;

		//leaves
		$this->load->model('Leave_model');
		$leave_objs = $this->Leave_model->getLeaves();
		$leaves = [];
		foreach ($leave_objs as $k => $leave_obj) {
			$leaves[$leave_obj->posting_id] = $leave_obj->id;
		}
		$data['leaves'] = $leaves;
		if ($download == 'download') {
			$this->download_users_excel($data["weapon"]);
		}
		if ($this->session->userdata('user_log') == 4) {		//battalion login
			$this->load->view('Osi/search/search2_bat', $data);
		} else {
			$this->load->view('Osi/search/search2', $data);
		}
	}
	public function ajax_osi_users_data()
	{
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->library('pagination');
		$this->load->library('Employee');
		$this->load->helper('common');
		$this->load->helper('osi');
		$this->load->model('Osi_model');
		$this->load->model('Posting_model');
		$this->load->model('CourseMember_model');
		$data['uname'] = $this->Osi_model->fetchinfo('users', array('user_log' => 4));
		$ito = [];
		if (null != $this->input->post("ito", TRUE)) {
			$ito = $this->input->post("ito", TRUE);
		}			//battalion
		if ($this->session->userdata('user_log') == 4) {		//battalion login
			$ito = array($this->session->userdata('userid'));
		}
		//var_dump($ito);
		if (count($ito) > 0) {
			foreach ($ito as $k => $val) {
				$ito[$k] = (int)$val;
			}
		}
		$mobno = $this->input->post("mobno", TRUE);
		$name = $this->input->post("name", TRUE);
		$bloodgroup = $this->input->post("bloodgroup", TRUE);
		$rcnum = $this->input->post("rcnum", TRUE);
		$RankRankre = $this->input->post("RankRankre", TRUE);
		$eor1 =  $this->input->post("eor1", TRUE);
		$eor2 =  $this->input->post("eor2", TRUE);
		$eor3 =  $this->input->post("eor3", TRUE);
		$eor4 =  $this->input->post("eor4", TRUE);
		$eor5 =  $this->input->post("eor5", TRUE);
		$postate = $this->input->post("postate", TRUE);
		$pcity = $this->input->post("pcity", TRUE);
		$stts = $this->input->post("stts", TRUE);
		$classes = $this->input->post('classes', TRUE);
		$UnderGraduate = $this->input->post("UnderGraduate", TRUE);
		$Graduate = $this->input->post("Graduate", TRUE);
		$PostGraduate = $this->input->post("PostGraduate", TRUE);
		$Doctorate = $this->input->post("Doctorate", TRUE);
		$gender = $this->input->post("gender", TRUE);
		$single =  $this->input->post("single", TRUE);
		$Modemdr = $this->input->post("Modemdr", TRUE);
		$Rankre = $this->input->post("Rankre", TRUE);
		$Enlistmentec = $this->input->post("Enlistmentec", TRUE);
		$InductionModeim = $this->input->post("InductionModeim", TRUE);
		$clit = $this->input->post("clit", TRUE);
		$EnlistmentUnit = $this->input->post("EnlistmentUnit", TRUE);
		$dateofesnlistment1 = $this->input->post("dateofesnlistment1", TRUE);
		$dateofesnlistment2 =  $this->input->post("dateofesnlistment2", TRUE);
		$NamesofsCourses =  $this->input->post("NamesofsCourses1", TRUE);
		$NamesofsCourses2 =  $this->input->post("NamesofsCourses2", TRUE);
		$DateofRetirementdor = $this->input->post("DateofRetirementdor", TRUE);
		$dateofbirth = $this->input->post("dateofbirth", TRUE);
		$dateofbirthi = $this->input->post("dateofbirthi", TRUE);
		$dateofbirthi = $this->input->post("dateofbirthi", TRUE);
		$height = $this->input->post("height", TRUE);
		$inch = $this->input->post("inch", TRUE);
		$selected_posting_ids = $this->input->post('selected_posting_ids');
		$not_set2 = $this->input->post('not_set2');
		//var_dump($selected_posting_ids);
		$excluded_employee_ids = null;
		if($not_set2!=null && $not_set2=='true'){
			$excluded_employee_id_objs = $this->Posting_model->getEmployeeIdsFromPostingHistoryIGP($ito, (new DateTime())->format('Y-m-d'));//, $ranks = null, $rank_category = null, $posting_id = null);
			$excluded_employee_ids = [];
			foreach($excluded_employee_id_objs as $k=>$val){
				if(!in_array($val->employee_id,$excluded_employee_ids)){
					$excluded_employee_ids[] = $val->employee_id;
				}
			}
			//echo count($excluded_employee_ids);
			//die;
		}
		$birthday_date = $this->input->post("birthday_date", TRUE);
		//var_dump($birthday_date);
		$dob_created_from = null;
		$dob_created_to = null;
		if (isset($birthday_date) && trim($birthday_date) != '' && preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}-(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}$/', $birthday_date)) {
			//if(preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}-(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}$/',$date)){
			$created = trim($birthday_date);
			//date
			$dob_created_from = date_format(date_create_from_format('d/m/Y', substr($created, 0, 10)), '-m-d');
			$dob_created_to = date_format(date_create_from_format('d/m/Y', substr($created, 11, 10)), '-m-d');
			//echo $dob_created_from;
			//echo $dob_created_to;
			//die;
			//                        $this->db->group_start();
			//                        $this->db->where('hospital_opd_slip.created >=', $from);
			//                        $this->db->where('hospital_opd_slip.created <=', $to);
			//                        $this->db->group_end();
		}

		$age_filter = $this->input->post('age_filter');
		$age_filter_type = osi_get_age_filter_type($age_filter);
		$search_age_filter = null;

		//echo 'hi';

		if ($age_filter != null && trim($age_filter) != '') {
			$search_age_filter['AGE_FILTER_TYPE'] = $age_filter_type;
			switch ($age_filter_type) {
				case 'RANGE_FILTER':
					$search_age_filter['date_of_birth_from'] = osi_create_date_from_age(explode('-', $age_filter)[0]);
					$search_age_filter['date_of_birth_to'] = osi_create_date_from_age(explode('-', $age_filter)[1]);
					break;
				case 'GREATOR_THAN_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('>', $age_filter)[1]);
					break;
				case 'GREATOR_THAN_EQUAL_TO_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('>=', $age_filter)[1]);
					break;
				case 'LESS_THAN_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('<', $age_filter)[1]);
					break;
				case 'LESS_THAN_EQUAL_TO_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('<=', $age_filter)[1]);
					break;
				case 'EXACT_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age($age_filter);
					break;
				default:
					$search_age_filter = null;
			}
		}


		$PostingSetToBeUsed = $this->input->post("PostingSetToBeUsed", TRUE);

		$Postingtiset = $this->input->post("Postingtiset", TRUE);
		$Postingtiset2 = $this->input->post("Postingtiset2", TRUE);
		$Postingtiset3 = $this->input->post("Postingtiset3", TRUE);
		$Postingtiset4 = $this->input->post("Postingtiset4", TRUE);
		$Postingtiset5 = $this->input->post("Postingtiset5", TRUE);
		$Postingtiset6 = $this->input->post("Postingtiset6", TRUE);
		$Postingtiset7 = $this->input->post("Postingtiset7", TRUE);
		$Postingtiset8 = $this->input->post("Postingtiset8", TRUE);
		$Postingtiset9 = $this->input->post("Postingtiset9", TRUE);
		$advanceSearch = $this->input->post('advancedSearch', TRUE);

		$Postingtiset = null;
		$Postingtiset2 = null;
		$Postingtiset3 = null;
		$Postingtiset4 = null;
		$Postingtiset5 = null;
		$Postingtiset6 = null;
		$Postingtiset7 = null;
		$Postingtiset8 = null;
		$Postingtiset9 = null;
		switch ($PostingSetToBeUsed) {
			case 'Fix Duties': {
					$Postingtiset = $this->input->post("Postingtiset", TRUE);
					break;
				}
			case 'Law & Order Duty': {
					$Postingtiset2 = $this->input->post("Postingtiset2", TRUE);
					break;
				}
			case 'Special Squads': {
					$Postingtiset3 = $this->input->post("Postingtiset3", TRUE);
					break;
				}
			case 'Permanent Attachment': {
					$Postingtiset4 = $this->input->post("Postingtiset4", TRUE);
					break;
				}
			case 'Training': {
					$Postingtiset5 = $this->input->post("Postingtiset5", TRUE);
					break;
				}
			case 'Sports': {
					$Postingtiset6 = $this->input->post("Postingtiset6", TRUE);
					break;
				}
			case 'Available with BNs': {
					$Postingtiset7 = $this->input->post("Postingtiset7", TRUE);
					break;
				}
			case 'Battalion Misc Duties': {
					$Postingtiset8 = $this->input->post("Postingtiset8", TRUE);
					break;
				}
			case 'Institutions': {
					$Postingtiset9 = $this->input->post("Postingtiset9", TRUE);
					break;
				}
		}
		$basic_training_center = $this->input->post('basic_training_center');
		$batch_number = $this->input->post('batch_number');
		$passoutyear = $this->input->post('passoutyear');			//var_dump($Postingtiset);
		//$mobno = '8699';
		//$advanceSearch = true;
		//echo '<hr>';
		//var_dump($advaceSearch);
		$p = '';
		//die('dalwinder');
		//echo '<hr>';
		// var_dump($ito);
		// echo '<hr>';
		// 
		//var_dump($ito);
		$all_battalions = array_keys(osi_getAllBattalions());
		if (null != $this->input->post('all_battalions') && is_array($this->input->post('all_battalions')) && count($this->input->post('all_battalions')) > 0) {
			$sortedBattalions = $this->input->post('all_battalions');
			$all_battalions = $sortedBattalions;
		} elseif (null != $ito && isset($ito) && is_array($ito)) {
			if (count($ito) == 0) {
				$sortedBattalions = array_keys(osi_getAllBattalions());
			} else {
				//var_dump($ito);
				$sortedBattalions = $this->sortBattalions($ito);
				//var_dump($sortedBattalions);
			}
		} else {
			$sortedBattalions = array_keys(osi_getAllBattalions());
		}
		//echo '<br>';
		//$this->db->reset_query();
		$data['statelist'] = $this->Osi_model->fetchinfo('state_list', array('state_status' => 1));
		//die;
		//$data['counts']=10;
		//var_dump($sortedBattalions);
		//$this->db->reset_query();

		$training_institutes = $this->input->post('training_institutes', TRUE);
		//var_dump($training_institutes);
		$courses = $this->input->post('courses', TRUE);
		//var_dumP($training_institutes);
		//var_dumP($courses);

		$employee_ids = null;
		$training_employee_ids = null;
		if ($training_institutes != null || $courses != null) {
			$employee_id_objs = $this->CourseMember_model->getEmployeeIdsByCourseAndTrainingInstituteId($courses, $training_institutes);
			$training_employee_ids = [];
			foreach ($employee_id_objs as $k => $employee_id_obj) {
				$training_employee_ids[] = $employee_id_obj->employee_id;
			}
		}
		$posting_employee_ids = null;
		if ($selected_posting_ids != null ) {
			//get employees with this posting

			$posting_history_objs = $this->Posting_model->getPostingHistoryIGP3($ito, (new DateTime())->format('Y-m-d'), null, null, $selected_posting_ids);
			//$battalions,$before_date=null,$ranks=null,$rank_category=null,$posting_id=null){
			$posting_employee_ids = [];
			foreach ($posting_history_objs as $k => $val) {
				$posting_employee_ids[] = $val->employee_id;
			}
		}
		//var_dumP($posting_employee_ids);
		//var_dumP($training_employee_ids);
		if ($training_employee_ids == null) {
			//echo "NULL";
			if ($posting_employee_ids != null) {
				$employee_ids = $posting_employee_ids;
			}
		} else {
			if ($posting_employee_ids != null) {
				if ($training_employee_ids != null) {
					foreach ($training_employee_ids as $k => $id) {
						if (in_array($id, $training_employee_ids)) {
							$employee_ids[] = $id;
						}
					}
				} else {
					$employee_ids = $posting_employee_ids;
				}
			} else {
				$employee_ids = $training_employee_ids;
			}
		}
		//var_dump($employee_ids);

		$stats = $this->Osi_model->get_user_count_osiall_ajax($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $mobno, $classes, $advanceSearch, $employee_ids, $basic_training_center, $batch_number, $passoutyear,  $search_age_filter, $dob_created_from, $dob_created_to,$excluded_employee_ids);
		//var_dump($stats);
		$weapon = $total_filtered_users = $stats['no_of_records'];

		//var_dump($data['statelist']);
		//die;
		$config = array();
		$config["base_url"] = base_url() . "bt-osi-old";
		$config["total_rows"] = $weapon;
		$download = $this->input->get('download');
		if ($download == 'download') {
			$config["per_page"] = $weapon;
		} else {
			$config["per_page"] = 10;
		}

		$length = 10;
		$start = 0;
		if (null != $this->input->post('length')  && $this->input->post('start') != null) {
			$length = $this->input->post('length');
			$start = $this->input->post('start');
		}

		$weapons = [];
		//echo 'bi';
		$select_parameters = ['present_address'];
		if ($stats['fetch_users'] == true) {

			$weapons = $data["weapon"] = $this->Osi_model->get_usersosiall_ajax($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $length, $start, $mobno, $classes, $advanceSearch, $employee_ids, $basic_training_center, $batch_number, $passoutyear, $search_age_filter, $select_parameters, $dob_created_from, $dob_created_to,$excluded_employee_ids);
		}
		$_query_str = $this->db->last_query();
		//die('dalwinder');
		$data['nm'] = $NamesofsCourses . $NamesofsCourses2;
		//$this->form_validation->set_rules("BattalionUnitito", "BattalionUnitito", "trim");
		//die;

		$data['name'] = '';
		$user_ids = [];
		foreach ($weapons as $k => $val) {
			$user_ids[] = $val->new_man_id;
		}
		//get the users postings;=
		if ($user_ids != null && count($user_ids) > 0) {
			$new_postings_objs = $this->Posting_model->getPostingsOfSelectedEmployees($user_ids);
		} else {
			$new_postings_objs = [];
		}
		$new_postings = [];
		foreach ($new_postings_objs as $k => $new_postings_obj) {
			$new_postings[$new_postings_obj->employee_id]['name'] = $new_postings_obj->name;
			if ($new_postings_obj->title != null) {
				$new_postings[$new_postings_obj->employee_id]['name'] .= ' - ' . $new_postings_obj->title;
				if ($new_postings_obj->type_title != null) {
					$new_postings[$new_postings_obj->employee_id]['name'] .= ' (' . $new_postings_obj->type_title . ')';
				}
			}
			$new_postings[$new_postings_obj->employee_id]['date'] = $new_postings_obj->posting_date;
		}
		//echo $this->db->last_query();
		//echo 'dalwinder';

		/*if($download=='download'){
				$this->download_users_excel($data["weapon"]);
			}*/
		//$this->load->view('Osi/search/search2',$data);
		$sno = 1;
		$users = [];
		foreach ($weapons as $k => $val) {
			$user = [];
			$employee = new Employee();
			$employee->initializeFromDatabase($val);
			$user['age'] = $employee->getAgeYears();
			$user['sno']    = $sno;
			$user['name']   = $val->name;

			$posting_add_link = base_url('bt-add-rank/' . $val->new_man_id);
			$posting_edit_link = base_url('bt-edit-rank/' . $val->new_man_id);
			$posting_delete_link = base_url('bt-posdeleit' . '/' . $val->new_man_id);
			$user['posting'] = <<<POSTING
					<div class="dropdown"><button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown"> Posting  <span class="caret"></span></button>  <ul class="dropdown-menu">    
						<li><a href="#" onClick="showAddPostingModal('{$user['name']}',{$val->new_man_id});selectParentDuty2();"> <i class="fa fa-plus"></i> Add</a></li> 
						<li><a href="{$posting_delete_link}" onclick="return confirm(\'Are you sure you want to delete?\');"> <i class="fa fa-minus"></i>Delete</a></li> 
					</ul></div>
POSTING;
			/*
					<li><a href="{$posting_add_link}" target="_blank"> <i class="fa fa-plus"></i> Add</a></li>  
					<li><a href="{$posting_edit_link}" target="_blank"> <i class="fa fa-edit"></i> Edit</a></li>
					<li><a href="{$posting_delete_link}" onclick="return confirm(\'Are you sure you want to delete?\');"> <i class="fa fa-minus"></i>Delete</a></li> 
				*/
			$user_edit_link = base_url('bt-updates-manpower/' . $val->new_man_id);
			$user['edit'] = <<<USEREDIT
				 <a href="{$user_edit_link}" class="btn btn-success btn-xs" target="_blank"> <i class="fa fa-edit"></i> Edit Info</a>
USEREDIT;
			$user_delete_link = base_url('bt-osidelete/' . $val->new_man_id);
			$user['delete'] = <<<USERDELETE
				<a href="{$user_delete_link}" class="btn btn-danger btn-xs" onclick="return confirm('Are you sure you want to delete this record?');">Delete</a>
USERDELETE;
			$user_view_link = base_url('bt-osiinfo/' . $val->new_man_id);
			$user['view'] = <<<USERVIEW
				<a href="{$user_view_link}" class="btn btn-success btn-xs" target="_blank"> <i class="fa fa-eye"></i> View</a>
USERVIEW;
			/* if($val->bunitdistrict ==''){
                      $bats = fetchoneinfo('users',array('users_id' => $val->bat_id)); 
					  if(null!=$bats){$user['battalion_unit']= $bats->nick; }else{$user['battalion_unit']= 'Battalion not found'; }
                       }else{
                        $user['battalion_unit'] = $val->bunitdistrict; 
                       } */
			$user['battalion_unit'] = ($val->bunitdistrict == '' || $val->bunitdistrict == NULL) ? $val->nick : $val->bunitdistrict;
			$user['present_rank'] = $val->cexrank . $val->cminirank . $val->cmedirank . $val->ccprank . $val->cccrank;
			$user['permanent_rank'] = $val->permanent_rank;
			$user['depttno'] = $val->depttno;
			$user['fathername'] = $val->fathername;
			$user['permanent_address'] = $this->generateAddress($val->houseno, $val->streetno, $val->wardno, $val->villmohala, $val->postoffice, null, $val->teshil);
			if (in_array('present_address', $select_parameters)) {
				$user['present_address'] = $this->generateAddress($val->phouse, $val->pstreet, $val->pward, $val->pvillmohala, $val->ppostoffice, $val->ppolicestation, $val->ptehsil, $val->pdistrict, $val->pstate);
			}
			$user['police_station'] = $val->policestation;
			$user['district'] = $val->district;
			$user['state'] = $val->state;
			$user['gender'] = $val->gender;
			$user['maritalstatus'] = $val->maritalstatus;
			$user['dateofbith'] = convertDateYMDtoDMYHyphen($val->dateofbith);
			$user['dateofinlitment'] = convertDateYMDtoDMYHyphen($val->dateofinlitment);
			$user['caste'] = $val->caste;
			$user['category'] = $val->category;
			$user['mobile'] = $val->phono1;
			$user['bloodgroup'] = $val->bloodgroup;
			$user['eduqalification'] = $val->eduqalification . '&nbsp;' . $val->UnderGraduate . $val->Graduate . $val->PostGraduate . $val->Doctorate . $val->Doctorateother;;
			$user['comlit'] = $val->comlit;
			$ax = explode('@', $val->NamesofsCourses);
			$user['NamesofCourses'] = count($ax);
			$user['nm'] = ''; //$nm;
			$user['dateofretirement'] = convertDateYMDtoDMYHyphen($val->dateofretirment);
			//$user['dateofretirement2'] = $val->dateofretirment2;

			$user['bankacno'] = $val->bankacno;
			$user['ifsc_code'] = $val->ifsccode;
			$user['adharno'] = $val->adharno;
			$user['pan_card'] = $val->pan;
			$user['hrms_code'] = $val->hrms_code;
			$user['height'] = $val->feet . '\' &nbsp;' . $val->inch . '"';
			$user['gpfpranno'] = $val->gpfpranno . ',' . $val->PRAN;
			$user['gd1'] = $val->gd1;
			$user['bd1'] = $val->bd1;
			$user['training_institute'] = $val->btic;
			$user['batch_no'] = $val->batchgroup;
			$user['year_of_passed'] = $val->passoutyear;
			$user['firing_range'] = $val->NameofsRanges;
			$user['firing_date'] = $val->dateofprcatice;
			$user['firing_weapon'] = $val->tow;
			//$user['posting_concat1'] = $val->posting_concat1;
			//$user['dateofposting1'] = $val->dateofposting1;
			$user['addPosting'] = <<<ADDPOSTING
			<button class="btn btn-default green-back white" onClick="showAddPostingModal('{$user['name']}',{$val->new_man_id});">Add Posting</button>
ADDPOSTING;
			$user['seeHistory'] = <<<SEEHISTORY
				<button class="btn btn-default blue-back white" onClick="posting_history_obj.getPostingHistory({$val->new_man_id})">History</button>
SEEHISTORY;
			if (isset($new_postings[$val->new_man_id]['name'])) {
				$user['new_posting'] = $new_postings[$val->new_man_id]['name'];
				$user['date_of_posting'] = DateTime::createFromFormat('Y-m-d H:i:s', $new_postings[$val->new_man_id]['date'])->format('d-m-Y h:i:s a');
			} else {
				$user['new_posting'] = 'NOT SET';
				$user['date_of_posting'] = 'NOT SET';
			}
			$users[] = $user;
			$sno++;
		}
		$total_users = $this->Osi_model->get_users_countosiall_ajax($all_battalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $mobno, $classes, $basic_training_center, $batch_number, $passoutyear);

		//$this->Osi_model->get_total_user_ajax($sortedBattalions,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$mobno,$classes,$advanceSearch);
		$output = array(
			//'query'=>$_query_str,
			"draw" => intval($_POST['draw']),
			"recordsTotal" => $total_users, //$this->Posting_model->getTotalEmployees(),
			"recordsFiltered" => $total_filtered_users, //$this->Posting_model->getTotalFilteredEmployees(),
			"data"	=> $users,
		);
		echo json_encode($output);
	}

	public function ajax_osi_user_download_excel()
	{

		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->library('pagination');
		$this->load->library('Employee');
		$this->load->helper('common');
		$this->load->helper('osi');
		$this->load->model('Osi_model');
		$this->load->model('CourseMember_model');
		$this->load->model('Posting_model');
		$data['uname'] = $this->Osi_model->fetchinfo('users', array('user_log' => 4));
		$ito = [];
		if (null != $this->input->post("ito", TRUE)) {
			$ito = $this->input->post("ito", TRUE);
		}			//battalion
		if ($this->session->userdata('user_log') == 4) {		//battalion login
			$ito = array($this->session->userdata('userid'));
		}
		if (count($ito) > 0) {
			foreach ($ito as $k => $val) {
				$ito[$k] = (int)$val;
			}
		}
		//var_dump($ito);
		//$ito = [0];
		//var_dump($_POST);
		$mobno = $this->input->post("mobno", TRUE);
		$name = $this->input->post("name", TRUE);
		$bloodgroup = $this->input->post("bloodgroup", TRUE);
		$rcnum = $this->input->post("rcnum", TRUE);
		$RankRankre = $this->input->post("RankRankre", TRUE);
		$eor1 =  $this->input->post("eor1", TRUE);
		$eor2 =  $this->input->post("eor2", TRUE);
		$eor3 =  $this->input->post("eor3", TRUE);
		$eor4 =  $this->input->post("eor4", TRUE);
		$eor5 =  $this->input->post("eor5", TRUE);
		$postate = $this->input->post("postate", TRUE);
		$pcity = $this->input->post("pcity", TRUE);
		$stts = $this->input->post("stts", TRUE);
		$classes = $this->input->post('classes', TRUE);
		$UnderGraduate = $this->input->post("UnderGraduate", TRUE);
		$Graduate = $this->input->post("Graduate", TRUE);
		$PostGraduate = $this->input->post("PostGraduate", TRUE);
		$Doctorate = $this->input->post("Doctorate", TRUE);
		$gender = $this->input->post("gender", TRUE);
		$single =  $this->input->post("single", TRUE);
		$Modemdr = $this->input->post("Modemdr", TRUE);
		$Rankre = $this->input->post("Rankre", TRUE);
		$Enlistmentec = $this->input->post("Enlistmentec", TRUE);
		$InductionModeim = $this->input->post("InductionModeim", TRUE);
		$clit = $this->input->post("clit", TRUE);
		$EnlistmentUnit = $this->input->post("EnlistmentUnit", TRUE);
		$dateofesnlistment1 = $this->input->post("dateofesnlistment1", TRUE);
		$dateofesnlistment2 =  $this->input->post("dateofesnlistment2", TRUE);
		$NamesofsCourses =  $this->input->post("NamesofsCourses1", TRUE);
		$NamesofsCourses2 =  $this->input->post("NamesofsCourses2", TRUE);
		$DateofRetirementdor = $this->input->post("DateofRetirementdor", TRUE);
		$dateofbirth = $this->input->post("dateofbirth", TRUE);
		$dateofbirthi = $this->input->post("dateofbirthi", TRUE);
		$dateofbirthi = $this->input->post("dateofbirthi", TRUE);
		$height = $this->input->post("height", TRUE);
		$inch = $this->input->post("inch", TRUE);
		//$selected_posting_ids = $this->input->post("selected_posting_ids", TRUE);
		$selected_posting_ids = $this->input->post("selected_posting_ids", TRUE);
		$not_set2 = $this->input->post("not_set2", TRUE);
		$excluded_employee_ids = null;
		if($not_set2!=null && $not_set2=='true'){
			$excluded_employee_id_objs = $this->Posting_model->getEmployeeIdsFromPostingHistoryIGP($ito, (new DateTime())->format('Y-m-d'));//, $ranks = null, $rank_category = null, $posting_id = null);
			$excluded_employee_ids = [];
			foreach($excluded_employee_id_objs as $k=>$val){
				if(!in_array($val->employee_id,$excluded_employee_ids)){
					$excluded_employee_ids[] = $val->employee_id;
				}
			}
			//echo count($excluded_employee_ids);
			//die;
		}
		$birthday_date = $this->input->post("birthday_date", TRUE);
		//var_dump($birthday_date);
		$dob_created_from = null;
		$dob_created_to = null;
		if (isset($birthday_date) && trim($birthday_date) != '' && preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}-(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}$/', $birthday_date)) {
			//if(preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}-(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/[0-9]{4}$/',$date)){
			$created = trim($birthday_date);
			//date
			$dob_created_from = date_format(date_create_from_format('d/m/Y', substr($created, 0, 10)), '-m-d');
			$dob_created_to = date_format(date_create_from_format('d/m/Y', substr($created, 11, 10)), '-m-d');
			//echo $dob_created_from;
			//echo $dob_created_to;
			//die;
			//                        $this->db->group_start();
			//                        $this->db->where('hospital_opd_slip.created >=', $from);
			//                        $this->db->where('hospital_opd_slip.created <=', $to);
			//                        $this->db->group_end();
		}

		$PostingSetToBeUsed = $this->input->post("PostingSetToBeUsed", TRUE);

		$Postingtiset = $this->input->post("Postingtiset", TRUE);
		$Postingtiset2 = $this->input->post("Postingtiset2", TRUE);
		$Postingtiset3 = $this->input->post("Postingtiset3", TRUE);
		$Postingtiset4 = $this->input->post("Postingtiset4", TRUE);
		$Postingtiset5 = $this->input->post("Postingtiset5", TRUE);
		$Postingtiset6 = $this->input->post("Postingtiset6", TRUE);
		$Postingtiset7 = $this->input->post("Postingtiset7", TRUE);
		$Postingtiset8 = $this->input->post("Postingtiset8", TRUE);
		$Postingtiset9 = $this->input->post("Postingtiset9", TRUE);
		$advanceSearch = $this->input->post('advancedSearch', TRUE);

		$Postingtiset = null;
		$Postingtiset2 = null;
		$Postingtiset3 = null;
		$Postingtiset4 = null;
		$Postingtiset5 = null;
		$Postingtiset6 = null;
		$Postingtiset7 = null;
		$Postingtiset8 = null;
		$Postingtiset9 = null;
		$age_filter = $this->input->post('age_filter');
		//echo 'hi';
		/*if($age_filter!=null && trim($age_filter)!=''){
				$date_of_birth_from = osi_create_date_from_age(explode('-',$age_filter)[0]);
				$date_of_birth_to = osi_create_date_from_age(explode('-',$age_filter)[1]);
				$search_age_filter[]=$date_of_birth_from;
				//echo $date_of_birth_from;
				//echo $date_of_birth_to;
			}*/
		$age_filter = $this->input->post('age_filter');
		$age_filter_type = osi_get_age_filter_type($age_filter);
		$search_age_filter = null;

		//echo 'hi';

		if ($age_filter != null && trim($age_filter) != '') {
			$search_age_filter['AGE_FILTER_TYPE'] = $age_filter_type;
			switch ($age_filter_type) {
				case 'RANGE_FILTER':
					$search_age_filter['date_of_birth_from'] = osi_create_date_from_age(explode('-', $age_filter)[0]);
					$search_age_filter['date_of_birth_to'] = osi_create_date_from_age(explode('-', $age_filter)[1]);
					break;
				case 'GREATOR_THAN_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('>', $age_filter)[1]);
					break;
				case 'GREATOR_THAN_EQUAL_TO_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('>=', $age_filter)[1]);
					break;
				case 'LESS_THAN_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('<', $age_filter)[1]);
					break;
				case 'LESS_THAN_EQUAL_TO_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age(explode('<=', $age_filter)[1]);
					break;
				case 'EXACT_FILTER':
					$search_age_filter['date_of_birth'] = osi_create_date_from_age($age_filter);
					break;
				default:
					$search_age_filter = null;
			}
		}
		switch ($PostingSetToBeUsed) {
			case 'Fix Duties': {
					$Postingtiset = $this->input->post("Postingtiset", TRUE);
					break;
				}
			case 'Law & Order Duty': {
					$Postingtiset2 = $this->input->post("Postingtiset2", TRUE);
					break;
				}
			case 'Special Squads': {
					$Postingtiset3 = $this->input->post("Postingtiset3", TRUE);
					break;
				}
			case 'Permanent Attachment': {
					$Postingtiset4 = $this->input->post("Postingtiset4", TRUE);
					break;
				}
			case 'Training': {
					$Postingtiset5 = $this->input->post("Postingtiset5", TRUE);
					break;
				}
			case 'Sports': {
					$Postingtiset6 = $this->input->post("Postingtiset6", TRUE);
					break;
				}
			case 'Available with BNs': {
					$Postingtiset7 = $this->input->post("Postingtiset7", TRUE);
					break;
				}
			case 'Battalion Misc Duties': {
					$Postingtiset8 = $this->input->post("Postingtiset8", TRUE);
					break;
				}
			case 'Institutions': {
					$Postingtiset9 = $this->input->post("Postingtiset9", TRUE);
					break;
				}
		}

		//var_dump($Postingtiset);
		//$mobno = '8699';

		//$advanceSearch = true;
		//echo '<hr>';
		//var_dump($advaceSearch);
		$p = '';
		//die('dalwinder');
		//echo '<hr>';
		// var_dump($ito);
		// echo '<hr>';
		//var_dump($ito);
		if (null != $this->input->post('all_battalions') && is_array($this->input->post('all_battalions')) && count($this->input->post('all_battalions')) > 0) {
			$sortedBattalions = $this->input->post('all_battalions');
		} elseif (null != $ito && isset($ito) && is_array($ito)) {
			if (count($ito) == 0) {
				$sortedBattalions = array_keys(osi_getAllBattalions());
			} else {
				//var_dump($ito);
				$sortedBattalions = $this->sortBattalions($ito);
				//var_dump($sortedBattalions);
			}
		} else {
			$sortedBattalions = array_keys(osi_getAllBattalions());
		}

		//echo '<br>';
		//$this->db->reset_query();
		$data['statelist'] = $this->Osi_model->fetchinfo('state_list', array('state_status' => 1));
		//die;
		//$data['counts']=10;
		//var_dump($sortedBattalions);
		//$this->db->reset_query();
		$training_institutes = $this->input->post('training_institutes', TRUE);
		//var_dump($training_institutes);
		$courses = $this->input->post('courses', TRUE);
		$employee_ids = [];
		$course_ids = [];
		$employee_courses_relation = [];
		if ($training_institutes != null || $courses != null) {
			//die('j');
			$employee_id_objs = $this->CourseMember_model->getEmployeeIdsByCourseAndTrainingInstituteId2($courses, $training_institutes);
			foreach ($employee_id_objs as $k => $employee_id_obj) {
				$employee_ids[] = $employee_id_obj->employee_id;
				if (!in_array($employee_id_obj->course_id, $course_ids)) {
					$course_ids[] = $employee_id_obj->course_id;
				}
				if (isset($employee_courses_relation[$employee_id_obj->employee_id])) {
					$employee_courses_relation[$employee_id_obj->employee_id][] = $employee_id_obj->course_id;
				} else {
					$employee_courses_relation[$employee_id_obj->employee_id] = [$employee_id_obj->course_id];
				}
			}
		} else {
			//get all the course of emloyees
			$employee_id_objs = $this->CourseMember_model->getEmployeeIdsByCourseAndTrainingInstituteId2(null, null);
			foreach ($employee_id_objs as $k => $employee_id_obj) {
				//$employee_ids[] = $employee_id_obj->employee_id;
				if (!in_array($employee_id_obj->course_id, $course_ids)) {
					$course_ids[] = $employee_id_obj->course_id;
				}
				if (isset($employee_courses_relation[$employee_id_obj->employee_id])) {
					$employee_courses_relation[$employee_id_obj->employee_id][] = $employee_id_obj->course_id;
				} else {
					$employee_courses_relation[$employee_id_obj->employee_id] = [$employee_id_obj->course_id];
				}
			}
		}
		//var_dump($employee_courses_relation);
		//var_dump($employee_courses_relation[8051]);
		$all_courses = [];
		if (count($course_ids) > 0) {
			$course_objs = $this->CourseMember_model->getCoursesByIds($course_ids);
		} else {
			$course_objs = $this->CourseMember_model->getAllCourses();
		}
		if ($course_objs != null && count($course_objs) > 0) {
			foreach ($course_objs as $k => $val) {
				$all_courses[$val->id] = $val->course_name;
			}
		}
		$posting_employee_ids = null;
		
		if ($selected_posting_ids != null && (is_array($selected_posting_ids) || trim($selected_posting_ids) != '')) {
			//get employees with this posting
			// fetch all the postings
			//iterate
			//it will fetch only first record
			$posting_history_objs = $this->Posting_model->getPostingHistoryIGP3($ito, (new DateTime())->format('Y-m-d'), null, null,$selected_posting_ids);
			$posting_employee_ids = [];
			//$employees_parsed = [];
			//$allowed_posting_objects = [];
			foreach ($posting_history_objs as $k => $val) {
				$posting_employee_ids[] = $val->employee_id;
			}
			//var_dumP($posting_employee_ids);
			/*foreach($all_posting_history_objs as $k=>$val){
				if(!in_array($val->employee_id,$employees_parsed)){
					$employees_parsed[] = $val->employee_id;
					if(in_array($val->posting_id,$selected_posting_ids)){
						$$posting_employee_ids[] = $val->employee_id;
						$allowed_posting_objects[] = $val;
					}
				}
			}*/
			//$all_posting_history_objs = $this->Posting_model->getPostingHistoryIGP5($ito, (new DateTime())->format('Y-m-d'), null, null,$posting_employee_ids);
			//echo count($posting_employee_ids);
			//var_dump($posting_employee_ids);
			/*$posting_history_objs = $this->Posting_model->getPostingHistoryIGP($ito, (new DateTime())->format('Y-m-d'), null, null, $selected_posting_ids);
			//$battalions,$before_date=null,$ranks=null,$rank_category=null,$posting_id=null){
			foreach ($posting_history_objs as $k => $val) {
				$posting_employee_ids[] = $val->employee_id;
			}*/
		}
		if($posting_employee_ids!=null && is_array($posting_employee_ids) && count($posting_employee_ids)>0){
			$employee_ids2 = [];
			if($employee_ids!=null && is_array($employee_ids) && count($employee_ids)>0){
				foreach($employee_ids as $k=>$val){
					if(!in_array($val,$posting_employee_ids)){
						unset($employee_ids[$k]);
					}
				}
			}else{
				$employee_ids = $posting_employee_ids;
			}
		}
		//var_dump($employee_ids);die;
		$basic_training_center = $this->input->post('basic_training_center');
		$batch_number = $this->input->post('batch_number');
		$passoutyear = $this->input->post('passoutyear');
		/*$basic_training_center =null;$batch_number=null; $passoutyear = null;*/
		/*if(count($employee_ids)>0){
				$employee_ids = null;
			}*/
		//$stats = $this->Osi_model->get_user_count_osiall_ajax($sortedBattalions,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$mobno,$classes,$advanceSearch,$employee_ids);
		$stats = $this->Osi_model->get_user_count_osiall_ajax($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $mobno, $classes, $advanceSearch, $employee_ids, $basic_training_center, $batch_number, $passoutyear,  $search_age_filter, $dob_created_from, $dob_created_to,$excluded_employee_ids);
		$weapon = $total_filtered_users = $stats['no_of_records'];
		//var_dump($stats);
		//echo $weapon;

		//var_dump($data['statelist']);
		//die;
		$config = array();
		$config["base_url"] = base_url() . "bt-osi-old";
		$config["total_rows"] = $weapon;
		$download = $this->input->get('download');
		if ($download == 'download') {
			$config["per_page"] = $weapon;
		} else {
			$config["per_page"] = 10;
		}

		$length = $weapon;
		$start = 0;
		if (null != $this->input->post('length')  && $this->input->post('start') != null) {
			$length = $this->input->post('length');
			$start = $this->input->post('start');
		}
		$select_parameters = ['present_address'];
		$weapons = [];
		if ($stats['fetch_users'] == true) {
			//$weapons = $data["weapon"] = $this->Osi_model->get_usersosiall_ajax($sortedBattalions,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$length,$start,$mobno,$classes,$advanceSearch,$employee_ids, null, null,null,null,$select_parameters,$dob_created_from,$dob_created_to);
			$weapons = $data["weapon"] = $this->Osi_model->get_usersosiall_ajax($sortedBattalions, $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $length, $start, $mobno, $classes, $advanceSearch, $employee_ids, $basic_training_center, $batch_number, $passoutyear, $search_age_filter, $select_parameters, $dob_created_from, $dob_created_to,$excluded_employee_ids);
		}
		$data['name'] = '';
		$user_ids = [];
		foreach ($weapons as $k => $val) {
			$user_ids[] = $val->new_man_id;
		}
		//get the users postings;=

		if ($user_ids != null && count($user_ids) > 0) {
			$new_postings_objs = $this->Posting_model->getPostingsOfSelectedEmployees($user_ids);
		} else {
			$new_postings_objs = [];
		}
		$new_postings = [];
		foreach ($new_postings_objs as $k => $new_postings_obj) {
			$new_postings[$new_postings_obj->employee_id]['name'] = $new_postings_obj->name;
			$new_postings[$new_postings_obj->employee_id]['date'] = $new_postings_obj->posting_date;
			$new_postings[$new_postings_obj->employee_id]['order_no'] = $new_postings_obj->order_no;
			$new_postings[$new_postings_obj->employee_id]['order_date'] = $new_postings_obj->order_date;
		}

		//var_dump($weapons);

		//die('dalwinder');
		$data['nm'] = $NamesofsCourses . $NamesofsCourses2;
		//$this->form_validation->set_rules("BattalionUnitito", "BattalionUnitito", "trim");
		//die;

		$data['name'] = '';
		$not_set = $this->input->post('not_set');

		if ($not_set != null && $not_set == 'true') {
			/*$not_set_data = [
					'bat_id'=>[
						'ct_to_insp'=>10
					]
				];*/
			$not_set_data = [];
			$NGO_OR_RANK_ARRAY = osi_getORRanks() + osi_getNGORanks();
			$GO_RANK_ARRAY = osi_getGORanks();
			$MEDICAL_RANK_ARRAY = osi_getMedicalRanks();
			$MINISTERIAL_RANK_ARRAY = osi_getMinisterialRanks();
			$CLASS_IV_RANK_ARRAY = osi_getCLASS_IV_C_Ranks();
			foreach ($weapons as $k => $val) {
				$employee = new Employee();
				$employee->initializeFromDatabase($val);
				$battalion_unit = ($val->bunitdistrict == '' || $val->bunitdistrict == NULL) ? $val->nick : $val->bunitdistrict;
				if (!isset($not_set_data[$battalion_unit])) {
					$not_set_data[$battalion_unit] = [
						'OR_NGO' => ['not_set' => 0, 'total' => 0],
						'CLASS_IV' => ['not_set' => 0, 'total' => 0],
						'GO' => ['not_set' => 0, 'total' => 0],
						'MEDICAL' => ['not_set' => 0, 'total' => 0],
						'MINISTERIAL' => ['not_set' => 0, 'total' => 0]
					];
				}
				$rank = $val->permanent_rank;
				if ($rank == '' || $rank == null) {
					$present_rank = $val->cexrank . $val->cminirank . $val->cmedirank . $val->ccprank . $val->cccrank;
					$rank = $present_rank;
				}
				if (!isset($new_postings[$val->new_man_id]['name'])) {
					if (in_array($rank, $NGO_OR_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['OR_NGO']['not_set']++;
						$not_set_data[$battalion_unit]['OR_NGO']['total']++;
					} else if (in_array($rank, $CLASS_IV_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['CLASS_IV']['not_set']++;
						$not_set_data[$battalion_unit]['CLASS_IV']['total']++;
					} else if (in_array($rank, $GO_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['GO']['not_set']++;
						$not_set_data[$battalion_unit]['GO']['total']++;
					} else if (in_array($rank, $MEDICAL_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['MEDICAL']['not_set']++;
						$not_set_data[$battalion_unit]['MEDICAL']['total']++;
					} else if (in_array($rank, $MINISTERIAL_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['MINISTERIAL']['not_set']++;
						$not_set_data[$battalion_unit]['MINISTERIAL']['total']++;
					}
				} else {
					if (in_array($rank, $NGO_OR_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['OR_NGO']['total']++;
					} else if (in_array($rank, $CLASS_IV_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['CLASS_IV']['total']++;
					} else if (in_array($rank, $GO_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['GO']['total']++;
					} else if (in_array($rank, $MEDICAL_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['MEDICAL']['total']++;
					} else if (in_array($rank, $MINISTERIAL_RANK_ARRAY)) {
						$not_set_data[$battalion_unit]['MINISTERIAL']['total']++;
					}
				}

				//var_dumP($not_set_data);
				//die;
			}
			$filename = 'php://output';
			$fp = fopen($filename, 'w');
			//header('Content-Type: text/csv');
			header("content-type:application/csv;charset=UTF-8");
			//header('Content-Type: text/html; charset=utf-8');
			header('Content-Disposition: attachment; filename="consolidate_data.csv";');

			$data = [
				"S. No.", 'Battalion/Unit',
				'Total (GO)', 'Not Set(GO)',
				'Total (CT TO INSP)', 'Not Set(CT TO INSP)',
				'Total (Ministerial)', 'Not Set(Ministerial)',
				'Total (Medical)', 'Not Set(Medical)',
				'Total (CLASS-IV)', 'Not Set(CLASS-IV)'
			];
			fputcsv($fp, $data);
			$sno = 1;
			foreach ($not_set_data as $battalion => $val) {

				$temp_data = [
					$sno, $battalion,
					$val['GO']['total'], $val['GO']['not_set'],
					$val['OR_NGO']['total'], $val['OR_NGO']['not_set'],
					$val['MINISTERIAL']['total'], $val['MINISTERIAL']['not_set'],
					$val['MEDICAL']['total'], $val['MEDICAL']['not_set'],
					$val['CLASS_IV']['total'], $val['CLASS_IV']['not_set']
				];
				fputcsv($fp, $temp_data);
				$sno++;
			}
			die;
		}
		
		$sno = 1;
		$filename = 'php://output';
		$fp = fopen($filename, 'w');
		//header('Content-Type: text/csv');
		header("content-type:application/csv;charset=UTF-8");
		//header('Content-Type: text/html; charset=utf-8');
		header('Content-Disposition: attachment; filename="consolidate_data.csv";');
		$data = [
			"S. No.", 'Battalion/Unit', 'Name', 'Present Rank', 'Permanent Rank', 'Dept. No.', 'ID Card No.', 'Father Name', 'Present Address', 'Permanent Address',
			'Police Station', 'District', 'State', 'Gender', 'Martial Status', 'Date of Birth', 'Age', 'Date of Enlistment', 'Caste', 'Category', 'Phone',
			'Blood Group', 'Education', 'Qualification', 'Computer Literate', 'Qualified Courses', 'Date of Retirement', 'Induction Date', 'Bank A/C No.', 'IFS C COde',
			'Adhar Number', 'PAN no', 'iHRMS Code', 'Height', 'GPF Pol No. PRAN no.', 'Good Entries', 'Bad Entries', 'Firnig Weapon', 'Firing Date',
			'Firing Range', 'Posting Details', 'Date of Posting','Order No','Order Date'
		];
		fputcsv($fp, $data);
		foreach ($weapons as $k => $val) {
			$employee = new Employee();
			$employee->initializeFromDatabase($val);
			$course_name = '';
			$other_course_name = '';
			//var_dump($employee_courses_relation);
			if (isset($employee_courses_relation[$employee->getId()])) {
				$course_ids = $employee_courses_relation[$employee->getId()];
				if (count($course_ids) > 0) {
					if ($courses != null) {
						if (isset($all_courses[$courses])) {
							$course_name = $all_courses[$courses];
						}
						foreach ($course_ids as $k1 => $val1) {
							if ($val1 != $courses) {
								if ($other_course_name != '') {
									$other_course_name .= ", ";
								}
								if (isset($all_courses[$val1])) {
									$other_course_name .= $all_courses[$val1];
								} else {
									$other_course_name .= "Not Found {$val1}";
								}
								$other_course_name .= $all_courses[$val1];
							}
						}
					} else {
						$course_name = '';
						foreach ($course_ids as $k1 => $val1) {
							if ($course_name != '') {
								$course_name .= ", ";
							}
							if (isset($all_courses[$val1])) {
								$course_name .= $all_courses[$val1];
							} else {
								$course_name .= "Not Found {$val1}";
							}
						}
					}
				}
			}
			$battalion_unit = ($val->bunitdistrict == '' || $val->bunitdistrict == NULL) ? $val->nick : $val->bunitdistrict;
			$present_rank = $val->cexrank . $val->cminirank . $val->cmedirank . $val->ccprank . $val->cccrank;
			$gpfpranno = $val->gpfpranno . ',' . $val->PRAN;
			$graduation = '';
			$eduqalification = '';
			if ($val->Graduate != '') {
				if ($graduation != '') {
					$graduation .= ',';
				}
				$graduation .= $val->Graduate;
				if ($eduqalification != "") {
					$eduqalification .=	',';
				}
				$eduqalification .= "Graduation";
			} else if ($val->UnderGraduate != '') {
				if ($graduation != '') {
					$graduation .= ',';
				}
				$graduation .= $val->UnderGraduate;
				if ($eduqalification != "") {
					$eduqalification .=	',';
				}
				$eduqalification .= "Under Graduate";
			}
			if ($val->PostGraduate != '') {
				if ($graduation != '') {
					$graduation .= ',';
				}
				$graduation .= $val->PostGraduate;
				if ($eduqalification != "") {
					$eduqalification .=	',';
				}
				$eduqalification .= "Post Graduation";
			}
			if ($val->Doctorate != '') {
				if ($val->Doctorate == 'Other') {
					if ($graduation != '') {
						$graduation .= ',';
					}
					$graduation .= $val->Doctorateother;
					if ($eduqalification != "") {
						$eduqalification .=	',';
					}
					$eduqalification .= "Doctorate Other";
				} else {
					if ($graduation != '') {
						$graduation .= ',';
					}
					$graduation .= $val->Doctorate;
					if ($eduqalification != "") {
						$eduqalification .=	',';
					}
					$eduqalification .= "Doctorate";
				}
			}
			if ($val->Doctorateother != '' && $val->Doctorate != 'Other') {
				if ($graduation != '') {
					$graduation .= ',';
				}
				$graduation .= $val->Doctorateother;
				if ($eduqalification != "") {
					$eduqalification .=	',';
				}
				$eduqalification .= "Other";
			}
			if ($eduqalification == '') {
				$eduqalification = $val->eduqalification;
			}
			if($graduation==''){
				$graduation = $eduqalification;
			}
			if (isset($new_postings[$val->new_man_id]['name'])) {
				$user['new_posting'] = $new_postings[$val->new_man_id]['name'];
				$user['date_of_posting'] = DateTime::createFromFormat('Y-m-d H:i:s', $new_postings[$val->new_man_id]['date'])->format('d-m-Y');
				$user['order_no'] = $new_postings[$val->new_man_id]['order_no'];
				if($new_postings[$val->new_man_id]['order_date']=='0000-00-00 00:00:00'){
					$user['order_date'] = '';
				}else{
					$user['order_date'] = DateTime::createFromFormat('Y-m-d H:i:s', $new_postings[$val->new_man_id]['order_date'])->format('d-m-Y');
				}
			} else {
				$user['new_posting'] = 'NOT SET';
				$user['date_of_posting'] = 'NOT SET';
				$user['order_no'] = '';
				$user['order_date'] = '';
			}
			$height = $val->feet . '\'' . $val->inch . '"';
			$data = [
				$sno, $battalion_unit, $val->name, $present_rank, $val->permanent_rank, $val->depttno,
				$val->iIdentityCardNocn, $val->fathername, $this->generateAddress(
					$val->phouse,
					$val->pstreet,
					$val->pward,
					$val->pvillmohala,
					$val->ppostoffice,
					$val->ppolicestation,
					$val->ptehsil,
					$val->pdistrict,
					$val->pstate
				), $this->generateAddress(
					$val->houseno,
					$val->streetno,
					$val->wardno,
					$val->villmohala,
					$val->postoffice,
					null,
					$val->teshil
				), $val->policestation, $val->district, $val->state, $val->gender, $val->maritalstatus,
				convertDateYMDtoDMYHyphen($val->dateofbith), $employee->getAgeYear(), convertDateYMDtoDMYHyphen($val->dateofinlitment),
				$val->caste, $val->category, $val->phono1, $val->bloodgroup, $eduqalification, $graduation, $val->comlit, $course_name, convertDateYMDtoDMYHyphen($val->dateofretirment), $val->inductiondate, $val->bankacno, $val->ifsccode, $val->adharno, $val->pan, $val->hrms_code, $height, $gpfpranno, $val->gd1, $val->bd1, $val->tow, $val->dateofprcatice, $val->NameofsRanges, 
				$user['new_posting'], $user['date_of_posting'], $user['order_no'],$user['order_date']
			];
			fputcsv($fp, $data);
			$sno++;
			$employee = null;
			/*
                                        
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('A'.$row, $sno);
					$battalion_unit = ($val->bunitdistrict=='' || $val->bunitdistrict==NULL)?$val->nick:$val->bunitdistrict;
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('B'.$row, $battalion_unit);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('C'.$row, $val->name);
					$present_rank = $val->cexrank.$val->cminirank.$val->cmedirank.$val->ccprank.$val->cccrank;
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('D'.$row, $present_rank);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('E'.$row, $val->permanent_rank);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('F'.$row, $val->depttno);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('G'.$row, $this->generateAddress($val->houseno,$val->streetno,$val->wardno,$val->villmohala,$val->postoffice,$val->policestation,$val->teshil));
                                        
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('H'.$row, $val->district);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('I'.$row, $val->state);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('J'.$row, $val->gender);
					
					
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('K'.$row, $val->maritalstatus);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('L'.$row, convertDateYMDtoDMYHyphen($val->dateofbith));
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('M'.$row, $employee->getAge());
                                        
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('N'.$row, convertDateYMDtoDMYHyphen($val->dateofinlitment));
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('O'.$row, $val->caste);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('P'.$row, $val->category);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Q'.$row, $val->phono1);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('R'.$row, $val->bloodgroup);
					$eduqalification = $val->eduqalification.'&nbsp;'.$val->UnderGraduate.$val->Graduate.$val->PostGraduate.$val->Doctorate.$val->Doctorateother;;
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('S'.$row, $val->eduqalification);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('T'.$row, $val->UnderGraduate.$val->Graduate.$val->PostGraduate.$val->Doctorate.$val->Doctorateother);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('U'.$row, $val->comlit);
					//$ax = explode('@', $val->NamesofsCourses);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('V'.$row, $val->NamesofsCourses);
					
					//$user['nm'] = '';//$nm;
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('W'.$row, convertDateYMDtoDMYHyphen($val->dateofretirment));
					//$user['dateofretirement2'] = $val->dateofretirment2;
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('X'.$row, $val->bankacno);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y'.$row, $val->ifsccode);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Z'.$row, $val->adharno);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AA'.$row, $val->pan);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AB'.$row, $val->hrms_code);
					$height = $val->feet.'\''.$val->inch.'"';
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AC'.$row, $height);
					$gpfpranno = $val->gpfpranno.','.$val->PRAN;
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AD'.$row, $gpfpranno);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AE'.$row, $val->gd1);
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AF'.$row, $val->bd1);
					//$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AA'.$row, trim($val->posting_concat1));
					//$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AB'.$row, $val->dateofposting1);
					
					if(isset($new_postings[$val->new_man_id]['name'])){
                                            $user['new_posting'] = $new_postings[$val->new_man_id]['name'];
                                            $user['date_of_posting'] = DateTime::createFromFormat('Y-m-d H:i:s', $new_postings[$val->new_man_id]['date'])->format('d-m-Y'); 
                                        }else{
                                            $user['new_posting'] = 'NOT SET';
                                            $user['date_of_posting'] = 'NOT SET';
                                        }
                                        $objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AG'.$row, $user['new_posting']);
                                        $objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AH'.$row, $user['date_of_posting']);
					$sno++;
					$row++;
                                        $employee = null;*/
		}
		//}

		//$total_users = $this->Osi_model->get_users_countosiall_ajax(array_keys($this->getAllBattalions()),$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$mobno,$classes);

		//$this->Osi_model->get_total_user_ajax($sortedBattalions,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$mobno,$classes,$advanceSearch);
		/* $output = array(
				"draw" =>intval($_POST['draw']),
				"recordsTotal" =>$total_users,//$this->Posting_model->getTotalEmployees(),
				"recordsFiltered" =>$total_filtered_users,//$this->Posting_model->getTotalFilteredEmployees(),
				"data"	=>$users,
			);
			echo json_encode($output); */
		/*$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
			ob_start();
			$objWriter->save('php://output');
			$xlsData = ob_get_contents();
			ob_end_clean();
			$response =  array(
				'op' => 'ok',
				'file' => "data:application/vnd.ms-excel;base64,".base64_encode($xlsData)
			);
			die(json_encode($response));*/
	}
	########################################################################
	/***
	 * This function is used to sort the battalion
	 * @input: battalion array with id=>name pair
	 */
	public function sortBattalions($battalions)
	{
		$battalionOrder = $this->getAllBattalions();
		$sortedBattalions = array();
		foreach ($battalionOrder as $id => $name) {
			if (in_array($id, $battalions)) {
				$sortedBattalions[] = $id;
			}
		}
		return $sortedBattalions;
	}
	public function getAllBattalions()
	{
		$battalionOrder = array(
			227 => 'ADGP ADMIN SAP',
			32 => '7 - PAP',
			105 => '9 - PAP',
			134 => '13 - PAP',
			46 => '27 - PAP',
			186 => '36 - PAP',
			7 => '75 - PAP',
			53 => '80 - PAP',
			139 => '82 - PAP',
			74 => 'RTC - PAP',
			128 => 'ISTC',
			60 => 'CR PAP',
			93 => 'CSO PAP',
			//87 => 'ADGP Control Room',	//deleted
			192 => '1 - IRB',
			167 => '2 - IRB',
			156 => '3 - IRB',
			115 => '4 - IRB',
			110 => '5 - IRB',
			162 => '6 - IRB',
			123 => '7 - IRB',
			217=>'IGP - IRB',
			//204 => 'RTC LADDA KOTHI - IRB',
			100 => '1 - CDO',
			174 => '2 - CDO',
			144 => '3 - CDO',
			150 => '4 - CDO',
			180 => '5 - CDO',
			//215=>'IGP - CDO',
			198 => 'CTC - BG',
			213=> 'CCR BHG',
			228=> 'PRTC Jahan Khelan',
			229=> 'PPA PHILLAUR',
			
			
			//92 => 'ARP - PAP'
		);
		return $battalionOrder;
	}
	/*
			Here we download the excel of all the fetched records
		*/
	public function download_users_excel($users)
	{

		error_reporting(0);
		$this->load->library('excel');
		$objPHPExcel = new PHPExcel();
		$objPHPExcel->getProperties()->setCreator("ERMS-PAP")
			->setLastModifiedBy("ERMS-PAP")
			->setTitle("Office 2007 XLSX Test Document")
			->setSubject("Office 2007 XLSX Test Document")
			->setDescription("Osi consolidated figures, Generated by ERMS-PAP.")
			->setKeywords("Figures of vehicles/battalion in MT")
			->setCategory("OSI/Battalion figure view");
		$counti = 0;
		$objPHPExcel->createSheet($counti);
		$objPHPExcel->setActiveSheetIndex($counti);
		$objPHPExcel->getActiveSheet()->setTitle('Figure View');
		$counter = 0;
		$row = 1;
		$titleStyle = array(
			'font'  => array(
				'size'  => 13,
				'name'  => 'Verdana',
				'fill' => array(
					'type' => PHPExcel_Style_Fill::FILL_SOLID,
					'color' => array('rgb' => 'FF00a0')
				)
			)
		);


		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('A' . $row, 'S. No.');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('B' . $row, 'Battalion/Unit');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('C' . $row, 'Name');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('D' . $row, 'Present Rank');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('E' . $row, 'Permanent Rank');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('F' . $row, 'Dept. No.');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('G' . $row, 'Houseno');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('H' . $row, 'Street No');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('I' . $row, 'Ward No');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('J' . $row, 'Vill Mohalla');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('K' . $row, 'City');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('L' . $row, 'Post Office');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('M' . $row, 'Police Station');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('N' . $row, 'Tehsil');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('O' . $row, 'District');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('P' . $row, 'State');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Q' . $row, 'Nationality');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('R' . $row, 'Gender');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('S' . $row, 'Marital Status');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('T' . $row, 'Date of Birth');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('U' . $row, 'Mode of rec');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('V' . $row, 'Enlistment Unit');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('W' . $row, 'Date of Enlistment');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('X' . $row, 'Date of Retirement');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y' . $row, 'Caste');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Z' . $row, 'Category');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AA' . $row, 'Phone 1');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AB' . $row, 'Blood Group');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AC' . $row, 'Education Qualified');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AD' . $row, 'Computer Literate');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AE' . $row, 'Name of Courses');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AF' . $row, 'Height');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AG' . $row, 'Good Entries');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AH' . $row, 'Bad Entries');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AI' . $row, 'PAN');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AJ' . $row, 'Adhar No');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AK' . $row, 'GPF/PRAN');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AL' . $row, 'Name of Bank');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AM' . $row, 'Name of Branch');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AN' . $row, 'Bank A/C no');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AO' . $row, 'IFSC code');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AP' . $row, 'Identification Mark');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AQ' . $row, 'Posting Detail');
		$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AR' . $row, 'Date of posting');
		$equipmentNameStyle = array(
			'font'  => array(
				'size'  => 12,
				'name'  => 'Verdana',
				'alignment' => array(
					'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
				)
			)
		);


		$cols = array('C', 'D', 'E');
		$cols_temp = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H');
		$i = 2;
		$counter = 0;

		foreach ($users as $k => $user) {
			$row++;
			$counter++;
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('A' . $row, $counter);
			if ($user->bunitdistrict == '') {
				$bats = fetchoneinfo('users', array('users_id' => $user->bat_id));
				if (isset($bats->nick)) {
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('B' . $row, $bats->nick);
				}
			} else {
				$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('B' . $row, $user->bunitdistrict);
			}
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('C' . $row, $user->name);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('D' . $row, $user->cexrank . $user->cminirank . $user->cmedirank . $user->ccprank . $user->cccrank);

			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('E' . $row, $user->permanent_rank);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('F' . $row, $user->depttno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('G' . $row, $user->houseno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('H' . $row, $user->streetno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('I' . $row, $user->wardno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('J' . $row, $user->villmohala);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('K' . $row, $user->city);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('L' . $row, $user->postoffice);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('M' . $row, $user->policestation);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('N' . $row, $user->teshil);

			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('O' . $row, $user->district);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('P' . $row, $user->state);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Q' . $row, $user->Nationality);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('R' . $row, $user->gender);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('S' . $row, $user->maritalstatus);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('T' . $row, $user->dateofbith);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('U' . $row, $user->modeofrec);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('V' . $row, $user->EnlistmentUnit);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('W' . $row, $user->dateofinlitment);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('X' . $row, $user->dateofretirment);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y' . $row, $user->caste);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Z' . $row, $user->category);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AA' . $row, $user->phono1);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AB' . $row, $user->bloodgroup);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AC' . $row, $user->eduqalification . ' ' . $user->UnderGraduate . $user->Graduate . $user->PostGraduate . $user->Doctorate . $user->Doctorateother);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AD' . $row, $user->comlit);
			$ax = explode('@', $user->NamesofsCourses);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AE' . $row, count($ax));
			//$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('R'.$row,$nm);

			//$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('S'.$row,$user->courseName);

			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AF' . $row, $user->feet . '"' . ' ' . $user->inch . '"');

			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AG' . $row, $user->gd1);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AH' . $row, $user->bd1);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AI' . $row, $user->pan);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AJ' . $row, $user->aharno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AK' . $row, $user->gpfpranno . ' ' . $user->PRAN);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AL' . $row, $user->nameofbank);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AM' . $row, $user->nameofbranch);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AN' . $row, $user->bankacno);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AO' . $row, $user->ifsccode);
			$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AP' . $row, $user->identificationmark);



			/*$pos = fetchoneinfodesc('newosip',array('man_id' => $user->man_id ),'man_id');
				 if($pos !=''){ 
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y'.$row,$pos->fone1.$pos->vploc.$pos->vpdis.$pos->fone2.$pos->noj.$pos->jsdis.$pos->fone3.$pos->fone3.$pos->fone4.$pos->fone5.$pos->osgloc.$pos->osgdis.$pos->fone6.$pos->fone7.$pos->fone8.$pos->fone9.$pos->bsdnob.$pos->bsddis.$pos->bsdloc.$pos->fone10.$pos->fone11.$pos->fone12.$pos->lone1.$pos->perdupod.$pos->perdudis.$pos->perduorno.$pos->perduordate.$pos->lone2.$pos->dgppod.$pos->dgpdis.$pos->dgporno.$pos->dgpordate.$pos->lone3.$pos->tertdpod.$pos->tertddis.$pos->tertdorno.$pos->tertdordate.$pos->sqone1.$pos->sqone2.$pos->sqone3.$pos->sqone4.$pos->sqone5.$pos->sstgpod.$pos->sstgdis.$pos->sstgorno.$pos->sstgordate.$pos->sqone6.$pos->sqone6.$pos->sqone7.$pos->swatpod.$pos->swatdis.$pos->swatorno.$pos->swatordate.$pos->paone1.$pos->paone2.$pos->awdpmpod.$pos->awdpmorno.$pos->awdpmordate.$pos->paone3.$pos->awdpfpod.$pos->awdpforno.$pos->awdpfordate.$pos->paone4.$pos->awdpompod.$pos->awdpomorno.$pos->awdpomordate.$pos->paone5.$pos->awdpofpod.$pos->awdpoforno.$pos->awdpofordate.$pos->paone6.$pos->paone7.$pos->paone8.$pos->paone9.$pos->paone10.$pos->paone11.$pos->paone12.$pos->paone13.$pos->paone14.$pos->paone15.$pos->paone16.$pos->paone17.$pos->paone18.$pos->paone19.$pos->paone20.$pos->paone21.$pos->paone22.$pos->paone23.$pos->paone24.$pos->ssone23.$pos->dsopod.$pos->dsoorno.$pos->dsoordate.$pos->ssone24.$pos->csojalorno.$pos->csojalordate.$pos->ssone25.$pos->mispatorno.$pos->mispatordate.$pos->ssone26.$pos->othersnod.$pos->othersnodis.$pos->othersorno.$pos->othersordate.$pos->awbone1.$pos->awbone2.$pos->pssawonof.$pos->pssaworank.$pos->pssawoordate.$pos->awbone3.$pos->osihonoo.$pos->awbone4.$pos->Readerosinbo.$pos->Orderly.$pos->telopr.$pos->darrun.$pos->awbone5.$pos->bnkgdop.$pos->awbone6.$pos->bhogpog.$pos->bhogdop.$pos->awbone7.$pos->tradestot.$pos->tradestt.$pos->tradesbat.$pos->tradesdop.$pos->tradesorno.$pos->awbone8.$pos->mtsecpod.$pos->mtsecvehno.$pos->mtsecdop.$pos->mtsecorno.$pos->awbone9.$pos->quartbradop.$pos->quartbraorno.$pos->awbone10.$pos->awbone11.$pos->awbone12.$pos->awbone12.$pos->recrutnorb.$pos->recrutorno.$pos->recrutordate.$pos->bmdone1.$pos->bmdone2.$pos->leavefrom.$pos->leaveto.$pos->bmdone3.$pos->absentfrom.$pos->absentddr.$pos->absentdate.$pos->bmdone4.$pos->usdos.$pos->usros.$pos->bmdone5.$pos->bmdone6.$pos->bmdone7.$pos->bmdone8.$pos->bmdone9.$pos->bmdone10.$pos->instone1.$pos->instone2.$pos->instone3.$pos->instone4.$pos->traning1.$pos->traning2.$pos->traning3.$pos->btarin1.$pos->btarin2.$pos->btarin3.$pos->btarin4.$pos->btarin5.$pos->btarin6.$pos->btarin7.$pos->btarin8.$pos->btarin9.$pos->btarin10.$pos->cfpop.$pos->cfppd.$pos->cfpdop.$pos->cfpdop);
				
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Z'.$row,$pos->dateofposting1);
				 }*/
			//$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Y'.$row,trim($user->posting_concat1));
			//$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('Z'.$row,$user->dateofposting1);
			if (isset($user->posting_concat1)) {
				$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AQ' . $row, trim($user->posting_concat1));
				$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AR' . $row, $user->dateofposting1);
			} else {
				$pos = fetchoneinfodesc('newosip', array('man_id' => $user->man_id), 'man_id');
				if ($pos != '') {
					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AK' . $row, $pos->fone1 . $pos->vploc . $pos->vpdis . $pos->fone2 . $pos->noj . $pos->jsdis . $pos->fone3 . $pos->fone3 . $pos->fone4 . $pos->fone5 . $pos->osgloc . $pos->osgdis . $pos->fone6 . $pos->fone7 . $pos->fone8 . $pos->fone9 . $pos->bsdnob . $pos->bsddis . $pos->bsdloc . $pos->fone10 . $pos->fone11 . $pos->fone12 . $pos->lone1 . $pos->perdupod . $pos->perdudis . $pos->perduorno . $pos->perduordate . $pos->lone2 . $pos->dgppod . $pos->dgpdis . $pos->dgporno . $pos->dgpordate . $pos->lone3 . $pos->tertdpod . $pos->tertddis . $pos->tertdorno . $pos->tertdordate . $pos->sqone1 . $pos->sqone2 . $pos->sqone3 . $pos->sqone4 . $pos->sqone5 . $pos->sstgpod . $pos->sstgdis . $pos->sstgorno . $pos->sstgordate . $pos->sqone6 . $pos->sqone6 . $pos->sqone7 . $pos->swatpod . $pos->swatdis . $pos->swatorno . $pos->swatordate . $pos->paone1 . $pos->paone2 . $pos->awdpmpod . $pos->awdpmorno . $pos->awdpmordate . $pos->paone3 . $pos->awdpfpod . $pos->awdpforno . $pos->awdpfordate . $pos->paone4 . $pos->awdpompod . $pos->awdpomorno . $pos->awdpomordate . $pos->paone5 . $pos->awdpofpod . $pos->awdpoforno . $pos->awdpofordate . $pos->paone6 . $pos->paone7 . $pos->paone8 . $pos->paone9 . $pos->paone10 . $pos->paone11 . $pos->paone12 . $pos->paone13 . $pos->paone14 . $pos->paone15 . $pos->paone16 . $pos->paone17 . $pos->paone18 . $pos->paone19 . $pos->paone20 . $pos->paone21 . $pos->paone22 . $pos->paone23 . $pos->paone24 . $pos->ssone23 . $pos->dsopod . $pos->dsoorno . $pos->dsoordate . $pos->ssone24 . $pos->csojalorno . $pos->csojalordate . $pos->ssone25 . $pos->mispatorno . $pos->mispatordate . $pos->ssone26 . $pos->othersnod . $pos->othersnodis . $pos->othersorno . $pos->othersordate . $pos->awbone1 . $pos->awbone2 . $pos->pssawonof . $pos->pssaworank . $pos->pssawoordate . $pos->awbone3 . $pos->osihonoo . $pos->awbone4 . $pos->Readerosinbo . $pos->Orderly . $pos->telopr . $pos->darrun . $pos->awbone5 . $pos->bnkgdop . $pos->awbone6 . $pos->bhogpog . $pos->bhogdop . $pos->awbone7 . $pos->tradestot . $pos->tradestt . $pos->tradesbat . $pos->tradesdop . $pos->tradesorno . $pos->awbone8 . $pos->mtsecpod . $pos->mtsecvehno . $pos->mtsecdop . $pos->mtsecorno . $pos->awbone9 . $pos->quartbradop . $pos->quartbraorno . $pos->awbone10 . $pos->awbone11 . $pos->awbone12 . $pos->awbone12 . $pos->recrutnorb . $pos->recrutorno . $pos->recrutordate . $pos->bmdone1 . $pos->bmdone2 . $pos->leavefrom . $pos->leaveto . $pos->bmdone3 . $pos->absentfrom . $pos->absentddr . $pos->absentdate . $pos->bmdone4 . $pos->usdos . $pos->usros . $pos->bmdone5 . $pos->bmdone6 . $pos->bmdone7 . $pos->bmdone8 . $pos->bmdone9 . $pos->bmdone10 . $pos->instone1 . $pos->instone2 . $pos->instone3 . $pos->instone4 . $pos->traning1 . $pos->traning2 . $pos->traning3 . $pos->btarin1 . $pos->btarin2 . $pos->btarin3 . $pos->btarin4 . $pos->btarin5 . $pos->btarin6 . $pos->btarin7 . $pos->btarin8 . $pos->btarin9 . $pos->btarin10 . $pos->cfpop . $pos->cfppd . $pos->cfpdop . $pos->cfpdop);

					$objPHPExcel->setActiveSheetIndex($counti)->setCellValue('AL' . $row, $pos->dateofposting1);
				}
			};
		}

		//			// Redirect output to a client’s web browser (Excel2007)
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		header('Content-Disposition: attachment;filename="employees.xlsx"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
		$objWriter->save('php://output');
		exit;
	}


	//--------------------------End of Updated Search functionality from previous----------------------------------
	public function updates_manpower_two($id)
	{
		$data['user_id'] = $id;
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->model('Osi_model');
		$this->load->model('Btalion/Btalion_model');
		$this->load->helper('common');
		$this->load->helper('osi');
		$this->units = $data['uname'] = $this->Osi_model->fetchinfo('users', array('user_log' => 4));
		$data['weapon'] = $this->Btalion_model->weaponlist();
		$pagesErrorCounter = [
			'personal_detail' => 0,
			'address' => 0,
			'education_detail' => 0,
			'enlistment_detail' => 0,
			'present_service_detail' => 0,
			'basic_training_course_detail' => 0,
			'professional_course_detail' => 0,
			'annual_firing_practice' => 0,
			'permanent_rank' => 0,
		];
		$body = $data['body'] = $this->Btalion_model->fetchoneinfo('newosi', array('man_id' => $id));
		$data['bloodgroups'] = $this->getBloodgroups();
		$data['permanent_ranks'] = get_permanent_ranks();
		if (trim($body->dateofbith) != '') {
			$date = DateTime::createFromFormat('Y-m-d', $body->dateofbith);
			if (!($date == null || $date == false)) {
				$data['body']->dateofbith = $body->dateofbith = $date->format('d/m/Y');
			}
		}
		if (trim($body->dateofinlitment) != '') {
			$date = DateTime::createFromFormat('Y-m-d', $body->dateofinlitment);
			if (!($date == null || $date == false)) {
				$data['body']->dateofinlitment = $body->dateofinlitment = $date->format('d/m/Y');
			}
		}
		if (trim($body->dateofretirment) != '') {
			$date = DateTime::createFromFormat('Y-m-d', $body->dateofretirment);
			//var_dump($date);
			if (!($date == null || $date == false)) {
				$data['body']->dateofretirment = $body->dateofretirment = $date->format('d/m/Y');
			}
		}
		if (trim($body->dateofretirment2) != '') {
			$date = DateTime::createFromFormat('Y-m-d', $body->dateofretirment2);
			if (!($date == null || $date == false)) {
				$data['body']->dateofretirment2 = $body->dateofretirment2 = $date->format('d/m/Y');
			}
		}
		$state1 = $this->input->post('state');
		if ($state1 == '') {
			$state1 = $data['body']->state;
			if ($state1 == '') {
				$state1 = 'PUNJAB';
			}
		}
		$data['citylist1'] = $this->Osi_model->getDistricts(array('state' => $state1, 'state_status' => '1'));
		$data['police_districts'] = $this->Btalion_model->fetchinfo('police_districts', [], ['order_by' => 'district_name', 'direction' => 'asc']);
		$state2 = $this->input->post('postate');
		if ($state2 == '') {
			$state2 = $data['body']->pstate;
			if ($state2 == '') {
				$state2 = 'PUNJAB';
			}
		}
		$data['citylist2'] = $this->Osi_model->getDistricts(array('state' => $state2, 'state_status' => '1'));
		if ($this->input->post('peradd') == 'yes') {
			$data['address']['permanent_address'] = true;
		} elseif ($this->input->post('peradd') == 'no') {
			$data['address']['permanent_address'] = false;
		} else {
			if (
				($body->houseno == $body->phouse)
				&& ($body->streetno == $body->pstreet)
				&& ($body->villmohala == $body->pvillmohala)
				&& ($body->wardno == $body->pward)
				&& ($body->postoffice == $body->ppostoffice)
				&& ($body->policestation == $body->ppolicestation)
				&& ($body->teshil == $body->ptehsil)
				&& ($body->state == $body->pstate)
				&& ($body->district == $body->pdistrict)
			) {
				$data['address']['permanent_address'] = true;
			} else {
				$data['address']['permanent_address'] = false;
			}
		}
		$sameAsPermanentAddress = $data['address']['permanent_address'];
		if ($this->input->post('page_name') != null && trim($this->input->post('page_name')) != '') {
			$data['selected_page'] = $data['page'] = trim($this->input->post('page_name'));
		} else {
			$data['selected_page'] = $data['page'] = 'personal_detail';
		}
		//$data['selected_page'] = 'personal_detail';
		$data['statelist'] = $this->Osi_model->getStates(array('state_status' => 1));
		//$data['citylist1'] = $this->Osi_model->getDistricts(array('state' => 'Punjab' ));
		$data['citylist'] = $this->Btalion_model->fetchinfo('state_list', array('state' => 'PUNJAB'));
		if (!isset($this->cities)) {
			$this->cities = [];
			foreach ($data['citylist'] as $value) {
				$this->cities[$value->city] = $value->city;
			}
		}

		//Update professional courser detial
		$updateProfessionalCourseDetail = false;
		if (null != $this->input->post('update_professional_course') && $this->input->post('update_professional_course') == 'yes') {
			$updateProfessionalCourseDetail = true;
		}
		$submit = $this->input->post('submit');
		if ($submit != null && $submit == 'submit') {

			//get the data
			//personal detail
			$newDetailUpdated =  $this->input->post("newDetailUpdated", TRUE);

			//remove from notificfation
			$permanent_rank = $this->input->post("permanent_rank", TRUE);
			$GO_OFFICER = false;
			if ($permanent_rank != null && in_array($permanent_rank, ['DSP' => 'DSP', 'SP' => 'SP', 'AIG' => 'AIG', 'Asst. Commandant' => 'Asst. Commandant', 'Commandant' => 'Commandant', 'DIG' => 'DIG', 'IG' => 'IG', 'ADGP' => "ADGP", 'DGP' => 'DGP'])) {
				$GO_OFFICER = true;
			}
			$name = $this->input->post("name", TRUE);
			$fname = $this->input->post("fname", TRUE);
			$casting = $this->input->post("casting", TRUE);
			$catii = $this->input->post("catii", TRUE);
			$conphno = $this->input->post("conphno", TRUE);
			$conphnot = $this->input->post("conphnot", TRUE);
			$pemailid = $this->input->post("pemailid", TRUE);
			$addarcard = $this->input->post("addarcard", TRUE);
			$pancard = $this->input->post("pancard", TRUE);
			$bankdetail = $this->input->post("bankdetail", TRUE);
			$bankbrach = $this->input->post("bankbrach", TRUE);
			$bankac = $this->input->post("bankac", TRUE);
			$ifsccode = $this->input->post("ifsccode", TRUE);
			$bloodgroup = $this->input->post("bloodgroup", TRUE);
			$Identificationmark = $this->input->post("Identificationmark", TRUE);
			$Kg = $this->input->post("Kg", TRUE);
			$Gm = $this->input->post("Gm", TRUE);
			$Feet = $this->input->post("Feet", TRUE);
			$inch = $this->input->post("inch", TRUE);

			$this->personal_detail_validations($GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['personal_detail'] = $errors;
			}
			//address
			$hno = $this->input->post("hno", TRUE);
			$sno = $this->input->post("sno", TRUE);
			$vm = $this->input->post("vm", TRUE);
			$wardno = $this->input->post("wardno", TRUE);
			$ct = $this->input->post("ct", TRUE);
			$po = $this->input->post("po", TRUE);
			$ps = $this->input->post("ps", TRUE);
			$tl = $this->input->post("tl", TRUE);
			$state = $this->input->post("state", TRUE);
			$dis = $this->input->post("dis", TRUE);
			$nat = $this->input->post('nat', TRUE);
			$gender = $this->input->post("gender", TRUE);
			$mstatus = $this->input->post("mstatus", TRUE);
			$dob = $this->input->post("dob", TRUE);
			if ($sameAsPermanentAddress) {
				$phouseno = $this->input->post("hno", TRUE);
				$pstreetno = $this->input->post("sno", TRUE);
				$pwardno = $this->input->post("wardno", TRUE);
				$pvillmoh = $this->input->post("vm", TRUE);
				$postcity = $this->input->post("ct", TRUE);
				$pcitypostoff = $this->input->post("po", TRUE);
				$ppolicestation = $this->input->post("ps", TRUE);
				$ptehsil = $this->input->post("tl", TRUE);
				$postate = $this->input->post("state", TRUE);
				$pdistrict = $this->input->post("dis", TRUE);
			} else {
				$phouseno = $this->input->post("phouseno", TRUE);
				$pstreetno = $this->input->post("pstreetno", TRUE);
				$pwardno = $this->input->post("pwardno", TRUE);
				$pvillmoh = $this->input->post("pvillmoh", TRUE);
				$postcity = $this->input->post("postcity", TRUE);
				$pcitypostoff = $this->input->post("pcitypostoff", TRUE);
				$ppolicestation = $this->input->post("ppolicestation", TRUE);
				$ptehsil = $this->input->post("ptehsil", TRUE);
				$postate = $this->input->post("postate", TRUE);
				$pdistrict = $this->input->post("pdistrict", TRUE);
			}
			$this->address_validations($sameAsPermanentAddress, $GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['address'] = $errors - $pagesErrorCounter['personal_detail'];
			}
			//end address--------------------------
			//educational details start
			$stts = $this->input->post("stts", TRUE);
			$UnderGraduate = $this->input->post("UnderGraduate", TRUE);
			$Graduate = $this->input->post("Graduate", TRUE);
			$PostGraduate = $this->input->post("PostGraduate", TRUE);
			$Doctorate = $this->input->post("Doctorate", TRUE);
			$docOther = $this->input->post("docOther", TRUE);
			$clit =   $this->input->post("clit", TRUE);
			$this->education_detail_validations($stts, $Doctorate, $GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['education_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'];
			}
			//educational details end

			//enlistment start
			//Battalion, tyodu Modemdr mocOther dateofesnlistment1 eor eor1 eor2 eor3 eor4 eor5 
			//Enlistmentec EnlistmentUnit enuther enutherdistrict DateofRetirementdor //DateofRetirementdori gpfPRAN PRAN
			$Battalion =  $this->input->post("Battalion", TRUE);
			$tyodu =  $this->input->post("tyodu", TRUE);
			$Modemdr = $this->input->post("Modemdr", TRUE);
			$mocOther = $this->input->post("mocOther", TRUE);
			$dateofesnlistment1 = $this->input->post("dateofesnlistment1", TRUE);
			$Rankre = $this->input->post("eor", TRUE);
			$eor1 = $this->input->post("eor1", TRUE);
			$eor2 = $this->input->post("eor2", TRUE);
			$eor3 = $this->input->post("eor3", TRUE);
			$eor4 = $this->input->post("eor4", TRUE);
			$eor5 = $this->input->post("eor5", TRUE);
			$Enlistmentec = $this->input->post("Enlistmentec", TRUE); //category
			$EnlistmentUnit = $this->input->post("EnlistmentUnit", TRUE);	//un it
			$enutherdistrict =   $this->input->post("enutherdistrict", TRUE);
			$enuther = $this->input->post('enuther');
			$DateofRetirementdor = $this->input->post("DateofRetirementdor", TRUE);
			$DateofRetirementdori =    $this->input->post("DateofRetirementdori", TRUE);
			$gpfPRAN = $this->input->post("gpfPRAN", TRUE);
			$PRAN = $this->input->post("PRAN", TRUE);
			$hrms_code = $this->input->post("hrms_code", TRUE);
			$this->enlistment_detail_validations($Modemdr, $Rankre, $EnlistmentUnit, $GO_OFFICER,$dateofesnlistment1);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['enlistment_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'];
			}
			//enlistment end 

			// --------------------- Present service detail --------------------
			//BattalionUnitito bunitdistrict RankRankre  catop1 catop2 catop3 catop4 catop5 Deptdn iIdentityCardNocn
			//catofind catofind1 catofind2 catofind3 catofind4 catofind5 InductionModeim indictiondate PreviousBatalionito PreviousNoprn gd1 bd1  dateblockm1 soon........
			$BattalionUnitito = $this->input->post("BattalionUnitito", TRUE);
			$bunitdistrict = $this->input->post("bunitdistrict", TRUE);
			$RankRankre = $this->input->post("RankRankre", TRUE);
			$catop1 = $this->input->post("catop1", TRUE);


			$catop2 = $this->input->post("catop2", TRUE);
			$catop3 = $this->input->post("catop3", TRUE);
			$catop4 = $this->input->post("catop4", TRUE);
			$catop5 = $this->input->post("catop5", TRUE);
			$Deptdn = $this->input->post("Deptdn", TRUE);
			//$cnody = $this->input->post("cnody",TRUE);
			$iIdentityCardNocn = $this->input->post("iIdentityCardNocn", TRUE);
			$InductionRankir = $this->input->post("catofind", TRUE);
			$catofind1 = $this->input->post("catofind1", TRUE);
			$catofind2 = $this->input->post("catofind2", TRUE);
			$catofind3 = $this->input->post("catofind3", TRUE);
			$catofind4 = $this->input->post("catofind4", TRUE);
			$catofind5 = $this->input->post("catofind5", TRUE);
			$InductionModeim = $this->input->post("InductionModeim", TRUE);
			$indictiondate = $this->input->post("indictiondate", TRUE);
			$PreviousBatalionito = $this->input->post("PreviousBatalionito", TRUE);
			$PreviousNoprn = $this->input->post("PreviousNoprn", TRUE);
			$gd1 = $this->input->post("gd1", TRUE);
			$bd1 = $this->input->post("bd1", TRUE);
			$dateblockm1 = $this->input->post("dateblockm1", TRUE);
			$dateblockm2 = $this->input->post("dateblockm2", TRUE);
			$dateblockm3 = $this->input->post("dateblockm3", TRUE);
			$dateblockm4 = $this->input->post("dateblockm4", TRUE);
			$DateOFPromotionDetails21 = $this->input->post("DateOFPromotionDetails21", TRUE);
			$DateOFPromotionDetails23 = $this->input->post("DateOFPromotionDetails23", TRUE);
			$DateOFPromotionDetails24 = $this->input->post("DateOFPromotionDetails24", TRUE);
			$DateOFPromotionDetails25 = $this->input->post("DateOFPromotionDetails25", TRUE);
			$DateOFPromotionDetails26 = $this->input->post("DateOFPromotionDetails26", TRUE);
			$DateOFPromotionDetails27 = $this->input->post("DateOFPromotionDetails27", TRUE);
			$DateOFPromotionDetails28 = $this->input->post("DateOFPromotionDetails28", TRUE);
			$DateOFPromotionDetails29 = $this->input->post("DateOFPromotionDetails29", TRUE);
			$DateOFPromotionDetails30 = $this->input->post("DateOFPromotionDetails30", TRUE);
			$DateOFPromotionDetails31 = $this->input->post("DateOFPromotionDetails31", TRUE);
			$DateOFPromotionDetails32 = $this->input->post("DateOFPromotionDetails32", TRUE);
			$DateOFPromotionDetails33 = $this->input->post("DateOFPromotionDetails33", TRUE);
			$DateOFPromotionDetails34 = $this->input->post("DateOFPromotionDetails34", TRUE);
			$LowerSchoolCourseDate35 = $this->input->post("LowerSchoolCourseDate35", TRUE);
			$DateOFPromotionDetails35 = $this->input->post("DateOFPromotionDetails35", TRUE);
			$this->presentservice_detail_validation($BattalionUnitito, $RankRankre, $GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['present_service_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'];
			}
			//end present service detail validation
			//---------------- basic training course START --------------

			$TrainingInstituteti = $this->input->post("TrainingInstituteti", TRUE);
			$OthertrainingInstitute = $this->input->post("Othertraining", TRUE);
			$Batchbn = $this->input->post("Batchbn", TRUE);
			$batchpassdate = $this->input->post("batchpassdate", TRUE);
			if (trim($TrainingInstituteti) != '' ||  trim($Batchbn) != '' || trim($batchpassdate) != '') {
				$this->basic_training_course_validation($TrainingInstituteti);
				if (!$this->form_validation->run()) {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['basic_training_course_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'];
				}
			}
			//---------------- basic training course END --------------
			//---------------- PROFESSIONAL COURSER DETAIL START ---------------------
			//if(false){
			$TrainingInstitutessti = $this->input->post("TrainingInstitutessti", TRUE);
			$TrainingInstitutesstiOther = $this->input->post("TrainingInstitutesstiOther", TRUE);
			$NamesofsCourses = $this->input->post("NamesofsCourses", TRUE);
			$DurationsofsCourses = $this->input->post("DurationsofsCourses", TRUE);
			$DurationsofsCoursest = $this->input->post("DurationsofsCoursest", TRUE);

			//echo count($TrainingInstitutessti);
			//var_dump($TrainingInstitutessti);
			if (
				$updateProfessionalCourseDetail && ($this->valid_professional_detail_array($TrainingInstitutessti) ||
					$this->valid_professional_detail_array($TrainingInstitutesstiOther) ||
					$this->valid_professional_detail_array($NamesofsCourses) ||
					$this->valid_professional_detail_array($DurationsofsCourses) ||
					$this->valid_professional_detail_array($DurationsofsCoursest))
			) { // && trim($TrainingInstitutesstiOther)!='' && trim($NamesofsCourses)!='' && trim($DurationsofsCourses)!='' && trim($DurationsofsCoursest)!=''){
				$this->professional_course_detail_validation($TrainingInstitutessti);
				if (!$this->form_validation->run()) {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['professional_course_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'];
				}
			}
			//}
			//---------------- PROFESSIONAL COURSER DETAIL END ---------------------
			//-------------=== Annual Firing practice start-------------------
			$NameofsRanges = $this->input->post("NameofsRanges", TRUE);
			$dateofprcatice = $this->input->post("dateofprcatice", TRUE);
			$tow = $this->input->post("tow", TRUE);
			if ($NameofsRanges != null || $dateofprcatice != null || $tow != null) {
				$this->annual_firing_practice_validation();
				if (!$this->form_validation->run()) {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['annual_firing_practice'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'] - $pagesErrorCounter['professional_course_detail'];
				}
			}
			//-------------=== Annual Firing practice   end-------------------
			$orderby = null; //This is not used anymore
			$cnody = Null;
			if ($this->form_validation->run()) {
				if (trim($dob) != '') {
					$date = DateTime::createFromFormat('d/m/Y', $dob);
					if (!($date == '' || $date == false)) {
						$dob = $date->format('Y-m-d');
					}
				}
				if (trim($dateofesnlistment1) != '') {
					$date = DateTime::createFromFormat('d/m/Y', $dateofesnlistment1);
					if (!($date == '' || $date == false)) {
						$dateofesnlistment1 = $date->format('Y-m-d');
					}
				}
				if (trim($DateofRetirementdor) != '') {
					$date = DateTime::createFromFormat('d/m/Y', $DateofRetirementdor);
					if (!($date == '' || $date == false)) {
						$DateofRetirementdor = $date->format('Y-m-d');
					}
				}
				if (trim($DateofRetirementdori) != '') {
					$date = DateTime::createFromFormat('d/m/Y', $DateofRetirementdori);
					if (!($date == '' || $date == false)) {
						$DateofRetirementdori = $date->format('Y-m-d');
					}
				}

				$add_web = $this->Osi_model->ups_man(
					$name,
					$fname,
					$hno,
					$sno,
					$vm,
					$wardno,
					$ct,
					$po,
					$ps,
					$tl,
					$state,
					$dis,
					$phouseno,
					$pstreetno,
					$pwardno,
					$pvillmoh,
					$postcity,
					$pcitypostoff,
					$ppolicestation,
					$ptehsil,
					$postate,
					$pdistrict,
					$gender,
					$mstatus,
					$dob,
					$casting,
					$catii,
					$conphno,
					$conphnot,
					$pemailid,
					$addarcard,
					$pancard,
					$bankdetail,
					$bankbrach,
					$bankac,
					$ifsccode,
					$bloodgroup,
					$Identificationmark,
					$Kg,
					$Gm,
					$Feet,
					$inch,
					$stts,
					$UnderGraduate,
					$Graduate,
					$PostGraduate,
					$Doctorate,
					$docOther,
					$Modemdr,
					$Battalion,
					$tyodu,
					$mocOther,
					$dateofesnlistment1,
					$Rankre,
					$eor1,
					$eor2,
					$eor3,
					$eor4,
					$eor5,
					$Enlistmentec,
					$EnlistmentUnit,
					$DateofRetirementdor,
					$gpfPRAN,
					$PRAN,
					$hrms_code,
					$BattalionUnitito,
					$RankRankre,
					$catop1,
					$permanent_rank,
					$catop2,
					$catop3,
					$catop4,
					$catop5,
					$Deptdn,
					$iIdentityCardNocn,
					$InductionRankir,
					$catofind1,
					$catofind2,
					$catofind3,
					$catofind4,
					$catofind5,
					$InductionModeim,
					$indictiondate,
					$PreviousBatalionito,
					$PreviousNoprn,
					$DateOFPromotionDetails21,
					$DateOFPromotionDetails23,
					$DateOFPromotionDetails24,
					$DateOFPromotionDetails25,
					$DateOFPromotionDetails26,
					$DateOFPromotionDetails27,
					$DateOFPromotionDetails28,
					$DateOFPromotionDetails29,
					$DateOFPromotionDetails30,
					$DateOFPromotionDetails31,
					$DateOFPromotionDetails32,
					$DateOFPromotionDetails33,
					$DateOFPromotionDetails34,
					$LowerSchoolCourseDate35,
					$DateOFPromotionDetails35,
					$TrainingInstituteti,
					$OthertrainingInstitute,
					$Batchbn,
					$batchpassdate,
					$TrainingInstitutessti,
					$TrainingInstitutesstiOther,
					$NamesofsCourses,
					$DurationsofsCourses,
					$DurationsofsCoursest,
					$NameofsRanges,
					$dateofprcatice,
					$tow,
					$gd1,
					$bd1,
					$id,
					$clit,
					$DateofRetirementdori,
					$orderby,
					$cnody,
					$dateblockm1,
					$dateblockm2,
					$dateblockm3,
					$dateblockm4,
					$enutherdistrict,
					$bunitdistrict,
					$nat,
					$updateProfessionalCourseDetail
				);
				$message = "";
				if ($newDetailUpdated != null && $newDetailUpdated == 1) {
					//die($newDetailUpdated);
					if ($this->Osi_model->markOsiNotificationAsRead($id)) {
						$message = "Employee marked Read!";
					}
				}
				if ($add_web == 1) {

					$this->session->set_flashdata('success_msg', 'Info has updated succesfully !' . $message);
					//redirect('bt-updates-manpower/'.$id);
					redirect('bt-updates-manpower/' . $id);
				} else {
					$this->session->set_flashdata('error_msg', 'Info has not Updated.');
					redirect('bt-updates-manpower/' . $id);
				}
			} else {
				//echo validation_errors();	

			}
			//validate the whole data
			//form is submitted
			//echo 'validate it';
			//die;
		} else {
			$pagesErrorCounter = [
				'personal_detail' => 0,
				'address' => 0,
				'education_detail' => 0,
				'enlistment_detail' => 0,
				'present_service_detail' => 0,
				'basic_training_course_detail' => 0,
				'professional_course_detail' => 0,
				'annual_firing_practice' => 0,
				'permanent_rank' => 0,
			];
			$GO_OFFICER = false;
			if (in_array($body->permanent_rank, ['DSP' => 'DSP', 'SP' => 'SP', 'AIG' => 'AIG', 'Asst. Commandant' => 'Asst. Commandant', 'Commandant' => 'Commandant',  'DIG' => 'DIG', 'IG' => 'IG', 'ADGP' => "ADGP", 'DGP' => 'DGP'])) {
				$GO_OFFICER = true;
			}

			//Personal detail
			$data['name'] = $body->name;
			$data['fname'] = $body->fathername;
			$data['gender'] = $body->gender;
			$data['mstatus'] = $body->maritalstatus;
			$data['dob'] = $body->dateofbith;
			$data['casting'] = $body->caste;
			$data['catii'] = $body->category;
			$data['conphno'] = $body->phono1;
			$data['conphnot'] = $body->phono2;
			$data['pemailid'] = $body->email;
			$data['addarcard'] = $body->adharno;
			$data['pancard'] = $body->pan;
			$data['bankdetail'] = $body->nameofbank;
			$data['bankbrach'] = $body->nameofbranch;
			$data['bankac'] 	= $body->bankacno;
			$data['ifsccode'] = $body->ifsccode;
			$data['bloodgroup'] = $body->bloodgroup;
			$data['Identificationmark'] = $body->identificationmark;
			$data['Kg'] = $body->Kg;
			$data['Gm'] = $body->Gm;
			$data['Feet'] = $body->feet;
			$data['inch'] = $body->inch;
			$this->form_validation->set_data($data);
			$this->personal_detail_validations($GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['personal_detail'] = $errors;
			}
			//address
			$data['hno'] = $body->houseno;
			$data["sno"] = $body->streetno;
			$data["vm"] = $body->villmohala;
			$data["wardno"] = $body->wardno;
			$data["ct"] = $body->city;
			$data["po"] = $body->postoffice;
			$data["ps"] = $body->policestation;
			$data["nat"] = $body->Nationality;
			$data["tl"] = $body->teshil;
			$data["state"] = $body->state;
			$data["dis"] = $body->district;
			$data["phouseno"] = $body->phouse;
			$data["pstreetno"] = $body->pstreet;
			$data["pwardno"] = $body->pward;
			$data["pvillmoh"] = $body->pvillmohala;
			$data["postcity"] = $body->pcity;
			$data["pcitypostoff"] = $body->ppostoffice;
			$data["ppolicestation"] = $body->ppolicestation;
			$data["ptehsil"] = $body->ptehsil;
			$data["postate"] = $body->pstate;
			$data["pdistrict"] = $body->pdistrict;
			$this->form_validation->set_data($data);
			$this->address_validations($sameAsPermanentAddress, $GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['address'] = $errors - $pagesErrorCounter['personal_detail'];
			}
			//education_detail
			$data['stts'] = $body->eduqalification;
			$data['UnderGraduate'] = $body->UnderGraduate;
			$data['Graduate'] = $body->Graduate;
			$data['PostGraduate'] = $body->PostGraduate;
			$data['Doctorate'] = $body->Doctorate;
			$data['docOther'] = $body->Doctorateother;
			$data['clit'] =   $body->comlit;
			$this->form_validation->set_data($data);
			$this->education_detail_validations($data['stts'], $data['Doctorate'], $GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['education_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'];
			}
			//enlistment detail
			$data['Battalion'] =  $body->battalion;
			$data['tyodu'] =  $body->typeofduty;
			$data['Modemdr'] = $body->modeofrec;
			$data['mocOther'] = $body->othermodeofrecruitment;
			$data['dateofesnlistment1'] = $body->dateofinlitment;
			$data['eor']  = $body->rankofenlistment;
			$data['eor1'] = $body->eexrank;
			$data['eor2'] = $body->eminirank;
			$data['eor3'] = $body->emedirank;
			$data['eor4'] = $body->ecprank;
			$data['eor5'] = $body->eccrank;
			$data['Enlistmentec'] = $body->enlistmentcat; //category
			$data['EnlistmentUnit'] = $body->EnlistmentUnit;	//un it
			$data['enuther'] = $body->enutherdistrict;
			$data['enutherdistrict'] = $body->enutherdistrict;
			$data['DateofRetirementdor']  = $body->dateofretirment;
			$data['DateofRetirementdori'] =    $body->dateofretirment2;
			$data['gpfPRAN'] = $body->gpfpranno;
			$data['PRAN'] = $body->PRAN;
			$this->form_validation->set_data($data);
			$this->enlistment_detail_validations($data['Modemdr'], $data['eor'], $data['EnlistmentUnit'], $GO_OFFICER);
			if (!$this->form_validation->run()) {
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['enlistment_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'];
			}
			//present_service detail
			$data['BattalionUnitito'] = $body->BattalionUnitito;
			$data['bunitdistrict'] = $body->bunitdistrict;
			$data['RankRankre'] = $body->presentrank;
			$data['permanent_rank'] = $body->permanent_rank;
			$data['catop1'] = $body->cexrank;
			$data['catop2'] = $body->cminirank;
			$data['catop3'] = $body->cmedirank;
			$data['catop4'] = $body->ccprank;
			$data['catop5'] = $body->cccrank;
			$data['Deptdn'] = $body->depttno;

			//$cnody = $this->input->post("cnody",TRUE);
			$data['iIdentityCardNocn'] = $body->iIdentityCardNocn;
			$data['catofind'] = $body->inductionrank;
			$data['catofind1'] = $body->ierank;
			$data['catofind2'] = $body->iminirank;
			$data['catofind3'] = $body->imedirank;
			$data['catofind4'] = $body->icprank;
			$data['catofind5'] = $body->iccrank;
			$data['InductionModeim'] = $body->inductionmode;
			$data['indictiondate'] = $body->inductiondate;
			$data['PreviousBatalionito'] = $body->prebattalion;
			$data['PreviousNoprn'] = $body->prebattno;
			$data['gd1'] = $body->gd1;
			$data['bd1'] = $body->bd1;
			$data['dateblockm1'] = $body->dateblockm1;
			$data['dateblockm2'] = $body->dateblockm2;
			$data['dateblockm3'] = $body->dateblockm3;
			$data['dateblockm4'] = $body->dateblockm4;
			$data['DateOFPromotionDetails21'] = $body->loweschoolcdate;
			$data['DateOFPromotionDetails23'] = $body->doc1;
			$data['DateOFPromotionDetails24'] = $body->doc2;
			$data['DateOFPromotionDetails25'] = $body->dofhc;
			$data['DateOFPromotionDetails26'] = $body->intermediatescor;
			$data['DateOFPromotionDetails27'] = $body->dofld;
			$data['DateOFPromotionDetails28'] = $body->dofld2;
			$data['DateOFPromotionDetails29'] = $body->dateofoffasi;
			$data['DateOFPromotionDetails30'] = $body->upperschool;
			$data['DateOFPromotionDetails31'] = $body->dateofliste;
			$data['DateOFPromotionDetails32'] = $body->dateofliste2;
			$data['DateOFPromotionDetails33'] = $body->dateoffsi;
			$data['DateOFPromotionDetails34'] = $body->dateoflistf;
			$data['LowerSchoolCourseDate35'] = $body->dateoflistf2;
			$data['DateOFPromotionDetails35'] = $body->dateofinsp;
			$this->form_validation->set_data($data);
			$this->presentservice_detail_validation($data['BattalionUnitito'], $data['RankRankre'], $GO_OFFICER);

			if (!$this->form_validation->run()) {
				//var_dump($this->form_validation->error_array());
				$errors = count($this->form_validation->error_array());
				$pagesErrorCounter['present_service_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'];
			}
			$data['TrainingInstituteti'] = $body->btic;
			$data['Othertraining'] = $body->Othertraining;
			$data['Batchbn'] = $body->batchgroup;
			$data['batchpassdate'] = $body->passoutyear;
			if (trim($data['TrainingInstituteti']) != '' ||  trim($data['Batchbn']) != '' || trim($data['batchpassdate']) != '') {
				$this->form_validation->set_data($data);
				$this->basic_training_course_validation($data['TrainingInstituteti']);
				if (!$this->form_validation->run()) {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['basic_training_course_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'];
				}
			}
			//Professional training course
			if (false  && trim($body->TrainingInstitutessti) != '' && trim($body->TrainingInstitutesstiOther) != '' && trim($body->NamesofsCourses) != '' && trim($body->DurationsofsCourses) && trim($body->DurationsofsCoursest)) {
				$data['TrainingInstitutessti'] = explode('@', $body->TrainingInstitutessti);
				$data['TrainingInstitutesstiOther'] = explode('@', $body->TrainingInstitutesstiOther);
				$data['NamesofsCourses'] = explode('@', $body->NamesofsCourses);
				$data['DurationsofsCourses'] = explode('@', $body->DurationsofsCourses);
				$data['DurationsofsCoursest'] = explode('@', $body->DurationsofsCoursest);
				$this->form_validation->set_data($data);
				$this->professional_course_detail_validation($data['TrainingInstitutessti']);
				if (!$this->form_validation->run()) {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['professional_course_detail'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'];
				}
			}
			//annual firing practice
			$data['NameofsRanges']  = $body->NameofsRanges;
			$data['dateofprcatice'] = $body->dateofprcatice;
			$data['tow'] = $body->tow;
			$this->form_validation->set_data($data);
			if ($data['NameofsRanges'] != null || $data['dateofprcatice'] != null || $data['tow'] != null) {
				$this->annual_firing_practice_validation();
				if (!$this->form_validation->run()) {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['annual_firing_practice'] = $errors - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'] - $pagesErrorCounter['professional_course_detail'];
				}
			}

			//=======================================================================

			$this->form_validation->set_data($data);

			//validations
			$this->personal_detail_validations($GO_OFFICER);
			$this->address_validations($sameAsPermanentAddress, $GO_OFFICER);
			$this->education_detail_validations($data['stts'], $data['Doctorate'], $GO_OFFICER);
			$this->enlistment_detail_validations($data['Modemdr'], $data['eor'], $data['EnlistmentUnit'], $GO_OFFICER);
			$this->presentservice_detail_validation($data['BattalionUnitito'], $data['eor'], $GO_OFFICER);
			if (trim($data['TrainingInstituteti']) != '' ||  trim($data['Batchbn']) != '' || trim($data['batchpassdate']) != '') {
				$this->basic_training_course_validation($data['TrainingInstituteti']);
			}
			if (false && trim($body->TrainingInstitutessti) != '' && trim($body->TrainingInstitutesstiOther) != '' && trim($body->NamesofsCourses) != '' && trim($body->DurationsofsCourses) && trim($body->DurationsofsCoursest)) {
				$this->professional_course_detail_validation($data['TrainingInstitutessti']);
			}
			if ($data['NameofsRanges'] != null || $data['dateofprcatice'] != null || $data['tow'] != null) {
				$this->annual_firing_practice_validation();
			}

			if (!$this->form_validation->run()) {
			}
		}

		/*
				Professional course Detail
			*/
		$apc_courses = [];
		$this->load->model('TrainingInstitute_model');
		$this->load->model('Course_model');
		$where = ['deleted' => 'NO', 'enabled' => 'YES'];
		$apc_training_institutes = [];
		$training_institutes_objs = $this->TrainingInstitute_model->getInstitutesIDNamePair($where);

		$apc_training_institutes[] = '--All--';
		foreach ($training_institutes_objs as $k => $val) {
			$apc_training_institutes[$val->id] = $val->institute_name;
		}
		$data['apc_training_institutes'] = $apc_training_institutes;

		$apc_courses[] = '--All--';
		$courses_objs = $this->Course_model->getCoursesIDNamePair($where);
		foreach ($courses_objs as $k => $val) {
			$apc_courses[$val->id] = $val->course_name;
		}
		$data['apc_courses'] = $apc_courses;

		$apc_course_details = [];
		$data['pageErrorCounter'] = $pagesErrorCounter;
		if ($body->uid == 1)
			$data["updateNewEmployee"] = true;
		else
			$data["updateNewEmployee"] = false;
		$this->load->view('Osi/updatemanpower2', $data);
	}
	//------------- --------------- -------------UPDATE Manpower START---------------- --------------------- ------------------
	/*Add monpower*/
	public function updates_manpower($id)
	{

		$data['user_id'] = $id;
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->model('Osi_model');
		$this->load->model('Btalion/Btalion_model');
		$this->load->helper('common');
		$data['uname'] = $this->Osi_model->fetchinfo('users', array('user_log' => 4));
		$data['weapon'] = $this->Btalion_model->weaponlist();
		$name = $this->input->post("name", TRUE);
		$fname = $this->input->post("fname", TRUE);
		$hno = $this->input->post("hno", TRUE);
		$sno = $this->input->post("sno", TRUE);
		$vm = $this->input->post("vm", TRUE);
		$wardno = $this->input->post("wardno", TRUE);
		$ct = $this->input->post("ct", TRUE);
		$po = $this->input->post("po", TRUE);
		$ps = $this->input->post("ps", TRUE);
		$tl = $this->input->post("tl", TRUE);
		$state = $this->input->post("state", TRUE);
		$nat = $this->input->post('nat', TRUE);		//nationality
		$dis = $this->input->post("dis", TRUE);
		$phouseno = $this->input->post("phouseno", TRUE);
		$pstreetno = $this->input->post("pstreetno", TRUE);
		$pwardno = $this->input->post("pwardno", TRUE);
		$pvillmoh = $this->input->post("pvillmoh", TRUE);
		$postcity = $this->input->post("postcity", TRUE);
		$pcitypostoff = $this->input->post("pcitypostoff", TRUE);
		$ppolicestation = $this->input->post("ppolicestation", TRUE);
		$ptehsil = $this->input->post("ptehsil", TRUE);
		$postate = $this->input->post("postate", TRUE);
		$pdistrict = $this->input->post("pdistrict", TRUE);
		$gender = $this->input->post("gender", TRUE);
		$mstatus = $this->input->post("mstatus", TRUE);
		$dob = $this->input->post("dob", TRUE);
		//end address--------------------------
		$casting = $this->input->post("casting", TRUE);
		$catii = $this->input->post("catii", TRUE);
		$conphno = $this->input->post("conphno", TRUE);
		$conphnot = $this->input->post("conphnot", TRUE);
		$pemailid = $this->input->post("pemailid", TRUE);
		$addarcard = $this->input->post("addarcard", TRUE);
		$pancard = $this->input->post("pancard", TRUE);
		$bankdetail = $this->input->post("bankdetail", TRUE);
		$bankbrach = $this->input->post("bankbrach", TRUE);
		$bankac = $this->input->post("bankac", TRUE);
		$ifsccode = $this->input->post("ifsccode", TRUE);
		$bloodgroup = $this->input->post("bloodgroup", TRUE);
		$Identificationmark = $this->input->post("Identificationmark", TRUE);
		$Kg = $this->input->post("Kg", TRUE);
		$Gm = $this->input->post("Gm", TRUE);
		$Feet = $this->input->post("Feet", TRUE);
		$inch = $this->input->post("inch", TRUE);
		$stts = $this->input->post("stts", TRUE);
		$UnderGraduate = $this->input->post("UnderGraduate", TRUE);
		$Graduate = $this->input->post("Graduate", TRUE);
		$PostGraduate = $this->input->post("PostGraduate", TRUE);
		$Doctorate = $this->input->post("Doctorate", TRUE);
		$docOther = $this->input->post("docOther", TRUE);
		$Battalion =  $this->input->post("Battalion", TRUE);
		$tyodu =  $this->input->post("tyodu", TRUE);
		$Modemdr = $this->input->post("Modemdr", TRUE);
		$mocOther = $this->input->post("mocOther", TRUE);
		$dateofesnlistment1 = $this->input->post("dateofesnlistment1", TRUE);
		//$dateofesnlistment = $dateofesnlistment1;

		$Rankre = $this->input->post("eor", TRUE);
		$eor1 = $this->input->post("eor1", TRUE);
		$eor2 = $this->input->post("eor2", TRUE);
		$eor3 = $this->input->post("eor3", TRUE);
		$eor4 = $this->input->post("eor4", TRUE);
		$eor5 = $this->input->post("eor5", TRUE);


		$Enlistmentec = $this->input->post("Enlistmentec", TRUE);
		$EnlistmentUnit = $this->input->post("EnlistmentUnit", TRUE);
		//var_dump($EnlistmentUnit);

		$DateofRetirementdor = $this->input->post("DateofRetirementdor", TRUE);
		$gpfPRAN = $this->input->post("gpfPRAN", TRUE);
		$PRAN = $this->input->post("PRAN", TRUE);
		$BattalionUnitito = $this->input->post("BattalionUnitito", TRUE);
		$RankRankre = $this->input->post("RankRankre", TRUE);

		$catop1 = $this->input->post("catop1", TRUE);
		$catop2 = $this->input->post("catop2", TRUE);
		$catop3 = $this->input->post("catop3", TRUE);
		$catop4 = $this->input->post("catop4", TRUE);
		$catop5 = $this->input->post("catop5", TRUE);

		$Deptdn = $this->input->post("Deptdn", TRUE);
		$iIdentityCardNocn = $this->input->post("iIdentityCardNocn", TRUE);
		$InductionRankir = $this->input->post("catofind", TRUE);

		$catofind1 = $this->input->post("catofind1", TRUE);
		$catofind2 = $this->input->post("catofind2", TRUE);
		$catofind3 = $this->input->post("catofind3", TRUE);
		$catofind4 = $this->input->post("catofind4", TRUE);
		$catofind5 = $this->input->post("catofind5", TRUE);

		$InductionModeim = $this->input->post("InductionModeim", TRUE);
		$indictiondate = $this->input->post("indictiondate", TRUE);
		$PreviousBatalionito = $this->input->post("PreviousBatalionito", TRUE);
		$PreviousNoprn = $this->input->post("PreviousNoprn", TRUE);

		$DateOFPromotionDetails21 = $this->input->post("DateOFPromotionDetails21", TRUE);
		$DateOFPromotionDetails23 = $this->input->post("DateOFPromotionDetails23", TRUE);
		$DateOFPromotionDetails24 = $this->input->post("DateOFPromotionDetails24", TRUE);
		$DateOFPromotionDetails25 = $this->input->post("DateOFPromotionDetails25", TRUE);
		$DateOFPromotionDetails26 = $this->input->post("DateOFPromotionDetails26", TRUE);
		$DateOFPromotionDetails27 = $this->input->post("DateOFPromotionDetails27", TRUE);
		$DateOFPromotionDetails28 = $this->input->post("DateOFPromotionDetails28", TRUE);
		$DateOFPromotionDetails29 = $this->input->post("DateOFPromotionDetails29", TRUE);
		$DateOFPromotionDetails30 = $this->input->post("DateOFPromotionDetails30", TRUE);
		$DateOFPromotionDetails31 = $this->input->post("DateOFPromotionDetails31", TRUE);
		$DateOFPromotionDetails32 = $this->input->post("DateOFPromotionDetails32", TRUE);
		$DateOFPromotionDetails33 = $this->input->post("DateOFPromotionDetails33", TRUE);
		$DateOFPromotionDetails34 = $this->input->post("DateOFPromotionDetails34", TRUE);
		$LowerSchoolCourseDate35 = $this->input->post("LowerSchoolCourseDate35", TRUE);
		$DateOFPromotionDetails35 = $this->input->post("DateOFPromotionDetails35", TRUE);

		//Basic Training data
		$TrainingInstituteti = $this->input->post("TrainingInstituteti", TRUE);
		$Othertraining = $this->input->post("Othertraining", TRUE);
		$Batchbn = $this->input->post("Batchbn", TRUE);
		$batchpassdate = $this->input->post("batchpassdate", TRUE);
		//Professional course detail			
		$TrainingInstitutessti = $this->input->post("TrainingInstitutessti", TRUE);
		$TrainingInstitutesstiOther = $this->input->post("TrainingInstitutesstiOther", TRUE);
		$NamesofsCourses = $this->input->post("NamesofsCourses", TRUE);
		$DurationsofsCourses = $this->input->post("DurationsofsCourses", TRUE);
		$DurationsofsCoursest = $this->input->post("DurationsofsCoursest", TRUE);
		//Annual firing practice
		$NameofsRanges = $this->input->post("NameofsRanges", TRUE);
		$dateofprcatice = $this->input->post("dateofprcatice", TRUE);
		$tow = $this->input->post("tow", TRUE);

		$gd1 = $this->input->post("gd1", TRUE);
		$bd1 = $this->input->post("bd1", TRUE);
		$clit =   $this->input->post("clit", TRUE);
		$DateofRetirementdori =    $this->input->post("DateofRetirementdori", TRUE);
		$orderby =   $this->input->post("orderby", TRUE);
		$cnody = $this->input->post("cnody", TRUE);
		$dateblockm1 = $this->input->post("dateblockm1", TRUE);
		$dateblockm2 = $this->input->post("dateblockm2", TRUE);
		$dateblockm3 = $this->input->post("dateblockm3", TRUE);
		$dateblockm4 = $this->input->post("dateblockm4", TRUE);
		$enutherdistrict = $this->input->post("enutherdistrict", TRUE);
		$bunitdistrict =   $this->input->post("bunitdistrict", TRUE);
		$enuther = $this->input->post('enuther');

		$pagesErrorCounter = [
			'personal_detail' => 0,
			'address' => 0,
			'education_detail' => 0,
			'enlistment_detail' => 0,
			'present_service_detail' => 0,
			'basic_training_course_detail' => 0,
			'professional_course_detail' => 0,
			'annual_firing_practice' => 0,
			'permanent_rank' => 0,
		];
		$data['body'] = $this->Btalion_model->fetchoneinfo('newosi', array('man_id' => $id));
		//var_dump($data['body']);
		$submit = false;
		//$data['citylist'] = $this->Btalion_model->fetchinfo('state_list',array('state' => 'PUNJAB' ));
		$state1 = $this->input->post('state');
		if ($state1 == '') {
			$state1 = $data['body']->state;
			if ($state1 == '') {
				$state1 = 'PUNJAB';
			}
		}
		$data['citylist1'] = $this->Osi_model->getDistricts(array('state' => $state1));

		$state2 = $this->input->post('postate');
		if ($state2 == '') {
			$state2 = $data['body']->pstate;
			if ($state2 == '') {
				$state2 = 'PUNJAB';
			}
		}
		$data['citylist2'] = $this->Osi_model->getDistricts(array('state' => $state2, 'state_status' => '1'));
		$data['citylist'] = $this->Btalion_model->fetchinfo('state_list', array('state' => 'PUNJAB'));
		if (!isset($this->cities)) {
			$this->cities = [];
			foreach ($data['citylist'] as $value) {
				$this->cities[$value->city] = $value->city;
			}
		}
		if (null != $this->input->post('form_type')) {
			$excluded_page = $page = $data['page'] = $this->input->post('form_type');
			$submit = true;
		} elseif (null != $this->session->session_page) {

			$page = $this->session->session_page;
			$data['page'] = $page;

			$session_data = array('session_page' => NULL);
			$this->session->set_userdata($session_data);
			$this->validateWholeForm($pagesErrorCounter, $data['body'], $page);
		} else {

			$page = $data['page'] = 'personal_detail';
			$this->validateWholeForm($pagesErrorCounter, $data['body'], $page);
		}
		//echo '<b>'.$page.'</b>';
		//$this->load->view('Osi/updatemanpower',$data);
		//die;

		//$current_page =$page;

		//var_dump($this->form_validation->error_array());
		$this->units = $data['uname'] = $this->Btalion_model->fetchinfo('users', array('user_log' => 4));
		//die;

		//echo '"'.$page.'"';
		//$this->form_validation->reset_validation();
		//-----------------------ADDRES Start--------------------
		$body = $data['body'];
		//var_dump($body);
		//echo "'".$body->wardno.','.$body->pward.'"';
		//echo "'".$body->ppostoffice.'"';
		if ($this->input->post('peradd') == 'yes') {
			$data['address']['permanent_address'] = true;
		} elseif ($this->input->post('peradd') == 'no') {
			$data['address']['permanent_address'] = false;
		} else {
			if (
				($body->houseno == $body->phouse)
				&& ($body->streetno == $body->pstreet)
				&& ($body->villmohala == $body->pvillmohala)
				&& ($body->wardno == $body->pward)
				&& ($body->postoffice == $body->ppostoffice)
				&& ($body->policestation == $body->ppolicestation)
				&& ($body->teshil == $body->ptehsil)
				&& ($body->state == $body->pstate)
				&& ($body->district == $body->pdistrict)
			) {
				$data['address']['permanent_address'] = true;
			} else {
				$data['address']['permanent_address'] = false;
			}
		}

		//-----------------------ADDRES end--------------------
		if ($submit) {

			if (($page == 'personal_detail' && $excluded_page == 'personal_detail')) {
				//$pagesErrorCounter['personal_detail'] = $this->form_validation->error_array();
				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				$this->personal_detail_validations();
				if ($this->form_validation->run()) {
					//$status = $this->Osi_model->update_permanent_address($name,$fname,$hno,$sno,$vm,$wardno,$ct,$po,$ps,$tl,$state,$dis,$id);
					$status = $this->Osi_model->update_personal_detail($name, $fname, $gender, $mstatus, $dob, $casting, $catii, $conphno, $conphnot, $pemailid, $addarcard, $pancard, $bankdetail, $bankbrach, $bankac, $ifsccode, $bloodgroup, $Identificationmark, $Kg, $Gm, $Feet, $inch, $id);
					//$gender,$hno,$sno,$vm,$wardno,$ct,$po,$ps,$tl,$state,$dis,$id);
					if ($status == true) {
						$this->session->set_flashdata('success_msg', 'Personal Detail has updated succesfully !');
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'Permanent Address has not updated.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				} else {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['personal_detail'] = $errors;
					//echo '"hoho '.$pagesErrorCounter['personal_detail'].'"';

				}
				//$this->validateWholeForm($pagesErrorCounter,$data['body'],$page,$excluded_page);
				//$total = count($this->form_validation->error_array());

			} elseif (($page == 'address' && $excluded_page == 'address')) {

				//$pagesErrorCounter['address'] = $this->form_validation->error_array();
				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				$this->address_validations($data['address']['permanent_address']);
				if ($this->form_validation->run()) {
					$status = $this->Osi_model->update_address($hno, $sno, $vm, $wardno, $ct, $po, $ps, $tl, $state, $dis, $phouseno, $pstreetno, $pwardno, $pvillmoh, $postcity, $pcitypostoff, $ppolicestation, $ptehsil, $postate, $pdistrict, $id, $data['address']['permanent_address'], $nat);
					if ($status == true) {
						$data = array('session_page' => 'address');
						$this->session->set_userdata($data);
						$this->session->set_flashdata('success_msg', 'Address has updated succesfully !');
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'Address has not updated.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				} else {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['address'] = $errors; //-$pagesErrorCounter['personal_detail'];
				}
				//$this->validateWholeForm($pagesErrorCounter,$data['body'],$page,$excluded_page);
			} elseif (($page == 'education_detail') && $excluded_page == 'education_detail') {

				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				$this->education_detail_validations($stts, $Doctorate);
				if ($this->form_validation->run()) {

					$status = $this->Osi_model->update_education_detail($stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $docOther, $clit, $id);
					if ($status == true) {
						$data = array('session_page' => 'education_detail');
						$this->session->set_userdata($data);
						$this->session->set_flashdata('success_msg', 'Education Details has updated succesfully !');
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'Education Details has not updated.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				} else {
					//$this->session->set_flashdata('error_msg','Education Details has not updated ERRORS.');
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['education_detail'] = $errors;
				}
				//$this->validateWholeForm($pagesErrorCounter,$data['body'],$page,$excluded_page);
			} elseif (($page == 'enlistment_detail') && $excluded_page == 'enlistment_detail') {
				//$pageErrorCounter['enlistment_detail'] = $this->form_validation->error_array();
				//$total = count($this->form_validation->error_array());
				//var_dump($data['body']);	
				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				//var_dump($this->input->post());
				//echo '<b>'.$Modemdr.' '.$Rankre.' '.$EnlistmentUnit.'</b><br>';
				$this->enlistment_detail_validations($Modemdr, $Rankre, $EnlistmentUnit);
				//$this->form_validation->set_rules("name", "name", "trim");
				//$this->form_validation->set_rules("gender", "Gender", "required");
				//$this->form_validation->set_rules("mstatus", "maritalstatus", "required");
				// .....
				if ($this->form_validation->run()) {
					$status = $this->Osi_model->update_enlistment_details($Modemdr, $Battalion, $tyodu, $mocOther, $dateofesnlistment1, $Rankre, $eor1, $eor2, $eor3, $eor4, $eor5, $Enlistmentec, $EnlistmentUnit, $DateofRetirementdor, $DateofRetirementdori, $gpfPRAN, $PRAN, $id, $enutherdistrict, $enuther);

					if ($status == true) {
						$data = array('session_page' => 'enlistment_detail');
						$this->session->set_userdata($data);
						$this->session->set_flashdata('success_msg', 'enlistment details has updated succesfully !');
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'enlistment details has not updated.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				} else {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['enlistment_detail'] = $errors;
				}
			} elseif (($page == 'present_service_detail') && $excluded_page == 'present_service_detail') {
				//$this->validateWholeForm($pagesErrorCounter,$data['body'],$page,$excluded_page);
				//$pageErrorCounter['present_service_detail'] = $this->form_validation->error_array();
				//$total = count($this->form_validation->error_array());
				//var_dump($this->input->post('RankRankre'));
				//check submitted data
				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				$this->presentservice_detail_validation($BattalionUnitito, $RankRankre);
				//var_dump($this->input->post('RankRankre'));
				$gd1 = $this->input->post('gd1');
				$bd1 = $this->input->post('bd1');
				// .....
				if ($this->form_validation->run()) {
					$catofind = '--';
					//echo 'Saving data';
					$status = $this->Osi_model->update_presentservice_details($BattalionUnitito, $RankRankre, $catop1, $catop2, $catop3, $catop4, $catop5, $Deptdn, $iIdentityCardNocn, $InductionRankir, $catofind1, $catofind2, $catofind3, $catofind4, $catofind5, $InductionModeim, $indictiondate, $PreviousBatalionito, $PreviousNoprn, $DateOFPromotionDetails21, $DateOFPromotionDetails23, $DateOFPromotionDetails24, $DateOFPromotionDetails25, $DateOFPromotionDetails26, $DateOFPromotionDetails27, $DateOFPromotionDetails28, $DateOFPromotionDetails29, $DateOFPromotionDetails30, $DateOFPromotionDetails31, $DateOFPromotionDetails32, $DateOFPromotionDetails33, $DateOFPromotionDetails34, $LowerSchoolCourseDate35, $DateOFPromotionDetails35, $id, $gd1, $bd1);

					if ($status == true) {
						$data1 = array('session_page' => 'present_service_detail');
						$this->session->set_userdata($data1);
						$this->session->set_flashdata('success_msg', 'present service details has updated succesfully !');


						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'present service details has not updated.');

						redirect('bt-updates-manpower-two/' . $id);
					}
				} else {
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['present_service_detail'] = $errors;
					// var_dump($this->input->post('RankRankre'));
				}
			} elseif (($page == 'basic_training_course_detail') && $excluded_page == 'basic_training_course_detail') {
				//echo '"'.$TrainingInstituteti.'"';
				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				//$Batchbn = $this->input->post("Batchbn",TRUE);
				//$batchpassdate = $this->input->post("batchpassdate",TRUE);
				if ($TrainingInstituteti != '' || $Batchbn != '' || $batchpassdate != '') {
					$this->basic_training_course_validation($TrainingInstituteti);
					if ($this->form_validation->run()) {
						$status = $this->Osi_model->update_basic_training_course($TrainingInstituteti, $Batchbn, $batchpassdate, $id, $Othertraining);

						if ($status == true) {
							$data = array('session_page' => 'basic_training_course_detail');
							$this->session->set_userdata($data);
							$this->session->set_flashdata('success_msg', 'basic training course has updated succesfully !');
							redirect('bt-updates-manpower-two/' . $id);
						} else {
							$this->session->set_flashdata('error_msg', 'basic training course has not updated.');
							redirect('bt-updates-manpower-two/' . $id);
						}
					} else {
						//$this->session->set_flashdata('error_msg','Education Details has not updated ERRORS.');
						$errors = count($this->form_validation->error_array());
						$pagesErrorCounter['basic_training_course_detail'] = $errors;
					}
				}
			} elseif (($page == 'professional_course_detail') && $excluded_page == 'professional_course_detail') {
				//die('i');

				//$this->form_validation->set_rules("TrainingInstitutessti", "TrainingInstitutessti", "required");
				//$this->form_validation->set_rules("TrainingInstitutesstiOther", "TrainingInstitutesstiOther", "required");
				//$this->form_validation->set_rules("NamesofsCourses", "NamesofsCourses", "required");
				//$this->form_validation->set_rules("batchpassdate", "batchpassdate11", "required");
				//$this->form_validation->set_rules("DurationsofsCourses", "DurationsofsCourses", "required");
				//$this->form_validation->set_rules("DurationsofsCoursest", "DurationsofsCoursest", "required");
				$this->form_validation->reset_validation();
				$this->form_validation->set_data($this->input->post());
				//var_dump($TrainingInstitutessti);

				$this->professional_course_detail_validation($TrainingInstitutessti);
				//var_dump($TrainingInstitutessti);
				if ($this->form_validation->run()) {
					//echo 'hi';
					$status = $this->Osi_model->update_professional_course_detalis($TrainingInstitutessti, $TrainingInstitutesstiOther, $NamesofsCourses, $DurationsofsCourses, $DurationsofsCoursest, $id);

					if ($status == true) {
						$data = array('session_page' => 'professional_course_detail');
						$this->session->set_userdata($data);
						$this->session->set_flashdata('success_msg', 'professional course detalis has updated succesfully !');
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'professional course detalis has not updated.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				} else {
					//$this->session->set_flashdata('error_msg','Education Details has not updated ERRORS.');
					$errors = count($this->form_validation->error_array());
					$pagesErrorCounter['professional_course_detail'] = $errors;
				}
			} elseif (($page == 'annual_firing_practice') && $excluded_page == 'annual_firing_practice') {
				//die('i');
				$this->form_validation->set_rules("NameofsRanges", "NameofsRanges", "required");
				$this->form_validation->set_rules("dateofprcatice", "dateofprcatice", "required");
				$this->form_validation->set_rules("tow", "tow", "required");


				if ($this->form_validation->run()) {
					$status = $this->Osi_model->update_annua_firing_practice($NameofsRanges, $dateofprcatice, $tow, $id);

					if ($status == true) {
						$data = array('session_page' => 'annual_firing_practice');
						$this->session->set_userdata($data);
						$this->session->set_flashdata('success_msg', 'annual firing practice has updated succesfully !');
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'annual firing practice has not updated.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				}
			} elseif (($page == 'permanent_rank') && $excluded_page == 'permanent_rank') {

				$this->form_validation->set_rules("name", "name", "trim");
				$this->form_validation->set_rules("dob", "Date Of Birth", "callback_valid_date");
				if ($this->form_validation->run()) {
					$__date = date_create_from_format('d-m-Y', $dob);
					$dob = date_format($__date, 'Y-m-d');

					/*$add_web = $this->Osi_model->ups_man(
				$name,$fname,$hno,$sno,$vm,$wardno,$ct,$po,$ps,$tl,$state,$dis,$phouseno,$pstreetno,$pwardno,$pvillmoh,$postcity,$pcitypostoff,$ppolicestation,$ptehsil,$postate,$pdistrict,$gender,$mstatus,$dob,$casting,$catii,$conphno,$conphnot,$pemailid,$addarcard,$pancard,$bankdetail,$bankbrach,$bankac,$ifsccode,$bloodgroup,$Identificationmark,$Kg,$Gm,$Feet,$inch,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$docOther,$Modemdr,$Battalion,$tyodu,$mocOther,$dateofesnlistment1,$Rankre,$eor1,$eor2,$eor3,$eor4,$eor5,$Enlistmentec,$EnlistmentUnit,$DateofRetirementdor,$gpfPRAN,$PRAN,$BattalionUnitito,$RankRankre,$catop1,$catop2,$catop3,$catop4,$catop5,$Deptdn,$iIdentityCardNocn,
				$InductionRankir,$catofind1,$catofind2,$catofind3,$catofind4,$catofind5,$InductionModeim,$indictiondate,$PreviousBatalionito,$PreviousNoprn,$DateOFPromotionDetails21,$DateOFPromotionDetails23,$DateOFPromotionDetails24,$DateOFPromotionDetails25,$DateOFPromotionDetails26,$DateOFPromotionDetails27,$DateOFPromotionDetails28,$DateOFPromotionDetails29,$DateOFPromotionDetails30,$DateOFPromotionDetails31,$DateOFPromotionDetails32,$DateOFPromotionDetails33,$DateOFPromotionDetails34,$LowerSchoolCourseDate35,$DateOFPromotionDetails35,$TrainingInstituteti,$Batchbn,$batchpassdate,$TrainingInstitutessti,$TrainingInstitutesstiOther,$NamesofsCourses,$DurationsofsCourses,$DurationsofsCoursest,$NameofsRanges,$dateofprcatice,$tow,$gd1,$bd1,$id,$clit,$DateofRetirementdori,$orderby,$cnody,$dateblockm1,$dateblockm2,$dateblockm3,$dateblockm4,$enutherdistrict,$bunitdistrict); */

					// $this->Btalion_model->mark_osi($id);

					if ($add_web == 1) {
						$this->session->set_flashdata('success_msg', 'Info has added succesfully !');
						//redirect('bt-updates-manpower-two/'.$id);
						redirect('bt-updates-manpower-two/' . $id);
					} else {
						$this->session->set_flashdata('error_msg', 'Info has not added.');
						redirect('bt-updates-manpower-two/' . $id);
					}
				}
			} else {
				die('INVALID SELECTION');
			}

			//echo 'SUBMITTED';
			$this->form_validation->reset_validation();

			$this->validateFormAfterSubmit($pagesErrorCounter, $data['body'], $excluded_page);
		}

		$data['pageErrorCounter'] = $pagesErrorCounter;
		$data['statelist'] = $this->Osi_model->getStates(array('state_status' => 1));
		// var_dump($this->input->post('RankRankre'));
		$data['updateNewEmployee'] = true;
		$this->load->view('Osi/updatemanpower', $data);
	}
	/*Close*/
	/*	date yyyy-mm-dd
		*/
	public function valid_date($date)
	{
		//var_dump($date);
		$this->form_validation->set_message('valid_date', 'Invalid Date Format!!(YYYY-MM-DD)');
		//echo $date;
		//if(preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-[0-9]{4}$/',$date)){
		if (preg_match('/^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/', $date)) {
			return true;
		} else {
			return false;
		}
	}
	/*Close*/
	public function valid_today($date){
		//echo $date;
		$posting_date = DateTime::createFromFormat('d/m/Y', $date)->format('Y-m-d');
		$currentDate = new DateTime();
		if($posting_date <= $currentDate->format("Y-m-d")){
				return true;
		}else{
			$this->form_validation->set_message('valid_today', 'Date is greator than Today('.$currentDate->format("Y-m-d").')!!');
			return false;
		}
	}
	public function valid_DOB($date){
		//echo $date;
		$dob = DateTime::createFromFormat('d/m/Y', $date)->format('Y-m-d');
		$date1 = new DateTime();
		if($dob <= $date1->modify('-18 year')->format("Y-m-d")){
				return true;
		}else{
			$this->form_validation->set_message('valid_DOB', 'Invalid DOB,Age is Less than 18 years!!');
			return false;
		}
}
	public function valid_date2($date)
	{
		//var_dump($date);
		$this->form_validation->set_message('valid_date2', 'Invalid Date Format!!. Req(DD/MM/YYYY).');
		//echo $date;
		//if(preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-[0-9]{4}$/',$date)){
		if ($date == '') {
			return true;
		} else if (preg_match('/^(0[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|1[0-2])\/([0-9]{4})$/', $date)) {
			return true;
		} else {
			return false;
		}
	}

	public function valid_deptno($deptno)
	{
		
		$this->form_validation->set_message('valid_deptno', 'Invalid Belt no.  (eg. ORs 151, NGOs 112/PAP & Class-IV 2/COOK)');
		
		if (preg_match('/^[a-zA-Z0-9(\/)]+$/', $deptno)) {
			return true;
		} else {
			return false;
		}
	}


	//------------- --------------- -------------UPDATE Manpower END---------------- --------------------- ------------------


	/*
		* adding new employee detail to database
		**/

	public function add_manpower()
	{
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->helper('common');
		$this->load->helper('osi');
		$this->load->model('Btalion/Btalion_model');
		$this->load->model('Osi_model');
		$this->load->helper('date');

		$this->units = $data['uname'] = $this->Btalion_model->fetchinfo('users', array('user_log' => 4));
		$data['citylist'] = $this->Btalion_model->fetchinfo('state_list', array('state' => 'PUNJAB', 'state_status' => '1'));
		$data['police_districts'] = $this->Btalion_model->fetchinfo('police_districts', [], ['order_by' => 'district_name', 'direction' => 'asc']);
		$data['bloodgroups'] = $this->getBloodgroups();
		if (!isset($this->cities)) {
			$this->cities = [];
			foreach ($data['citylist'] as $value) {
				$this->cities[$value->city] = $value->city;
			}
		}

		//personal detail
		$name = $this->input->post("name", TRUE);
		$fname = $this->input->post("fname", TRUE);
		$gender = $this->input->post("gender", TRUE);
		$mstatus = $this->input->post("mstatus", TRUE);
		$dob = $this->input->post("dob", TRUE);
		$casting = $this->input->post("casting", TRUE);
		$catii = $this->input->post("catii", TRUE);
		//Contact Detail
		$conphno = $this->input->post("conphno", TRUE);
		$conphnot = $this->input->post("conphnot", TRUE);
		$pemailid = $this->input->post("pemailid", TRUE);
		$addarcard = $this->input->post("addarcard", TRUE);
		$pancard = $this->input->post("pancard", TRUE);
		//Bank Detail
		$bankdetail = $this->input->post("bankdetail", TRUE);
		$bankbrach = $this->input->post("bankbrach", TRUE);
		$bankac = $this->input->post("bankac", TRUE);
		$ifsccode = $this->input->post("ifsccode", TRUE);
		//Physical Details
		$bloodgroup = $this->input->post("bloodgroup", TRUE);
		$Identificationmark = $this->input->post("Identificationmark", TRUE);
		$Kg = $this->input->post("Kg", TRUE);
		$Gm = $this->input->post("Gm", TRUE);
		$Feet = $this->input->post("Feet", TRUE);
		$inch = $this->input->post("inch", TRUE);

		//Address
		$hno = $this->input->post("hno", TRUE);
		$sno = $this->input->post("sno", TRUE);
		$vm = $this->input->post("vm", TRUE);
		$wardno = $this->input->post("wardno", TRUE);
		$ct = $this->input->post("ct", TRUE);
		$po = $this->input->post("po", TRUE);
		$ps = $this->input->post("ps", TRUE);
		$tl = $this->input->post("tl", TRUE);
		$nationality = $this->input->post("nat", TRUE);
		$state = $this->input->post("state", TRUE);
		$dis = $this->input->post("dis", TRUE);
		$presentAddressSameasPermanentAddress = $this->input->post("peradd", TRUE);

		//present Address
		$phouseno = $this->input->post("phouseno", TRUE);
		$pstreetno = $this->input->post("pstreetno", TRUE);
		$pvillmoh = $this->input->post("pvillmoh", TRUE);
		$postcity = $this->input->post("postcity", TRUE);
		$pcitypostoff = $this->input->post("pcitypostoff", TRUE);
		$ppolicestation = $this->input->post("ppolicestation", TRUE);
		$ptehsil = $this->input->post("ptehsil", TRUE);
		$postate = $this->input->post("postate", TRUE);
		$pdistrict = $this->input->post("pdistrict", TRUE);
		//education
		$stts = $this->input->post("stts", TRUE);
		$UnderGraduate = $this->input->post("UnderGraduate", TRUE);
		$Graduate = $this->input->post("Graduate", TRUE);
		$PostGraduate = $this->input->post("PostGraduate", TRUE);
		$Doctorate = $this->input->post("Doctorate", TRUE);
		$docOther = $this->input->post("docOther", TRUE);
		$clit =   $this->input->post("clit", TRUE);

		$Modemdr = $this->input->post("Modemdr", TRUE);
		$mocOther = $this->input->post("mocOther", TRUE);



		$dateofesnlistment1 = $this->input->post("dateofesnlistment1", TRUE);

		$Rankre = $this->input->post("eor", TRUE);
		$eor1 = $this->input->post("eor1", TRUE);
		$eor2 = $this->input->post("eor2", TRUE);
		$eor3 = $this->input->post("eor3", TRUE);
		$eor4 = $this->input->post("eor4", TRUE);
		$eor5 = $this->input->post("eor5", TRUE);

		$Enlistmentec = $this->input->post("Enlistmentec", TRUE);
		$EnlistmentUnit = $this->input->post("EnlistmentUnit", TRUE);
		$enuther = $this->input->post("enuther", TRUE);
		$DateofRetirementdor = $this->input->post("DateofRetirementdor", TRUE);
		$gpfPRAN = $this->input->post("gpfPRAN", TRUE);
		$PRAN = $this->input->post("PRAN", TRUE);
		$hrms_code = $this->input->post("hrms_code", TRUE);
		$BattalionUnitito = $this->input->post("BattalionUnitito", TRUE);
		//$buOther = $this->input->post("buOther",TRUE);
		$RankRankre = $this->input->post("RankRankre", TRUE);;

		$catop1 = $this->input->post("catop1", TRUE);
		$permanent_rank = $this->input->post("permanent_rank", TRUE);

		$GO_OFFICER = false;
		if ($permanent_rank != null && in_array($permanent_rank, ['DSP' => 'DSP', 'SP' => 'SP', 'AIG' => 'AIG', 'Asst. Commandant' => 'Asst. Commandant', 'Commandant' => 'Commandant',  'DIG' => 'DIG', 'IG' => 'IG', 'ADGP' => "ADGP", 'DGP' => 'DGP'])) {
			$GO_OFFICER = true;
		}
		$catop2 = $this->input->post("catop2", TRUE);
		$catop3 = $this->input->post("catop3", TRUE);
		$catop4 = $this->input->post("catop4", TRUE);
		$catop5 = $this->input->post("catop5", TRUE);

		$Deptdn = $this->input->post("Deptdn", TRUE);
		$iIdentityCardNocn = $this->input->post("iIdentityCardNocn", TRUE);
		$InductionRankir = $this->input->post("catofind", TRUE);;
		$catofind1 = $this->input->post("catofind1", TRUE);
		$catofind2 = $this->input->post("catofind2", TRUE);
		$catofind3 = $this->input->post("catofind3", TRUE);
		$catofind4 = $this->input->post("catofind4", TRUE);
		$catofind5 = $this->input->post("catofind5", TRUE);


		$InductionModeim = $this->input->post("InductionModeim", TRUE);
		$indictiondate = $this->input->post("indictiondate", TRUE);
		$PreviousBatalionito = $this->input->post("PreviousBatalionito", TRUE);
		//$pbuOther = $this->input->post("pbuOther",TRUE);
		$PreviousNoprn = $this->input->post("PreviousNoprn", TRUE);


		$DateOFPromotionDetails21 = $this->input->post("DateOFPromotionDetails21", TRUE);
		$DateOFPromotionDetails23 = $this->input->post("DateOFPromotionDetails23", TRUE);
		$DateOFPromotionDetails24 = $this->input->post("DateOFPromotionDetails24", TRUE);
		$DateOFPromotionDetails25 = $this->input->post("DateOFPromotionDetails25", TRUE);
		$DateOFPromotionDetails26 = $this->input->post("DateOFPromotionDetails26", TRUE);
		$DateOFPromotionDetails27 = $this->input->post("DateOFPromotionDetails27", TRUE);
		$DateOFPromotionDetails28 = $this->input->post("DateOFPromotionDetails28", TRUE);
		$DateOFPromotionDetails29 = $this->input->post("DateOFPromotionDetails29", TRUE);
		$DateOFPromotionDetails30 = $this->input->post("DateOFPromotionDetails30", TRUE);
		$DateOFPromotionDetails31 = $this->input->post("DateOFPromotionDetails31", TRUE);
		$DateOFPromotionDetails32 = $this->input->post("DateOFPromotionDetails32", TRUE);
		$DateOFPromotionDetails33 = $this->input->post("DateOFPromotionDetails33", TRUE);
		$DateOFPromotionDetails34 = $this->input->post("DateOFPromotionDetails34", TRUE);
		$LowerSchoolCourseDate35 = $this->input->post("LowerSchoolCourseDate35", TRUE);
		$DateOFPromotionDetails35 = $this->input->post("DateOFPromotionDetails35", TRUE);
		//basic course detail
		$TrainingInstituteti = $this->input->post("TrainingInstituteti", TRUE);
		$Othertraining = $this->input->post("Othertraining", TRUE);
		$Batchbn = $this->input->post("Batchbn", TRUE);
		$batchpassdate = $this->input->post("batchpassdate", TRUE);
		//Professional course detail;
		$TrainingInstitutessti = $this->input->post("TrainingInstitutessti", TRUE);
		$TrainingInstitutesstiOther = $this->input->post("TrainingInstitutesstiOther", TRUE);
		$NamesofsCourses = $this->input->post("NamesofsCourses", TRUE);
		$DurationsofsCourses = $this->input->post("DurationsofsCourses", TRUE);
		$DurationsofsCoursest = $this->input->post("DurationsofsCoursest", TRUE);
		//Annual firing practice
		$NameofsRanges = $this->input->post("NameofsRanges", TRUE);
		$dateofprcatice = $this->input->post("dateofprcatice", TRUE);
		$tow = $this->input->post("tow", TRUE);
		$PreviousNoprnOther = '';
		$tyodu =  $this->input->post("tyodu", TRUE);

		$Nationality =  $this->input->post("nat", TRUE);
		$nstate =  $this->input->post("snat", TRUE);

		$DateofRetirementdori =    $this->input->post("DateofRetirementdori", TRUE);
		$orderby =  $this->input->post("orderby", TRUE);
		$cnody = $this->input->post("cnody", TRUE);
		$enutherdistrict = $this->input->post("enutherdistrict", TRUE);
		$bunitdistrict =   $this->input->post("bunitdistrict", TRUE);

		$gd1 = $this->input->post("gd1", TRUE);
		$bd1 = $this->input->post("bd1", TRUE);
		//Personal Detail
		$this->form_validation->set_rules("name", "Name", "required");
		$this->form_validation->set_rules("fname", "Father Name", "required");
		$this->form_validation->set_rules("gender", "Gender", "required|callback_valid_gender");

		if (!$GO_OFFICER) {
			$this->form_validation->set_rules("mstatus", "Maritial Status", "required|callback_valid_maritial_status");
			//$this->form_validation->set_rules("casting", "Caste", "required");
			$this->form_validation->set_rules("catii", "Category", "required|callback_valid_category");
			$this->form_validation->set_rules("Feet", "Feet", "required|numeric");
			$this->form_validation->set_rules("inch", "Inch", "required|numeric");
			$this->form_validation->set_rules("Kg", "KG", "numeric");
			$this->form_validation->set_rules("Gm", "GM", "numeric");
		}

		$this->form_validation->set_rules("dob", "Date of Birth", "required|callback_valid_date2|callback_valid_DOB");

		$this->form_validation->set_rules("conphno", "Phone Number", "required");
		$this->form_validation->set_rules("bloodgroup", "Blood Group", "required|callback_valid_bloodgroup");


		//address
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules("po", "Post Office", "required");
			$this->form_validation->set_rules("ps", "Police Station", "required");
		}

		$this->form_validation->set_rules("nat", "Nationality", "required|callback_valid_nationality");
		if ($Nationality == 'Nepal') {
			$this->form_validation->set_rules("snat", "Other State", "required");
		} elseif ($Nationality == 'Indian') {
			$this->form_validation->set_rules("state", "State", "required|callback_valid_state");
			$this->form_validation->set_rules("dis", "District", "required|callback_valid_district");
		} else {
			$this->form_validation->set_rules("state", "State", "required|callback_valid_state");
		}
		if (null == $presentAddressSameasPermanentAddress || $presentAddressSameasPermanentAddress == 'no') {
			if (!$GO_OFFICER) {
				$this->form_validation->set_rules("pcitypostoff", "Post Office", "required");
				$this->form_validation->set_rules("ppolicestation", "Police Station", "required");
			}
			if ($Nationality == 'Nepal') {
				$this->form_validation->set_rules("snat", "Other State", "required");
			} elseif ($Nationality == 'Indian') {
				$this->form_validation->set_rules("postate", "State", "required|callback_valid_state");
				$this->form_validation->set_rules("pdistrict", "District", "required|callback_valid_district");
			} else {
				$this->form_validation->set_rules("postate", "State", "required|callback_valid_state");
			}
		}
		//education detail
		$this->form_validation->set_rules("stts", "Class", "required|callback_valid_class");
		//other validations
		$UnderGraduate = $this->input->post("UnderGraduate", TRUE);
		$Graduate = $this->input->post("Graduate", TRUE);
		$PostGraduate = $this->input->post("PostGraduate", TRUE);
		$Doctorate = $this->input->post("Doctorate", TRUE);
		$docOther = $this->input->post("docOther", TRUE);
		switch ($stts) {
			case 'Illiterate':
			case 'Under Matric':
			case '10th':
			case 'H. Sec':
			case 'Prep':
			case '10+1':
			case '10+2':
				break;
			case 'Under Graduate':
				$this->form_validation->set_rules("UnderGraduate", "Under Graduate", "required|callback_valid_under_graduate");
				break;
			case 'Graduate':
				$this->form_validation->set_rules("Graduate", "Graduate", "required|callback_valid_graduate");
				break;
			case 'Post Graduate':
				$this->form_validation->set_rules("PostGraduate", "Post Graduate", "required|callback_valid_post_graduate");
				break;
			case 'Doctorate':
				$this->form_validation->set_rules("Doctorate", "Doctorate", "required|callback_valid_doctorate");
				break;
			case 'Other':
				$this->form_validation->set_rules("docOther", "Other", "required|callback_valid_other");
				break;
		}
		if (null != $this->input->post('page_name')) {
			$page = $this->input->post('page_name');
			if (!in_array($page, ['personal_detail', 'address', 'education_detail', 'enlistment_detail', 'present_service_detail', 'basic_training_course_detail', 'professional_course_detail', 'annual_firing_practice', 'permanent_rank'])) {
				$page = 'personal_detail';
			}
		} else {
			$page = 'personal_detail';
		}
		$data['selected_page'] = $page;
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules("clit", "Computer Literate", "required");
		}

		//Enlistment Deatail
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules("tyodu", "Type of Duty", "required|callback_valid_type_of_duty");
			$this->form_validation->set_rules("Modemdr", "Mode of Recruitment", "required|callback_valid_mode_of_recruitment");
			$this->form_validation->set_rules("dateofesnlistment1", "Date of Enlistment", "required|callback_valid_date2|callback_valid_today");
		}
		//$this->form_validation->set_rules("eor", "Enlistment of Rank", "required|callback_valid_enlistment_rank");


		$this->form_validation->set_rules("hrms_code", "HRMS Code", "callback_valid_hrms_code");
		//other 
		if ($Rankre != null) {
			switch ($Rankre) {
				case 'Executive Staff':
					$this->form_validation->set_rules("eor1", "Executive Rank", "required|callback_valid_executive_rank");
					break;
				case 'Ministerial Staff':
					$this->form_validation->set_rules("eor2", "Ministerial Rank", "required|callback_valid_ministerial_rank");
					break;
				case 'Medical Staff':
					$this->form_validation->set_rules("eor3", "Medical Rank", "required|callback_valid_medical_rank");
					break;
				case 'Class-IV (P)':
					$this->form_validation->set_rules("eor4", "Class-IV (P)", "required|callback_valid_class_4_p_rank");
					break;
				case 'Class-IV (C)':
					$this->form_validation->set_rules("eor5", "Class-IV (C)", "required|callback_valid_class_4_c_rank");
					break;
				default:
			}
		}
		//if(!$GO_OFFICER){
		//$this->form_validation->set_rules("Enlistmentec", "Enlistment Category", "required|callback_valid_enlistment_category");
		//$this->form_validation->set_rules("EnlistmentUnit", "Enlistment Unit", "required|callback_valid_enlistment_unit");
		//}
		if ($EnlistmentUnit == 'District') {
			$this->form_validation->set_rules("enutherdistrict", "District", "required|callback_valid_district");
		} elseif ($EnlistmentUnit == 'Other') {
			$this->form_validation->set_rules("enuther", "Other", "required");
		}
		//Present Serviec detail
		$this->form_validation->set_rules("BattalionUnitito", "Battalion/Unit", "required|callback_valid_enlistment_unit");
		if ($BattalionUnitito == 'District') {
			$this->form_validation->set_rules("bunitdistrict", "District", "required");
		}
		$this->form_validation->set_rules("RankRankre", "Category of Post", "required|callback_valid_enlistment_rank");

		if ($RankRankre != null && trim($RankRankre) != '') {
			switch ($RankRankre) {
				case 'Executive Staff':
					$this->form_validation->set_rules("catop1", "Executive Rank", "required|callback_valid_executive_rank");
					$this->form_validation->set_rules("permanent_rank", "Permanent Rank", "required|callback_valid_executive_rank");
					break;
				case 'Ministerial Staff':
					$this->form_validation->set_rules("catop2", "Ministerial Rank", "required|callback_valid_ministerial_rank");
					break;
				case 'Medical Staff':
					$this->form_validation->set_rules("catop3", "Medical Rank", "required|callback_valid_medical_rank");
					break;
				case 'Class-IV (P)':
					$this->form_validation->set_rules("catop4", "Class-IV (P)", "required|callback_valid_class_4_p_rank");
					break;
				case 'Class-IV (C)':
					$this->form_validation->set_rules("catop5", "Class-IV (C)", "required|callback_valid_class_4_c_rank");
					break;
				default:
			}
		}
		if (!$GO_OFFICER)
			$this->form_validation->set_rules("Deptdn", "Department No.", "required|callback_valid_deptno");
		//$this->form_validation->set_rules("orderby", "Permanent Rank", "required");

		//$this->form_validation->set_rules("hno", "House Number", "required");
		//$this->form_validation->set_rules("sno", "Street Number", "required");
		//$this->form_validation->set_rules("vm", "Village Number", "required");
		//$this->form_validation->set_rules("wardno", "Ward Number", "required");
		//$this->form_validation->set_rules("phouseno", "Post Office", "required");
		//Basic Traing course detail validation
		if ($TrainingInstituteti != null && trim($TrainingInstituteti) != '') {
			if ($TrainingInstituteti == 'Other') {
			}
			$this->basic_training_course_validation($TrainingInstituteti);
		}
		//Professional course detail validations
		if (count($TrainingInstitutessti) > 0) {

			foreach ($TrainingInstitutessti as $k => $v) {

				if (trim($v) != '') {
					$this->form_validation->set_rules("TrainingInstitutessti[$k]", "Training Institure", "required");

					if ($v == 'Other') {
						$this->form_validation->set_rules("TrainingInstitutesstiOther[$k]", "Other Training Institute", "required");
					}
					$this->form_validation->set_rules("NamesofsCourses[$k]", 'Course Name', 'required');
					$this->form_validation->set_rules("DurationsofsCourses[$k]", 'Course Start Date', 'required|callback_valid_date2');
					$this->form_validation->set_rules("DurationsofsCoursest[$k]", 'Course End Date', 'required|callback_valid_date2');
				}
			}
		}

		if (trim($NameofsRanges) != '' || trim($dateofprcatice) != '' || trim($tow) != '') {
			$this->form_validation->set_rules("NameofsRanges", "Name of range", "required");
			$this->form_validation->set_rules("dateofprcatice", "Date of Practice", "required");
			$this->form_validation->set_rules("tow", "Firing Weapon", "required");
		}
		/*if(trim($TrainingInstitutessti)!=''){
				$this->form_validation->set_rules("TrainingInstitutessti", "Training Institure", "required");
				if($TrainingInstitutessti=='Other'){
					$this->form_validation->set_rules("TrainingInstitutesstiOther", "Training Institure", "required");
				}
				$this->form_validation->set_rules("TrainingInstitutessti", "Training Institure", "required");
				$this->form_validation->set_rules("TrainingInstitutessti", "Training Institure", "required");
				$this->form_validation->set_rules("TrainingInstitutessti", "Training Institure", "required");
			}*/
		$submit = $this->input->post('submit');
		if ($submit != null and $submit == 'submit') {
			if ($this->form_validation->run()) {

				//echo' hsdfsdf';
				$date = DateTime::createFromFormat('d/m/Y', $dob);
				$dob = $date->format('Y-m-d');

				$date2 = DateTime::createFromFormat('d/m/Y', $dateofesnlistment1);
				$dateofesnlistment1 = $date2->format('Y-m-d');

				$date3 = DateTime::createFromFormat('d/m/Y', $DateofRetirementdor);
				if ($date3 != false) {
					$DateofRetirementdor = $date3->format('Y-m-d');
				} else {
					$DateofRetirementdor = '';
				}

				$date4 = DateTime::createFromFormat('d/m/Y', $DateofRetirementdori);
				if ($date4 != false) {
					$DateofRetirementdori = $date4->format('Y-m-d');
				} else {
					$DateofRetirementdori = '';
				}

				$add_web = $this->Osi_model->add_man(
					$name,
					$fname,
					$hno,
					$sno,
					$vm,
					$wardno,
					$ct,
					$po,
					$ps,
					$tl,
					$state,
					$dis,
					$phouseno,
					$pstreetno,
					$pvillmoh,
					$postcity,
					$pcitypostoff,
					$ppolicestation,
					$ptehsil,
					$postate,
					$pdistrict,
					$presentAddressSameasPermanentAddress,
					$gender,
					$mstatus,
					$dob,
					$casting,
					$catii,
					$conphno,
					$conphnot,
					$pemailid,
					$addarcard,
					$pancard,
					$bankdetail,
					$bankbrach,
					$bankac,
					$ifsccode,
					$bloodgroup,
					$Identificationmark,
					$Kg,
					$Gm,
					$Feet,
					$inch,
					$stts,
					$UnderGraduate,
					$Graduate,
					$PostGraduate,
					$Doctorate,
					$docOther,
					$Modemdr,
					$mocOther,
					$dateofesnlistment1,
					$Rankre,
					$eor1,
					$eor2,
					$eor3,
					$eor4,
					$eor5,
					$Enlistmentec,
					$EnlistmentUnit,
					$enOther,
					$DateofRetirementdor,
					$gpfPRAN,
					$PRAN,
					$hrms_code,
					$BattalionUnitito,
					$RankRankre,
					$catop1,
					$permanent_rank,
					$catop2,
					$catop3,
					$catop4,
					$catop5,
					$Deptdn,
					$iIdentityCardNocn,
					$InductionRankir,
					$catofind1,
					$catofind2,
					$catofind3,
					$catofind4,
					$catofind5,
					$InductionModeim,
					$indictiondate,
					$PreviousBatalionito,
					$PreviousNoprnOther,
					$PreviousNoprn,
					$DateOFPromotionDetails21,
					$DateOFPromotionDetails23,
					$DateOFPromotionDetails24,
					$DateOFPromotionDetails25,
					$DateOFPromotionDetails26,
					$DateOFPromotionDetails27,
					$DateOFPromotionDetails28,
					$DateOFPromotionDetails29,
					$DateOFPromotionDetails30,
					$DateOFPromotionDetails31,
					$DateOFPromotionDetails32,
					$DateOFPromotionDetails33,
					$DateOFPromotionDetails34,
					$LowerSchoolCourseDate35,
					$DateOFPromotionDetails35,
					$TrainingInstituteti,
					$Batchbn,
					$batchpassdate,
					$TrainingInstitutessti,
					$TrainingInstitutesstiOther,
					$NamesofsCourses,
					$DurationsofsCourses,
					$DurationsofsCoursest,
					$NameofsRanges,
					$dateofprcatice,
					$tow,
					$tyodu,
					$Nationality,
					$nstate,
					$clit,
					$DateofRetirementdori,
					$orderby,
					$cnody,
					$enutherdistrict,
					$bunitdistrict,
					$gd1,
					$bd1
				);
				//var_dump($add_web);
				if ($add_web == 1) {
					$this->session->set_flashdata('success_msg', 'New Employee has been	 added succesfully !');
					redirect('bt-add-manpower');
				} else {
					$this->session->set_flashdata('error_msg', 'Employee Information has not added.');
					redirect('bt-add-manpower');
				}
			} else {
				//echo validation_errors();
				$pagesErrorCounter = [
					'personal_detail' => 0,
					'address' => 0,
					'education_detail' => 0,
					'enlistment_detail' => 0,
					'present_service_detail' => 0,
					'basic_training_course_detail' => 0,
					'professional_course_detail' => 0,
					'annual_firing_practice' => 0,
					'permanent_rank' => 0,
				];
				$pages = [
					'personal_detail' => [
						'name',
						'fname',
						'gender',
						'mstatus',
						'dob',
						'casting',
						'catii',
						'conphno',
						'bloodgroup',
						'Feet',
						'inch',
					],
					'address' => [
						//'hno',
						//'sno',
						//'vm',
						//'wardno',
						'po',
						'ps',
						'nat',
						'state',
						/*'tl',
							
							//'snat',	//type state
							
							'dis',
							
							'peradd',
							'phouseno',
							'pstreetno',
							'pvillmoh',
							'postcity',
							'pcitypostoff',
							'ppolicestation',
							'ptehsil',*/
						'postate',
						'pdistrict'
					],
					'education_detail' => [
						'stts',
						'clit',
					],
					'enlistment_detail' => [
						'tyodu',
						'Modemdr',
						'dateofesnlistment1',
						'eor',
						'Enlistmentec',
						'EnlistmentUnit',
						'hrms_code'
					],
					'present_service_detail' => [
						'BattalionUnitito',
						'RankRankre',
						'Deptdn',
						'catop1',
						'permanent_rank'
					],
					'basic_training_course_detail' => [],
					'professional_course_detail' => [],
					'annual_firing_practice' => [],
					'permanent_rank' => [
						//'orderby'
					],
				];
				//Annual Firing practice
				if (trim($NameofsRanges) != '' || trim($dateofprcatice) != '' || trim($tow) != '') {
					$pages['annual_firing_practice'][] = 'NameofsRanges';
					$pages['annual_firing_practice'][] = 'dateofprcatice';
					$pages['annual_firing_practice'][] = 'tow';
				}
				//Professional course detail
				if (count($TrainingInstitutessti) > 0) {
					foreach ($TrainingInstitutessti as $k => $v) {
						if (trim($v) != '') {
							//$this->form_validation->set_rules("TrainingInstitutessti[$k]", "Training Institure", "required");
							if ($v == 'Other') {
								$pages['professional_course_detail'][] = "TrainingInstitutesstiOther[$k]";
							}
							$pages['professional_course_detail'][] = "TrainingInstitutessti[$k]";
							$pages['professional_course_detail'][] = "NamesofsCourses[$k]";
							$pages['professional_course_detail'][] = "DurationsofsCourses[$k]";
							$pages['professional_course_detail'][] = "DurationsofsCoursest[$k]";
						}
					}
				}
				//basic traing course detail validation
				if ($TrainingInstituteti != null && trim($TrainingInstituteti) != '') {
					/*if($TrainingInstituteti=='Other'){
							$pages['basic_training_course_detail'][]='Othertraining';
						}*/
					$pages['basic_training_course_detail'][] = 'TrainingInstituteti';
					if ($TrainingInstituteti == 'Other') {
						$pages['basic_training_course_detail'][] = 'Othertraining';
					}
					if (!in_array($TrainingInstituteti, ['Deferred Basic Training Sports Person', 'Deferred basic training Medical Rest'])) {
						$pages['basic_training_course_detail'][] = 'Batchbn';
						$pages['basic_training_course_detail'][] = 'batchpassdate';
					}
				}
				//echo $Nationality;
				if ($Nationality == 'Nepal') {
					$pages['address'][] = 'snat';
				} elseif ($Nationality == 'Indian') {
					$pages['address'][] = 'state';
				}
				if (null == $presentAddressSameasPermanentAddress || $presentAddressSameasPermanentAddress == 'no') {
					$pages['address'][] = 'pcitypostoff';
					$pages['address'][] = 'ppolicestation';
				}
				switch ($stts) {
					case 'Under Graduate':
						$pages['education_detail'][] = 'UnderGraduate';
						break;
					case 'Graduate':
						$pages['education_detail'][] = 'Graduate';
						break;
					case 'Post Graduate':
						$pages['education_detail'][] = 'PostGraduate';
						break;
					case 'Doctorate':
						$pages['education_detail'][] = 'Doctorate';
						break;
					case 'Other':
						$pages['education_detail'][] = 'docOther';
						break;
				}
				//enlistment detail
				if ($Rankre != null) {
					switch ($Rankre) {
						case 'Executive Staff':
							$pages['enlistment_detail'][] = 'eor1';
							break;
						case 'Ministerial Staff':
							$pages['enlistment_detail'][] = 'eor2';
							break;
						case 'Medical Staff':
							$pages['enlistment_detail'][] = 'eor3';
							break;
						case 'Class-IV (P)':
							$pages['enlistment_detail'][] = 'eor4';
							break;
						case 'Class-IV (C)':
							$pages['enlistment_detail'][] = 'eor5';
							break;
						default:
							break;
					}
				}
				if ($EnlistmentUnit == 'District') {
					$pages['enlistment_detail'][] = 'enutherdistrict';
				} elseif ($EnlistmentUnit == 'Other') {
					$pages['enlistment_detail'][] = 'enuther';
				}
				if ($BattalionUnitito == 'District') {
					$pages['present_service_detail'][] = 'bunitdistrict';
				}
				foreach ($pages as $page_name => $fields) {
					foreach ($fields as $k => $field_name) {
						if (form_error($field_name) != null) {
							$pagesErrorCounter[$page_name]++;
						}
					}
				}

				$data['pageErrorCounter'] = $pagesErrorCounter;
				/*$name = $this->input->post("name",TRUE);
					$fname = $this->input->post("fname",TRUE);
					$hno = $this->input->post("hno",TRUE);
					$sno = $this->input->post("sno",TRUE);
					$vm = $this->input->post("vm",TRUE);
					$wardno = $this->input->post("wardno",TRUE);
					$ct = $this->input->post("ct",TRUE);
					$po = $this->input->post("po",TRUE);
					$ps = $this->input->post("ps",TRUE);
					$tl = $this->input->post("tl",TRUE);
					$state = $this->input->post("state",TRUE);
					$dis = $this->input->post("dis",TRUE);*/
			}
		}
		$data['weapon'] = $this->Btalion_model->weaponlist();
		$data['statelist'] = $this->Osi_model->getStates(array('state_status' => 1));


		if ($this->input->post('page_name') != null) {
			$data['selected_page'] = $this->input->post('page_name');
		} else {
			$data['selected_page'] = 'personal_detail';
		}
		$this->load->view('Osi/manpowermaster', $data);
	}/*Close*/

	public function validateWholeForm(&$pagesErrorCounter, $body, $current_page = '', $excluded_page = '')
	{
		//echo '<h1>Validate Whole Form</h1>';
		//echo '<b>'.$excluded_page.'</b>';

		if (!isset($this->units)) {
			$this->units = $data['uname'] = $this->Btalion_model->fetchinfo('users', array('user_log' => 4));
		}
		//$this->form_validation->reset_validation();
		//echo $current_page;
		//var_dump($body);
		$data = [
			'personal_detail' => [
				'name'		=> $body->name,
				'fname'		=> $body->fathername,
				'gender'	=> $body->gender,
				'mstatus'	=> $body->maritalstatus,
				'dob'		=> $body->dateofbith,
				'casting'	=> $body->caste,
				'catii'		=> $body->category,
				'conphno'	=> $body->phono1,
				//'conphnot'	=> $body->phono2,
				//'pemailid'	=> $body->email,
				'addarcard'	=> $body->adharno,
				'pancard'	=> $body->pan,
				'bankdetail' => $body->nameofbank,
				'bankbrach'	=> $body->nameofbranch,
				'bankac'	=> $body->bankacno,
				'ifsccode'	=> $body->ifsccode,
				'bloodgroup' => $body->bloodgroup,
				'Identificationmark' => $body->identificationmark,
				'Kg' => $body->Kg,
				'Gm' => $body->Gm,
				'Feet' => $body->feet,
				'inch' => $body->inch,
			],
			'address' => [
				//'hno'=>$body->houseno,
				//'sno'=>$body->streetno,
				//'vm'=>$body->villmohala,
				//'wardno'=>$body->wardno,
				'po' => $body->postoffice,
				'ps' => $body->policestation,
				//'tl'=>$body->teshil,
				'state' => $body->state,
				'dis' => $body->district,
				'nat' => $body->Nationality,
				//'peradd'=>$body->
				//'phouseno'=>$body->phouse,
				//'pstreetno'=>$body->pstreet,
				//'pwardno'=>$body->pward,
				//'pvillmoh'=>$body->pvillmohala,
				//'postcity'=>$body->pcity,
				'pcitypostoff' => $body->ppostoffice,
				'ppolicestation' => $body->ppolicestation,
				//'ptehsil'=>$body->ptehsil,
				'postate' => $body->pstate,
				'pdistrict' => $body->pdistrict,
			],
			'education_detail' => [
				'stts' => $body->eduqalification,
				'UnderGraduate' => $body->UnderGraduate,
				'Graduate' => $body->Graduate,
				'PostGraduate' => $body->PostGraduate,
				'Doctorate' => $body->Doctorate,
				//'Doctorateother' => $body->Doctorateother,
				'docOther' => $body->Doctorateother,
				'clit' => $body->comlit,
			],
			'enlistment_detail' => [
				'tyodu' => $body->typeofduty,
				'Modemdr' => $body->modeofrec,
				//'othermodeofrec' => $mocOther,
				'dateofesnlistment1' => $body->dateofinlitment,
				'eor' => $body->rankofenlistment,
				'eor1' => $body->eexrank,
				'eor2' => $body->eminirank,
				'eor3' => $body->emedirank,
				'eor4' => $body->ecprank,
				'eor5' => $body->eccrank,
				'Enlistmentec' => $body->enlistmentcat,
				'EnlistmentUnit' => $body->EnlistmentUnit,
				'enutherdistrict' => $body->enutherdistrict,
				'enuther' => $body->enutherdistrict,
				'DateofRetirementdor' => $body->dateofretirment,
				//'DateofRetirementdori' => $body->dateofretirment2,
				//'gpfPRAN' => $body->gpfpranno,
				//'PRAN' => $body->PRAN,
			],
			'present_service_detail' => [
				'BattalionUnitito' => $body->BattalionUnitito,
				'RankRankre' => $body->presentrank,
				'iIdentityCardNocn' => $body->iIdentityCardNocn,
				'Deptdn' => $body->depttno,
			],
			/*'basic_training_course_detail'=>[],
				'professional_course_detail'=>[],
				'annual_firing_practice'=>[],
				'permanent_rank'=>[]*/
		];
		//Basice Trainging courser
		$data['basic_training_course_detail'] = ['TrainingInstituteti' => $body->btic];

		if ($body->btic == 'Other') {
			$data['basic_training_course_detail']['Othertraining'] = $body->Othertraining;
		}
		if (!in_array($body->btic, ['Deferred Basic Training Sports Person', 'Deferred basic training Medical Rest'])) {
			$data['basic_training_course_detail']['Batchbn'] = $body->batchgroup;
			$data['basic_training_course_detail']['batchpassdate'] = $body->passoutyear;
		}




		//die;

		//$data['professional_course_detail']['TrainingInstituteti']=$body->TrainingInstituteti;
		//$data['professional_course_detail']['']=$body->TrainingInstituteti;
		//$data['professional_course_detail']['TrainingInstituteti']=$body->TrainingInstituteti;

		//if($body->TrainingInstituteti=='Other'){
		//$data['professional_course_detail']['Othertraining'] = $body->Othertraining;

		//}
		//address
		if (
			($body->houseno == $body->phouse)
			&& ($body->streetno == $body->pstreet)
			&& ($body->villmohala == $body->pvillmohala)
			&& ($body->wardno == $body->pward)
			&& ($body->postoffice == $body->ppostoffice)
			&& ($body->policestation == $body->ppolicestation)
			&& ($body->teshil == $body->ptehsil)
			&& ($body->state == $body->pstate)
			&& ($body->district == $body->pdistrict)
		) {
			$sameAsPermanentAddress = true;
		} else {
			$sameAsPermanentAddress = false;
		}

		if ($body->eduqalification == 'Other') {
			$data['education_detail']['docOther'] = $body->Doctorateother;
		}

		//present service detail
		if ($body->BattalionUnitito == 'District') {
			$data['present_service_detail'][] = 'bunitdistrict';
		}

		switch ($body->presentrank) {
			case 'Executive Staff':
				$data['present_service_detail'][] = 'eor1';
				break;
			case 'Ministerial Staff':
				$data['present_service_detail'][] = 'eor2';
				break;
			case 'Medical Staff':
				$data['present_service_detail'][] = 'eor3';
				break;
			case 'Class-IV (P)':
				$data['present_service_detail'][] = 'eor4';
				break;
			case 'Class-IV (C)':
				$data['present_service_detail'][] = 'eor5';
				break;
			default:
		}

		switch ($body->presentrank) {
			case 'Executive Staff':
				$data['present_service_detail']['catop1'] = $body->cexrank;
				break;
			case 'Ministerial Staff':
				$data['present_service_detail']['catop2'] = $body->cminirank;
				break;
			case 'Medical Staff':
				$data['present_service_detail']['catop3'] = $body->cmedirank;
				break;
			case 'Class-IV (P)':
				$data['present_service_detail']['catop4'] = $body->ccprank;
				break;
			case 'Class-IV (C)':
				$data['present_service_detail']['catop5'] = $body->cccrank;
				break;
			default:
		}

		//$this->form_validation->set_rules("Deptdn", "Department No.", "required");
		//$this->form_validation->set_rules("iIdentityCardNocn", "Identity Card No.", "required");
		//var_dump($data[$current_page]);
		//$this->form_validation->reset_validation();

		if ($excluded_page != 'personal_detail') {

			$this->form_validation->set_data($data['personal_detail']);
			//var_dump($data['personal_detail']);
			$this->personal_detail_validations();
			if (!$this->form_validation->run()) {

				//var_dump($this->form_validation->error_array());

				//echo '<h1>'.$pagesErrorCounter['personal_detail'].'</h1>';;
				$pagesErrorCounter['personal_detail'] = count($this->form_validation->error_array());
			}
			//echo '<h2>'.$pagesErrorCounter['personal_detail'].'</h2>';;
			//var_dump($pagesErrorCounter['personal_detail']);
		}
		//$this->form_validation->reset_validation();
		if ($excluded_page != 'address') {
			$this->form_validation->set_data($data['address']);
			$this->address_validations($sameAsPermanentAddress);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['address'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'];
			}
		}
		//echo '<h1>'.$pagesErrorCounter['address'].'</h1>';

		if ($excluded_page != 'education_detail') {
			//$this->form_validation->reset_validation();
			$this->form_validation->set_data($data['education_detail']);
			//var_dump($body->Doctorate);
			//var_dump($body->eduqalification);
			$this->education_detail_validations($body->eduqalification, $body->Doctorate);
			if (!$this->form_validation->run()) {

				$pagesErrorCounter['education_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'];
			}
			//echo '<h1>'.$pagesErrorCounter['education_detail'].'</h1>';
		}

		if ($excluded_page != 'enlistment_detail') {
			//$this->form_validation->reset_validation();

			$this->form_validation->set_data($data['enlistment_detail']);
			$this->enlistment_detail_validations($body->modeofrec, $body->rankofenlistment, $body->EnlistmentUnit);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['enlistment_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'];
			}
			//echo '<h1>'.$pagesErrorCounter['enlistment_details'].'</h1>';
		}

		if ($excluded_page != 'present_service_detail') {
			//$this->form_validation->reset_validation();
			$this->form_validation->set_data($data['present_service_detail']);
			$this->presentservice_detail_validation($body->bunitdistrict, $body->presentrank, $body->Doctorate);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['present_service_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'];
			}
			//echo '<h1>'.$pagesErrorCounter['enlistment_details'].'</h1>';
		}
		//$this->form_validation->reset_validation();
		/* if($excluded_page!='basic_training_course_detail'){
				//$this->form_validation->reset_validation();
				//echo 'basic_training_course_detail';
				$this->form_validation->set_data($data['basic_training_course_detail']);
				//echo "'".$body->btic;
				$this->basic_training_course_validation($body->btic);
				if(!$this->form_validation->run()){
					$pagesErrorCounter['basic_training_course_detail']=count($this->form_validation->error_array())-$pagesErrorCounter['personal_detail']-$pagesErrorCounter['address']-$pagesErrorCounter['education_detail']-$pagesErrorCounter['enlistment_detail']-$pagesErrorCounter['present_service_detail'];
				}
				//echo '<h1>'.$pagesErrorCounter['enlistment_details'].'</h1>';
			} */
		if ($excluded_page != 'basic_training_course_detail') {
			//echo 'hi';
			//$this->form_validation->reset_validation();
			//echo 'basic_training_course_detail';
			if (trim($body->btic) != '' || trim($body->batchgroup) != '' || trim($body->passoutyear) != '') {
				$this->form_validation->set_data($data['basic_training_course_detail']);
				//echo "'".$body->btic;
				$this->basic_training_course_validation($body->btic);
				if (!$this->form_validation->run()) {
					$pagesErrorCounter['basic_training_course_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'];
				}
			}
			//echo '<h1>'.$pagesErrorCounter['enlistment_details'].'</h1>';
		}
		if ($excluded_page != 'professional_course_detail') {
			if (trim($body->TrainingInstitutessti) != '' && trim($body->TrainingInstitutesstiOther) != '' &&	trim($body->NamesofsCourses) != '' && trim($body->DurationsofsCourses) != '' &&	trim($body->DurationsofsCoursest) != '') {

				$pcd_training_institutes = explode('@', $body->TrainingInstitutessti);

				$pcd_training_institute_others = explode('@', $body->TrainingInstitutesstiOther);
				$pcd_NamesofsCourses = explode('@', $body->NamesofsCourses);
				$pcd_DurationsofsCourses = explode('@', $body->DurationsofsCourses);
				$pcd_DurationsofsCoursest = explode('@', $body->DurationsofsCoursest);
				$pcd = [
					'TrainingInstitutessti' => $pcd_training_institutes,
					'NamesofsCourses' => $pcd_NamesofsCourses,
					'DurationsofsCourses' => $pcd_DurationsofsCourses,
					'DurationsofsCoursest' => $pcd_DurationsofsCoursest,
				];
				$this->form_validation->set_data($pcd);
				$this->professional_course_detail_validation($pcd_training_institutes);
				if (!$this->form_validation->run()) {
					$pagesErrorCounter['professional_course_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'];
					//echo $pagesErrorCounter['professional_course_detail'];
				}
			}
		}
	}
	public function validateFormAfterSubmit(&$pagesErrorCounter, $body, $excluded_page = '')
	{
		//echo '<h1>Validate Whole Form</h1>';
		//echo '<b>'.$excluded_page.'</b>';
		//var_dump($body);
		if (!isset($this->units)) {
			$this->units = $data['uname'] = $this->Btalion_model->fetchinfo('users', array('user_log' => 4));
		}
		//$this->form_validation->reset_validation();
		//echo $current_page;
		//var_dump($body);
		$data = [
			'personal_detail' => [
				'name'		=> $body->name,
				'fname'		=> $body->fathername,
				'gender'	=> $body->gender,
				'mstatus'	=> $body->maritalstatus,
				'dob'		=> $body->dateofbith,
				'casting'	=> $body->caste,
				'catii'		=> $body->category,
				'conphno'	=> $body->phono1,
				//'conphnot'	=> $body->phono2,
				//'pemailid'	=> $body->email,
				'addarcard'	=> $body->adharno,
				'pancard'	=> $body->pan,
				'bankdetail' => $body->nameofbank,
				'bankbrach'	=> $body->nameofbranch,
				'bankac'	=> $body->bankacno,
				'ifsccode'	=> $body->ifsccode,
				'bloodgroup' => $body->bloodgroup,
				'Identificationmark' => $body->identificationmark,
				'Kg' => $body->Kg,
				'Gm' => $body->Gm,
				'Feet' => $body->feet,
				'inch' => $body->inch,
			],
			'address' => [
				//'hno'=>$body->houseno,
				//'sno'=>$body->streetno,
				//'vm'=>$body->villmohala,
				//'wardno'=>$body->wardno,
				'po' => $body->postoffice,
				'ps' => $body->policestation,
				//'tl'=>$body->teshil,
				'state' => $body->state,
				'dis' => $body->district,
				'nat' => $body->Nationality,
				//'peradd'=>$body->
				//'phouseno'=>$body->phouse,
				//'pstreetno'=>$body->pstreet,
				//'pwardno'=>$body->pward,
				//'pvillmoh'=>$body->pvillmohala,
				//'postcity'=>$body->pcity,
				'pcitypostoff' => $body->ppostoffice,
				'ppolicestation' => $body->ppolicestation,
				//'ptehsil'=>$body->ptehsil,
				'postate' => $body->pstate,
				'pdistrict' => $body->pdistrict,
			],
			'education_detail' => [
				'stts' => $body->eduqalification,
				'UnderGraduate' => $body->UnderGraduate,
				'Graduate' => $body->Graduate,
				'PostGraduate' => $body->PostGraduate,
				'Doctorate' => $body->Doctorate,
				//'Doctorateother' => $body->Doctorateother,
				'clit' => $body->comlit,
			],
			'enlistment_detail' => [
				'tyodu' => $body->typeofduty,
				'Modemdr' => $body->modeofrec,
				//'othermodeofrec' => $mocOther,
				'dateofesnlistment1' => $body->dateofinlitment,
				'eor' => $body->rankofenlistment,
				'eor1' => $body->eexrank,
				'eor2' => $body->eminirank,
				'eor3' => $body->emedirank,
				'eor4' => $body->ecprank,
				'eor5' => $body->eccrank,
				'Enlistmentec' => $body->enlistmentcat,
				'EnlistmentUnit' => $body->EnlistmentUnit,
				'enutherdistrict' => $body->enutherdistrict,
				'DateofRetirementdor' => $body->dateofretirment,
				///'DateofRetirementdori' => $body->dateofretirment2,
				//'gpfPRAN' => $body->gpfpranno,
				//'PRAN' => $body->PRAN,
			],
			'present_service_detail' => [
				'BattalionUnitito' => $body->BattalionUnitito,
				'RankRankre' => $body->presentrank,
				'iIdentityCardNocn' => $body->iIdentityCardNocn,
				'Deptdn' => $body->depttno,
			],
			//'basic_training_course_detail'=>[],
			//'professional_course_detail'=>[],
			'annual_firing_practice' => [],
			//'permanent_rank'=>[]
		];
		//Professional course detail
		//PENDING

		$data['professional_course_detail'] = [];
		//Basice Trainging courser
		$data['basic_training_course_detail'] = [
			'TrainingInstituteti' => $body->btic,
			'Batchbn' => $body->batchgroup,
			'batchpassdate' => $body->passoutyear,
			'Othertraining' => $body->Othertraining

		];
		//address
		if ($this->input->post('peradd') == 'yes') {
			$sameAsPermanentAddress = true;
		} elseif ($this->input->post('peradd') == 'no') {
			$sameAsPermanentAddress = false;
		} else {
			if (
				($body->houseno == $body->phouse)
				&& ($body->streetno == $body->pstreet)
				&& ($body->villmohala == $body->pvillmohala)
				&& ($body->wardno == $body->pward)
				&& ($body->postoffice == $body->ppostoffice)
				&& ($body->policestation == $body->ppolicestation)
				&& ($body->teshil == $body->ptehsil)
				&& ($body->state == $body->pstate)
				&& ($body->district == $body->pdistrict)
			) {
				$sameAsPermanentAddress = true;
			} else {
				$sameAsPermanentAddress = false;
			}
		}
		//address
		$data[$excluded_page] = [];

		//present service detail
		if ($body->BattalionUnitito == 'District') {
			$data['present_service_detail'][] = 'bunitdistrict';
		}

		/*switch($body->presentrank){
				case 'Executive Staff':
					$data['present_service_detail'][]='eor1';
					break;
				case 'Ministerial Staff':
					$data['present_service_detail'][]='eor2';
					break;
				case 'Medical Staff':
					$data['present_service_detail'][]='eor3';
					break;
				case 'Class-IV (P)':
					$data['present_service_detail'][]='eor4';
					break;
				case 'Class-IV (C)':
					$data['present_service_detail'][]='eor5';
					break;
				default:
			}*/

		switch ($body->presentrank) {
			case 'Executive Staff':
				$data['present_service_detail']['catop1'] = $body->cexrank;
				break;
			case 'Ministerial Staff':
				$data['present_service_detail']['catop2'] = $body->cminirank;
				break;
			case 'Medical Staff':
				$data['present_service_detail']['catop3'] = $body->cmedirank;
				break;
			case 'Class-IV (P)':
				$data['present_service_detail']['catop4'] = $body->ccprank;
				break;
			case 'Class-IV (C)':
				$data['present_service_detail']['catop5'] = $body->cccrank;
				break;
			default:
		}

		//$this->form_validation->set_rules("Deptdn", "Department No.", "required");
		//$this->form_validation->set_rules("iIdentityCardNocn", "Identity Card No.", "required");
		//var_dump($data[$current_page]);
		//$this->form_validation->reset_validation();

		if ($excluded_page != 'personal_detail') {
			$this->form_validation->set_data($data['personal_detail']);
			$this->personal_detail_validations();
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['personal_detail'] = count($this->form_validation->error_array());
			}
			//echo '<h2>'.$pagesErrorCounter['personal_detail'].'</h2>';;
			//var_dump($pagesErrorCounter['personal_detail']);
		} else {
			$this->form_validation->set_data($this->input->post());
			$this->personal_detail_validations();
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['personal_detail'] = count($this->form_validation->error_array());
			}
		}
		//$this->form_validation->reset_validation();
		if ($excluded_page != 'address') {
			$this->form_validation->set_data($data['address']);
			$this->address_validations($sameAsPermanentAddress);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['address'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'];
			}
		} else {
			$this->form_validation->set_data($this->input->post());
			$this->address_validations($sameAsPermanentAddress);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['address'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'];
			}
		}
		//echo '<h1>'.$pagesErrorCounter['address'].'</h1>';
		if ($excluded_page != 'education_detail') {
			//$this->form_validation->reset_validation();
			$this->form_validation->set_data($data['education_detail']);
			//var_dump($body->Doctorate);
			//var_dump($body->eduqalification);
			$this->education_detail_validations($body->eduqalification, $body->Doctorate);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['education_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'];
			}
			//echo '<h1>'.$pagesErrorCounter['education_detail'].'</h1>';
		} else {
			//$this->form_validation->reset_validation();
			$this->form_validation->set_data($this->input->post());
			if (null != $this->input->post('stts')) {
				$eduqalification  = $this->input->post('stts');
			} else {
				$eduqalification = '';
			}
			if (null != $this->input->post('Doctorate')) {
				$doctorate = $this->input->post('Doctorate');
			} else {
				$doctorate =  '';
			}
			$this->education_detail_validations($eduqalification, $doctorate);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['education_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'];
			}
			//echo '<h1>'.$pagesErrorCounter['education_detail'].'</h1>';
		}
		if ($excluded_page != 'enlistment_detail') {
			//$this->form_validation->reset_validation();

			$this->form_validation->set_data($data['enlistment_detail']);
			$this->enlistment_detail_validations($body->modeofrec, $body->rankofenlistment, $body->EnlistmentUnit);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['enlistment_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'];
			}
			//echo '<h1>'.$pagesErrorCounter['enlistment_details'].'</h1>';
		} else {
			$this->form_validation->set_data($this->input->post());
			if (null != $this->input->post('Modemdr') && $this->input->post('Modemdr')) {
				$modeofrec = $this->input->post('Modemdr');
			} else {
				$modeofrec = '';
			}
			if (null != $this->input->post('ero') && $this->input->post('ero')) {
				$rankofenlistment = $this->input->post('ero');
			} else {
				$rankofenlistment = '';
			}
			if (null != $this->input->post('EnlistmentUnit') && $this->input->post('EnlistmentUnit')) {
				$EnlistmentUnit = $this->input->post('EnlistmentUnit');
			} else {
				$EnlistmentUnit = '';
			}
			$this->enlistment_detail_validations($modeofrec, $rankofenlistment, $EnlistmentUnit);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['enlistment_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'];
			}
		}
		if ($excluded_page != 'present_service_detail') {
			//$this->form_validation->reset_validation();
			$this->form_validation->set_data($data['present_service_detail']);
			$this->presentservice_detail_validation($body->bunitdistrict, $body->presentrank, $body->Doctorate);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['present_service_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'];
			}
			//echo '<h1>'.$pagesErrorCounter['enlistment_details'].'</h1>';
		} else {
			$this->form_validation->set_data($this->input->post());
			$bunitdistrict = $this->input->post('bunitdistrict');
			$presentrank = $this->input->post('RankRankre');

			$this->presentservice_detail_validation($bunitdistrict, $presentrank);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['present_service_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'];
			}
		}
		//echo $excluded_page;
		//$this->form_validation->reset_validation();
		if ($excluded_page != 'basic_training_course_detail') {
			$this->form_validation->set_data($data['basic_training_course_detail']);
			$this->basic_training_course_validation($data['basic_training_course_detail']['TrainingInstituteti']);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['basic_training_course_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'];
			}
		} else {
			$this->form_validation->set_data($this->input->post());
			$TrainingInstituteti = $this->input->post('TrainingInstituteti');
			$this->basic_training_course_validation($TrainingInstituteti);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['basic_training_course_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'];
			}
		}
		//$this->form_validation->reset_validation();

		if ($excluded_page != 'professional_course_detail') {
			//echo 'hi';
			$pcd_training_institutes = explode('@', $body->TrainingInstitutessti);

			$pcd_training_institute_others = explode('@', $body->TrainingInstitutesstiOther);
			$pcd_NamesofsCourses = explode('@', $body->NamesofsCourses);
			$pcd_DurationsofsCourses = explode('@', $body->DurationsofsCourses);
			$pcd_DurationsofsCoursest = explode('@', $body->DurationsofsCoursest);


			$pcd = [
				'TrainingInstitutessti' => $pcd_training_institutes,
				'NamesofsCourses' => $pcd_NamesofsCourses,
				'DurationsofsCourses' => $pcd_DurationsofsCourses,
				'DurationsofsCoursest' => $pcd_DurationsofsCoursest,
			];
			//var_dump($pcd);
			$this->form_validation->set_data($pcd);

			$this->professional_course_detail_validation($body->TrainingInstitutessti);
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['professional_course_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'];
			}
		} else {
			//echo 'bi';
			//var_dump($pagesErrorCounter);
			$this->form_validation->set_data($this->input->post());

			$this->professional_course_detail_validation($this->input->post('TrainingInstitutessti'));
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['professional_course_detail'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'];
			}
		}

		if ($excluded_page != 'annual_firing_practice') {

			$this->form_validation->set_data($data['annual_firing_practice']);
			$this->form_validation->set_rules("NameofsRanges", "NameofsRanges", "required");
			$this->form_validation->set_rules("dateofprcatice", "dateofprcatice", "required");
			$this->form_validation->set_rules("tow", "tow", "required");
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['annual_firing_practice'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'] - $pagesErrorCounter['professional_course_detail'];
			}
		} else {
			$this->form_validation->set_data($this->input->post());

			$this->form_validation->set_rules("NameofsRanges", "NameofsRanges", "required");
			$this->form_validation->set_rules("dateofprcatice", "dateofprcatice", "required");
			$this->form_validation->set_rules("tow", "tow", "required");
			if (!$this->form_validation->run()) {
				$pagesErrorCounter['annual_firing_practice'] = count($this->form_validation->error_array()) - $pagesErrorCounter['personal_detail'] - $pagesErrorCounter['address'] - $pagesErrorCounter['education_detail'] - $pagesErrorCounter['enlistment_detail'] - $pagesErrorCounter['present_service_detail'] - $pagesErrorCounter['basic_training_course_detail'] - $pagesErrorCounter['professional_course_detail'];
			}
		}
	}
	public function professional_course_detail_validation($TrainingInstitutessti)
	{
		//var_dump($TrainingInstitutessti);
		if (is_array($TrainingInstitutessti) && count($TrainingInstitutessti) > 0) {
			foreach ($TrainingInstitutessti as $k => $pcd) {
				$this->form_validation->set_rules("TrainingInstitutessti[$k]", "TrainingInstitutessti", "required");
				if ($TrainingInstitutessti[$k] == 'Other') {
					$this->form_validation->set_rules("TrainingInstitutesstiOther[$k]", "TrainingInstitutesstiOther", "required");
				}
				$this->form_validation->set_rules("NamesofsCourses[$k]", "NamesofsCourses", "required");
				//$this->form_validation->set_rules("batchpassdate[$k]", "batchpassdate11", "required");
				$this->form_validation->set_rules("DurationsofsCourses[$k]", "Durations of Start Courses", "required|callback_valid_date2");
				$this->form_validation->set_rules("DurationsofsCoursest[$k]", "DurationsofsCoursest", "required|callback_valid_date2");
			}
		}
	}
	public function annual_firing_practice_validation()
	{
		$this->form_validation->set_rules("NameofsRanges", "NameofsRanges", "required");
		$this->form_validation->set_rules("dateofprcatice", "dateofprcatice", "required");
		$this->form_validation->set_rules("tow", "Firing Weapon", "required");
	}

	public function basic_training_course_validation($TrainingInstituteti = '')
	{
		$this->form_validation->set_rules("TrainingInstituteti", "Training Institute", "required");
		if ($TrainingInstituteti == 'Other') {
			$this->form_validation->set_rules("Othertraining", "Other Training Institute", "required");
		}
		if (!in_array($TrainingInstituteti, ['Deferred Basic Training Sports Person', 'Deferred basic training Medical Rest'])) {
			$this->form_validation->set_rules("Batchbn", "Batch Group", "required");
			$this->form_validation->set_rules("batchpassdate", "Basic Passout year", "required");
		}
	}
	public function personal_detail_validations($GO_OFFICER = false)
	{ //	Deptdn
		//echo ('<b>Personal DEtail validation</b>');
		$this->form_validation->set_rules("name", "Name", "required");
		$this->form_validation->set_rules("fname", "Father Name", "required");
		$this->form_validation->set_rules("gender", "Gender", "required|callback_valid_gender");
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules("mstatus", "Maritial Status", "required|callback_valid_maritial_status");
			$this->form_validation->set_rules("catii", "Category", "required|callback_valid_category");
			$this->form_validation->set_rules("Feet", "Feet", "required|numeric");
			$this->form_validation->set_rules("inch", "Inch", "required|numeric");
			$this->form_validation->set_rules("Kg", "KG", "numeric");
			$this->form_validation->set_rules("Gm", "GM", "numeric");
		}
		$this->form_validation->set_rules("dob", "Date of Birth", "required|callback_valid_date2|callback_valid_DOB");
		//$this->form_validation->set_rules("casting", "Caste", "required");

		//Contact Detail
		$this->form_validation->set_rules("conphno", "Contact Number 1", "required|numeric");
		//$this->form_validation->set_rules("conphnot", "Contact Number 2", "required");
		$this->form_validation->set_rules("pemailid", "Email", "valid_email");
		//$this->form_validation->set_rules("addarcard", "Adhaar Card", "");
		//$this->form_validation->set_rules("pancard", "PAN Card", "");
		//bank detail
		$this->form_validation->set_rules("bankdetail", "Bank Name", "");
		$this->form_validation->set_rules("bankbrach", "Branch Address", "");
		$this->form_validation->set_rules("bankac", "Account Number", "");
		$this->form_validation->set_rules("ifsccode", "IFSC Code", "");
		//Physical Detail = 
		$this->form_validation->set_rules("bloodgroup", "Blood Group", "required|callback_valid_bloodgroup");
		$this->form_validation->set_rules("Identificationmark", "Identification Mark", "");
		$this->form_validation->set_rules("Kg", "Weight Killogram", "");
		$this->form_validation->set_rules("Gm", "Weight Gram", "");
	}
	public function address_validations($sameAsPermanentAddress = false, $GO_OFFICER = false)
	{

		//$this->form_validation->set_rules('hno','House No','required');
		//$this->form_validation->set_rules('sno','Street No.','required');
		//$this->form_validation->set_rules('vm','Village Mohalla','required');
		//$this->form_validation->set_rules('wardno','Ward No.','required');
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules('po', 'Post Office', 'required');
			$this->form_validation->set_rules('ps', 'Police Station', 'required');
		}
		$this->form_validation->set_rules('nat', 'Nationality', 'required');
		//$this->form_validation->set_rules('tl','Tehsil','required');
		$this->form_validation->set_rules('state', 'State', 'required');
		$this->form_validation->set_rules('dis', 'District', 'required');

		if (null == $sameAsPermanentAddress || $sameAsPermanentAddress == false) {
			//$this->form_validation->set_rules('phouseno','House No.','required');
			//$this->form_validation->set_rules('pstreetno','Street No.','required');
			//$this->form_validation->set_rules('pwardno','Ward No.','required');
			//$this->form_validation->set_rules('pvillmoh','Village/Mohalla','required');
			//$this->form_validation->set_rules('postcity','City','required');
			if (!$GO_OFFICER) {
				$this->form_validation->set_rules('pcitypostoff', 'Post Office', 'required');
				$this->form_validation->set_rules('ppolicestation', 'Police Station', 'required');
			}
			//$this->form_validation->set_rules('ptehsil','Tehsil','required');
			$this->form_validation->set_rules('postate', 'State', 'required');
			$this->form_validation->set_rules('pdistrict', 'District', 'required');
		}
	}
	public function education_detail_validations($stts, $Doctorate, $GO_OFFICER = false)
	{

		$this->form_validation->set_rules("stts", "Education", "required");

		switch ($stts) {
			case 'Under Graduate':
				$this->form_validation->set_rules("UnderGraduate", "UnderGraduate1", "required");
				break;
			case 'Graduate':
				$this->form_validation->set_rules("Graduate", "Graduate", "required");
				break;
			case 'Post Graduate':
				$this->form_validation->set_rules("PostGraduate", "PostGraduate", "required");
				break;
			case 'Doctorate':
				$this->form_validation->set_rules("Doctorate", "Doctorate", "required");
				switch ($Doctorate) {
					case 'Other':
						$this->form_validation->set_rules("docOther", "Other Doctorate", "required");
						break;
				}
				break;
				/* case 'Other':
					$this->form_validation->set_rules("docOther", "Other", "required");
					break; */
		}
		if ($stts == 'Other') {
			//echo '<b>'.$stts.'</b>';
			$this->form_validation->set_rules("docOther", "Other", "required");
		}
		$this->form_validation->set_rules("clit", "Computer Literate", "required");
	}
	public function enlistment_detail_validations($modeOfRecruitment, $eor, $enlist_unit, $GO_OFFICER = false,$enlistment_detail_validations=null)
	{
		//echo '<b>'.$enlist_unit.'</b>'	;
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules('tyodu', 'Type of Duty', 'required');
			$this->form_validation->set_rules('Modemdr', 'Mode of Enlistment', 'required');
			$this->form_validation->set_rules('dateofesnlistment1', 'Date of Enlistment', 'required|callback_valid_date2|callback_valid_today');
		}
		if ($modeOfRecruitment == 'Other') {
			$this->form_validation->set_rules('mocOther', 'Other', 'required');
		}
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules('eor', 'Enlistment of Rank', 'required|callback_valid_enlistment_rank');
		}
		switch ($eor) {
			case 'Executive Staff':
				$this->form_validation->set_rules("eor1", "Executive Rank", "required|callback_valid_executive_rank");
				break;
			case 'Ministerial Staff':
				$this->form_validation->set_rules("eor2", "Ministerial Rank", "required|callback_valid_ministerial_rank");
				break;
			case 'Medical Staff':
				$this->form_validation->set_rules("eor3", "Medical Rank", "required|callback_valid_medical_rank");
				break;
			case 'Class-IV (P)':
				$this->form_validation->set_rules("eor4", "Class-IV (P)", "required|callback_valid_class_4_p_rank");
				break;
			case 'Class-IV (C)':
				$this->form_validation->set_rules("eor5", "Class-IV (C)", "required|callback_valid_class_4_c_rank");
				break;
			default:
		}
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules('Enlistmentec', 'Enlistment Category', 'required|callback_valid_enlistment_category');
			//$this->form_validation->set_rules('EnlistmentUnit','Enlistment Unit','required|callback_valid_enlistment_unit');
		}
		if ($enlist_unit == 'District') {
			$this->form_validation->set_rules('enutherdistrict', 'District dd', 'required|callback_valid_district');
		} elseif ($enlist_unit == 'Other') {
			$this->form_validation->set_rules('enuther', 'Other Unit', '');
		}
		$this->form_validation->set_rules('DateofRetirementdor', 'Date of Retirement', 'callback_valid_date2');
		$this->form_validation->set_rules('DateofRetirementdori', 'Extension Retirement Date', 'callback_valid_date2');
		//$this->form_validation->set_rules('gpfPRAN','GPF Pol No.','required');
		//$this->form_validation->set_rules('PRAN','Pran No.','required');
		$this->form_validation->set_rules('hrms_code', 'HRMS Code', 'callback_valid_hrms_code');
	}
	public function valid_hrms_code($hrms_code)
	{
		if ($hrms_code == '' || preg_match('/^([0-9]{6})$/', $hrms_code)) {
			return true;
		} else {
			$this->form_validation->set_message('valid_hrms_code', 'Invalid HRMS Code!!. (Only 6 digits)');
			return false;
		}
	}
	/**
			$eor is Type of staff
	 */
	public function presentservice_detail_validation($unit, $eor, $GO_OFFICER = false)
	{
		$this->form_validation->set_rules("BattalionUnitito", "BattalionUnitito", "required|callback_valid_enlistment_unit");
		if ($unit == 'District') {
			$this->form_validation->set_rules("bunitdistrict", "District", "required|callback_valid_district");
		}
		$this->form_validation->set_rules("RankRankre", "Category of Post", "required|callback_valid_enlistment_rank");
		switch ($eor) {
			case 'Executive Staff':
				$this->form_validation->set_rules("catop1", "Executive Rank", "required|callback_valid_executive_rank");
				$this->form_validation->set_rules("permanent_rank", "Permanent Rank", "required|callback_valid_executive_rank");

				break;
			case 'Ministerial Staff':
				$this->form_validation->set_rules("catop2", "Ministerial Rank", "required|callback_valid_ministerial_rank");
				break;
			case 'Medical Staff':
				$this->form_validation->set_rules("catop3", "Medical Rank", "required|callback_valid_medical_rank");
				break;
			case 'Class-IV (P)':
				$this->form_validation->set_rules("catop4", "Class-IV (P)", "required|callback_valid_class_4_p_rank");
				break;
			case 'Class-IV (C)':
				$this->form_validation->set_rules("catop5", "Class-IV (C)", "required|callback_valid_class_4_c_rank");
				break;
			default:
		}
		if (!$GO_OFFICER) {
			$this->form_validation->set_rules("Deptdn", "Department No.", "required|callback_valid_deptno");
		}
		//$this->form_validation->set_rules("iIdentityCardNocn", "Identity Card No.", "");

	}
	public function valid_gender($gender)
	{
		if (in_array($gender, ['Male', 'Female'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_gender', 'Invalid Gender!!');
			return false;
		}
	}
	public function getBloodgroups()
	{
		return ['A+ve' => 'A+ve', 'A-ve' => 'A-ve', 'B+ve' => 'B+ve', 'B-ve' => 'B-ve', 'AB+ve' => 'AB+ve', 'AB-ve' => 'AB-ve', 'O+ve' => 'O+ve', 'O-ve' => 'O-ve'];
	}
	public function valid_bloodgroup($bloodgroup)
	{
		if (in_array($bloodgroup, ['A+ve' => 'A+ve', 'A-ve' => 'A-ve', 'B+ve' => 'B+ve', 'B-ve' => 'B-ve', 'AB+ve' => 'AB+ve', 'AB-ve' => 'AB-ve', 'O+ve' => 'O+ve', 'O-ve' => 'O-ve'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_bloodgroup', 'Invalid Blood group selected!!');
			return false;
		}
	}
	public function valid_maritial_status($status)
	{
		if (in_array($status, ['Single' => 'Single', 'Married' => 'Married', 'Unmarried' => 'Unmarried', 'Divorced' => 'Divorced', 'Widow/ Widower' => 'Widow/ Widower'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_maritial_status', 'Invalid Maritial status is selected!!');
			return false;
		}
	}
	public function valid_category($category)
	{
		if (in_array($category, ['GEN' => 'GEN', 'SCM' => 'SCM', 'SCO' => 'SCO', 'BC' => 'BC', 'OBC' => 'OBC', 'ST' => 'ST', 'SCBM' => 'SCBM', 'EWS' => 'EWS'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_category', 'Invalid Category is selected!!');
			return false;
		}
	}
	public function valid_nationality($nat)
	{
		if (in_array($nat, ['Indian' => 'Indian', 'Nepal' => 'Nepal'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_nationality', 'Invalid Nationality is selected!!');
			return false;
		}
	}
	public function valid_state($state)
	{
		$states = $this->Btalion_model->fetchinfo('state_list', array('state_status' => 1));
		foreach ($states as $k => $val) {
			if ($val->state == $state) {
				return true;
			}
		}
		$this->form_validation->set_message('valid_state', 'Invalid State is selected!!');
		return false;
	}
	public function valid_class($class)
	{
		if (in_array($class, ['Illiterate' => 'Illiterate', 'Under Matric' => 'Under Matric', '10th' => '10th', 'H. Sec' => 'H. Sec', 'Prep' => 'Prep', '10+1' => '10+1', '10+2' => '10+2', 'Under Graduate' => 'Under Graduate', 'Graduate' => 'Graduate', 'Post Graduate' => 'Post Graduate', 'Doctorate' => 'Doctorate', 'Other' => 'Other'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_class', 'Invalid Class is selected!!');
			return false;
		}
	}
	public function valid_under_graduate($class)
	{
		if (in_array($class, ['BA-I' => 'BA-I', 'BA-II' => 'BA-II', 'BSc-I' => 'BSc-I', 'BSc-II' => 'BSc-II', 'BSc .IT-I' => 'BSc .IT-I', 'BSc .IT-II' => 'BSc .IT-II', 'Bcom-I' => 'Bcom-I', 'Bcom-II' => 'Bcom-II', 'BCA-I' => 'BCA-I', 'BCA-II' => 'BCA-II', 'BBA-I' => 'BBA-I', 'BBA-II' => 'BBA-II', 'LLB-I' => 'LLB-I', 'LLB-II' => 'LLB-II', 'B.Tech-I' => 'B.Tech-I', 'B.Tech-II' => 'B.Tech-II', 'B.Tech-III' => 'B.Tech-III'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_under_graduate', 'Invalid Class is selected!!');
			return false;
		}
	}
	public function valid_graduate($class)
	{
		if (in_array($class, ['BA' => 'BA', 'B.Sc' => 'B.Sc', 'BSc .IT' => 'BSc .IT', 'B.Com' => 'B.Com', 'BCA' => 'BCA', 'BBA' => 'BBA', 'BDS' => 'BDS', 'LLB' => 'LLB', 'B.Tech' => 'B.Tech', 'LAB Technician' => 'LAB Technician', 'BA/LLB' => 'BA/LLB', 'B.Lib' => 'B.Lib'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_graduate', 'Invalid Class is selected!!');
			return false;
		}
	}
	public function valid_post_graduate($class)
	{
		if (in_array($class, ['MA' => 'MA', 'M.Com' => 'M.Com', 'M.Phil' => 'M.Phil', 'M Pharm' => 'M Pharm', 'MCA' => 'MCA', 'MBA' => 'MBA', 'MTA' => 'MTA', 'M.Tech' => 'M.Tech', 'M.Sc' => 'M.Sc', 'M.Lib' => 'M.Lib'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_post_graduate', 'Invalid Class is selected!!');
			return false;
		}
	}
	public function valid_doctorate($class)
	{
		if (in_array($class, ['Ph.d' => 'Ph.d'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_doctorate', 'Invalid Class is selected!!');
			return false;
		}
	}
	public function valid_type_of_duty($duty)
	{
		if (in_array($duty, ['Temporary', 'Permanent'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_type_of_duty', 'Invalid Duty is selected!!');
			return false;
		}
	}
	public function valid_mode_of_recruitment($mode)
	{
		if (in_array($mode, ['Special Cases' => 'Special Cases', 'Direct' => 'Direct', 'Direct (Ex-Serviceman)' => 'Direct (Ex-Serviceman)', 'Direct (Wards of Ex-Serviceman)' => 'Direct (Wards of Ex-Serviceman)', 'Direct (Wards of Police Person)' => 'Direct (Wards of Police Person)', 'SPO' => 'SPO', 'Direct(SPORTS)' => 'Direct(SPORTS)', 'PLI' => 'PLI', 'Court cases' => 'Court cases', 'Direct (Freedom Fighter)' => 'Direct (Freedom Fighter)', 'Other' => 'Other', 'Temporary' => 'Temporary'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_mode_of_recruitment', 'Invalid Mode of Recruitment is selected!!');
			return false;
		}
	}
	public function valid_enlistment_rank($enrank)
	{
		if (in_array($enrank, ['Executive Staff' => 'Executive Staff', 'Ministerial Staff' => 'Ministerial Staff', 'Medical Staff' => 'Medical Staff', 'Class-IV (P)' => 'Class-IV (P)', 'Class-IV (C)' => 'Class-IV (C)'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_enlistment_rank', 'Invalid Enlistment Rank is selected!!');
			return false;
		}
	}
	public function valid_executive_rank($exec_rank)
	{
		if (in_array($exec_rank, osi_getORRanks()+osi_getNGORanks()+osi_getGORanks())) {
			return true;
		} else {
			$this->form_validation->set_message('valid_executive_rank', 'Invalid Executive Rank is selected!!');
			return false;
		}
	}
	public function valid_ministerial_rank($minRank)
	{
		if (in_array($minRank, osi_getMinisterialRanks())) {
			return true;
		} else {
			$this->form_validation->set_message('valid_ministerial_rank', 'Invalid Ministerial Rank is selected!!');
			return false;
		}
	}
	public function valid_medical_rank($medicalRank)
	{
		if (in_array($medicalRank, osi_getMedicalRanks())) {
			return true;
		} else {
			$this->form_validation->set_message('valid_medical_rank', 'Invalid Medical Rank is selected!!');
			return false;
		}
	}
	public function valid_class_4_p_rank($class4Rank)
	{
		if (in_array($class4Rank, ['Cook' => 'Cook', 'Water Carrier' => 'Water Carrier', 'Sweeper' => 'Sweeper', 'Dhobi' => 'Dhobi', 'Mochi' => 'Mochi', 'Barber' => 'Barber', 'Tailor' => 'Tailor', 'Carpenter' => 'Carpenter', 'Mason' => 'Mason', 'Mali' => 'Mali', 'Mechanic' => 'Mechanic', 'Electrician' => 'Electrician', 'Painter' => 'Painter', 'Syce' => 'Syce'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_class_4_p_rank', 'Invalid Class-IV (P) Rank is selected!!');
			return false;
		}
	}
	public function valid_class_4_c_rank($class4Rank)
	{
		if (in_array($class4Rank, ['Cook' => 'Cook', 'Water Carrier' => 'Water Carrier', 'Sweeper' => 'Sweeper', 'Dhobi' => 'Dhobi', 'Mochi' => 'Mochi', 'Barber' => 'Barber', 'Tailor' => 'Tailor', 'Carpenter' => 'Carpenter', 'Mason' => 'Mason', 'Mali' => 'Mali', 'Mechanic' => 'Mechanic', 'Electrician' => 'Electrician', 'Painter' => 'Painter', 'Syce' => 'Syce'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_class_4_c_rank', 'Invalid Class-IV (C) Rank is selected!!');
			return false;
		}
	}
	public function valid_enlistment_category($category)
	{
		if (in_array($category, ['GEN' => 'GEN', 'SCO' => 'SCO', 'SCBM' => 'SCBM', 'BC' => 'BC', 'OBC' => 'OBC', 'ST' => 'ST', 'EWS' => 'EWS', 'NA' => 'NA'])) {
			return true;
		} else {
			$this->form_validation->set_message('valid_enlistment_category', 'Invalid Enlistment Category is selected!!');
			return false;
		}
	}
	public function valid_enlistment_unit($category)
	{
		$EnlistmentUnit = array();
		//$EnlistmentUnit[''] = '--Select--';

		foreach ($this->units as $value) {
			$EnlistmentUnit[$value->users_id] = $value->nick;
		}
		$EnlistmentUnit['Intelligency wing'] = 'Intelligency wing';
		$EnlistmentUnit['Other'] = 'Other';
		$EnlistmentUnit['District'] = 'District';
		//echo $category;
		if (in_array($category, array_keys($EnlistmentUnit))) {
			return true;
		} else {
			$this->form_validation->set_message('valid_enlistment_unit', 'Invalid Enlistment Unit is selected!!');
			return false;
		}
	}
	public function valid_district($district)
	{
		return true;

		if (in_array($district, array_values($this->cities))) {
			return true;
		} else {
			$this->form_validation->set_message('valid_district', 'Invalid District is selected!!');
			return false;
		}
	}
	public function valid_district2($district, $state)
	{
		die($state);
		if (in_array($district, $this->cities)) {
			return true;
		} else {
			$this->form_validation->set_message('valid_district', 'Invalid District is selected!!');
			return false;
		}
	}
	public function getDistricts()
	{
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->model('Osi_model');
		$bodyno = $this->input->post("state", TRUE);
		//$bodyno = 'Punjab';
		//echo $bodyno;
		$this->form_validation->set_rules("state", "state", "trim|required");

		if ($this->form_validation->run()) {

			$wep = $this->Osi_model->getDistricts(array('state' => $bodyno, 'state_status' => '1'));

			echo '<div class="form-group">
                  <label class="col-sm-3 control-label">District</label>
                  <div class="col-sm-9"><select name="dis"  id="dis" data-placeholder="Ammunition bore" title="Please select at least 1 value" class="form-control">';
			echo "<option value=''>--Select District--</option>";
			foreach ($wep as $value) {
				echo "<option value='" . $value->city . "'>" . $value->city . "</option>";
			}
			echo "</select></div></div><br/>";
		}
	}
	public function getDistricts2()
	{
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->model('Osi_model');
		$bodyno = $this->input->post("state", TRUE);
		$districts = [];
		if ((is_array($bodyno) && !empty($bodyno)) || ($bodyno != null && trim($bodyno) != '')) {
			$wep = $this->Osi_model->getDistricts(array('state' => $bodyno, 'state_status' => '1'));
			foreach ($wep as $value) {
				$districts[$value->state_list_id] = $value->city;
			}
		} else {
			$districts[''] = 'Please select atleast one state';
		}
		echo json_encode($districts);
	}
	public function getDistrictsPa2()
	{
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->model('Osi_model');
		$bodyno = $this->input->post("postate", TRUE);
		$districts = [];
		//$bodyno = 'Punjab';
		//echo $bodyno;
		$this->form_validation->set_rules("postate", "postate", "trim");
		if ($this->form_validation->run()) {
			$wep = $this->Osi_model->getDistricts(array('state' => $bodyno, 'state_status' => '1'));
			foreach ($wep as $value) {
				$districts[$value->state_list_id] = $value->city;
			}
		}
		echo json_encode($districts);
	}
	public function getDistrictsPa()
	{
		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->model('Osi_model');
		$bodyno = $this->input->post("postate", TRUE);
		//$bodyno = 'Punjab';
		//echo $bodyno;
		$this->form_validation->set_rules("postate", "postate", "trim");

		if ($this->form_validation->run()) {

			$wep = $this->Osi_model->getDistricts(array('state' => $bodyno, 'state_status' => '1'));

			echo '<div class="form-group">
                  <label class="col-sm-3 control-label">District</label>
                  <div class="col-sm-9"><select name="pdistrict"  id="pdistrict" data-placeholder="Ammunition bore" title="Please select at least 1 value" class="form-control">';
			echo "<option value=''>--Select District--</option>";
			foreach ($wep as $value) {
				echo "<option value='" . $value->city . "'>" . $value->city . "</option>";
			}
			echo "</select></div></div><br/>";
		}
	}
	public function valid_professional_detail_array($field)
	{
		//it should be array
		//its quantity should be greator than zero
		//all ke values should not be empty
		$valid = false;
		if (is_Array($field) && count($field) > 0) {
			foreach ($field as $k => $val) {
				if (trim($val) != '') {
					$valid = true;
					break;
				}
			}
		}
		return $valid;
	}
	public function cso()
	{
		$cso_battalion_id = 93;

		$this->load->library('form_validation');
		$this->load->helper('security');
		$this->load->library('pagination');
		$this->load->helper('common');
		$this->load->helper('osi');
		$this->load->model('Osi_model');
		//$data['uname'] = $this->Osi_model->fetchinfo('users',array('user_log' => 4 ));

		/*if($this->session->userdata('userid') == 209 || $this->session->userdata('userid') == 210){
                            $data['battalions'] =                                    osi_getIRBBattalions();
                        }elseif($this->session->userdata('userid') == 211 || $this->session->userdata('userid') == 212){
                            $data['battalions'] =                                    osi_getCDOBattalions();
                        }else{
                            $data['battalions'] =                                osi_getAllBattalions();
                        }*/
		$ito = $this->input->get("ito", TRUE);				//battalion
		$ito = $cso_battalion_id;
		if ($this->session->userdata('user_log') == 4) {		//battalion login
			$ito = array($this->session->userdata('userid'));
		}

		$mobno = $this->input->get("mobno", TRUE);
		$name = $this->input->get("name", TRUE);
		$bloodgroup = $this->input->get("bloodgroup", TRUE);
		$rcnum = $this->input->get("rcnum", TRUE);
		$RankRankre = $this->input->get("RankRankre", TRUE);
		$eor1 =  $this->input->get("eor1", TRUE);
		$eor2 =  $this->input->get("eor2", TRUE);
		$eor3 =  $this->input->get("eor3", TRUE);
		$eor4 =  $this->input->get("eor4", TRUE);
		$eor5 =  $this->input->get("eor5", TRUE);
		$postate = $this->input->get("postate", TRUE);
		$pcity = $this->input->get("pcity", TRUE);
		$stts = $this->input->get("stts", TRUE);
		$classes = $this->input->get('classes', TRUE);
		$UnderGraduate = $this->input->get("UnderGraduate", TRUE);
		$Graduate = $this->input->get("Graduate", TRUE);
		$PostGraduate = $this->input->get("PostGraduate", TRUE);
		$Doctorate = $this->input->get("Doctorate", TRUE);
		$gender = $this->input->get("gender", TRUE);
		$single =  $this->input->get("single", TRUE);
		$Modemdr = $this->input->get("Modemdr", TRUE);
		$Rankre = $this->input->get("Rankre", TRUE);
		$Enlistmentec = $this->input->get("Enlistmentec", TRUE);
		$InductionModeim = $this->input->get("InductionModeim", TRUE);
		$clit = $this->input->get("clit", TRUE);
		$EnlistmentUnit = $this->input->get("EnlistmentUnit", TRUE);
		$dateofesnlistment1 = $this->input->get("dateofesnlistment1", TRUE);
		$dateofesnlistment2 =  $this->input->get("dateofesnlistment2", TRUE);
		$NamesofsCourses =  $this->input->get("NamesofsCourses1", TRUE);
		$NamesofsCourses2 =  $this->input->get("NamesofsCourses2", TRUE);
		$DateofRetirementdor = $this->input->get("DateofRetirementdor", TRUE);
		$dateofbirth = $this->input->get("dateofbirth", TRUE);
		$dateofbirthi = $this->input->get("dateofbirthi", TRUE);
		$dateofbirthi = $this->input->get("dateofbirthi", TRUE);
		$height = $this->input->get("height", TRUE);
		$inch = $this->input->get("inch", TRUE);
		$Postingtiset = $this->input->get("Postingtiset", TRUE);
		$Postingtiset2 = $this->input->get("Postingtiset2", TRUE);
		$Postingtiset3 = $this->input->get("Postingtiset3", TRUE);
		$Postingtiset4 = $this->input->get("Postingtiset4", TRUE);
		$Postingtiset5 = $this->input->get("Postingtiset5", TRUE);
		$Postingtiset6 = $this->input->get("Postingtiset6", TRUE);
		$Postingtiset7 = $this->input->get("Postingtiset7", TRUE);
		$Postingtiset8 = $this->input->get("Postingtiset8", TRUE);
		$Postingtiset9 = $this->input->get("Postingtiset9", TRUE);
		$advanceSearch = $this->input->get('advancedSearch', TRUE);
		/* $training_institutes = $this->input->get('training_institutes',TRUE);
			$courses = $this->input->get('courses',TRUE);
			if($training_institutes!=null || $courses!=null){
				$employee_ids = implode(',',$this->CourseMember_model->getEmployeeIdsByCourseAndTrainingInstituteId($courses,$training_institutes));
				//var_dump($employee_ids);
			}else{
				
			} */
		//echo '<hr>';
		//var_dump($advaceSearch);
		$p = '';
		//die('dalwinder');
		//echo '<hr>';
		// var_dump($ito);
		// echo '<hr>';
		//var_dump($ito);

		if (isset($ito) && is_array($ito)) {
			if (count($ito) == 0) {
				$sortedBattalions = array_keys(osi_getAllBattalions());
			} else {
				//var_dump($ito);
				$sortedBattalions = $this->sortBattalions($ito);
				//var_dump($sortedBattalions);
			}
		} else {
			$sortedBattalions = array_keys(osi_getAllBattalions());
		}
		//var_dump($sortedBattalions);
		//die;
		$data['counts'] = $this->Osi_model->get_users_countosiall_ajax([$cso_battalion_id], $name, $bloodgroup, $rcnum, $RankRankre, $eor1, $eor2, $eor3, $eor4, $eor5, $postate, $pcity, $stts, $UnderGraduate, $Graduate, $PostGraduate, $Doctorate, $gender, $single, $Modemdr, $Rankre, $Enlistmentec, $InductionModeim, $clit, $EnlistmentUnit, $dateofesnlistment1, $dateofesnlistment2, $NamesofsCourses, $NamesofsCourses2, $DateofRetirementdor, $dateofbirth, $dateofbirthi, $height, $inch, $Postingtiset, $Postingtiset2, $Postingtiset3, $Postingtiset4, $Postingtiset5, $Postingtiset6, $Postingtiset7, $Postingtiset8, $Postingtiset9, $p, $mobno, $classes, $basic_training_center = null, $batch_number = null, $passoutyear = null);
		//echo $data['counts'];
		//die;
		//echo $this->db->last_query();
		//die('llll');
		$weapon = $data['counts'];
		//echo 'Counting is ok';
		//echo $weapon;
		//die;
		//echo $data['counts'];
		//die('a');
		$data['statelist'] = $this->Osi_model->fetchinfo('state_list', array('state_status' => 1));
		//var_dump($data['statelist']);
		//die;
		$config = array();
		$config["base_url"] = base_url() . "bt-osi-old";
		$config["total_rows"] = $weapon;
		$download = $this->input->get('download');
		if ($download == 'download') {
			$config["per_page"] = $weapon;
		} else {
			$config["per_page"] = 10;
		}
		$config['use_page_numbers'] = TRUE;
		$config['reuse_query_string'] = TRUE;
		$config['full_tag_open'] = "<ul class='pagination'>";
		$config['full_tag_close'] = "</ul>";
		$config['num_tag_open'] = '<li>';
		$config['num_tag_close'] = '</li>';
		$config['cur_tag_open'] = "<li class='disabled'><li class='active'><a href='#'>";
		$config['cur_tag_close'] = "<span class='sr-only'></span></a></li>";
		$config['next_tag_open'] = "<li>";
		$config['next_tagl_close'] = "</li>";
		$config['prev_tag_open'] = "<li>";
		$config['prev_tagl_close'] = "</li>";
		$config['first_tag_open'] = "<li>";
		$config['first_tagl_close'] = "</li>";
		$config['last_tag_open'] = "<li>";
		$config['last_tagl_close'] = "</li>";

		$this->pagination->initialize($config);
		$data["links"] = $this->pagination->create_links();
		$page = ($this->uri->segment(2)) ? $this->uri->segment(2) : 1;
		$start = ($page - 1) * $config["per_page"];
		//echo $start; die();
		//print_r($data["links"]); die();
		//die("hi");


		$data["weapon"] = []; //= $this->Osi_model->get_usersosiall_ajax($sortedBattalions,$name,$bloodgroup,$rcnum,$RankRankre,$eor1,$eor2,$eor3,$eor4,$eor5,$postate,$pcity,$stts,$UnderGraduate,$Graduate,$PostGraduate,$Doctorate,$gender,$single,$Modemdr,$Rankre,$Enlistmentec,$InductionModeim,$clit,$EnlistmentUnit,$dateofesnlistment1,$dateofesnlistment2,$NamesofsCourses,$NamesofsCourses2,$DateofRetirementdor,$dateofbirth,$dateofbirthi,$height,$inch,$Postingtiset,$Postingtiset2,$Postingtiset3,$Postingtiset4,$Postingtiset5,$Postingtiset6,$Postingtiset7,$Postingtiset8,$Postingtiset9,$p,$config["per_page"],$start,$mobno,$classes,$advanceSearch);

		$data['nm'] = $NamesofsCourses . $NamesofsCourses2;
		$this->form_validation->set_rules("BattalionUnitito", "BattalionUnitito", "trim");
		//die;

		$data['name'] = '';
		//echo $this->db->last_query();
		//echo 'dalwinder';
		$this->load->model('TrainingInstitute_model');
		$this->load->model('Course_model');

		$where = ['deleted' => 'NO', 'enabled' => 'YES'];
		$training_institutes_objs = $this->TrainingInstitute_model->getInstitutesIDNamePair($where);
		$training_institutes = [];
		$training_institutes[''] = '--Select Training Institute--';

		foreach ($training_institutes_objs as $k => $val) {
			$training_institutes[$val->id] = $val->institute_name;
		}
		$data['training_institutes'] = $training_institutes;
		$courses = [];
		$courses[''] = "--Select Course--";
		$courses_objs = $this->Course_model->getCoursesIDNamePair($where);
		foreach ($courses_objs as $k => $val) {
			$courses[$val->id] = $val->course_name;
		}
		$data['courses'] = $courses;

		//leaves
		$this->load->model('Leave_model');
		$leave_objs = $this->Leave_model->getLeaves();
		$leaves = [];
		foreach ($leave_objs as $k => $leave_obj) {
			$leaves[$leave_obj->posting_id] = $leave_obj->id;
		}
		$data['leaves'] = $leaves;
		if ($download == 'download') {
			$this->download_users_excel($data["weapon"]);
		}
		$data['battalion_id'] = $cso_battalion_id;
		$this->load->view('Osi/search/cso', $data);
	}
	public function generateAddress($houseno = null, $streetno = null, $ward_no = null, $villmohala = null, $postoffice = null, $policestation = null, $tehsil = null, $district = null, $state = null, $nationality = null)
	{
		$address = '';
		if ($houseno != null && trim($houseno) != '' && !preg_match('/^[-]+$/', $houseno)) {
			$address .= 'H. No-' . $houseno;
		}
		if ($streetno != null && trim($streetno) != '' && !preg_match('/^[-]+$/', $streetno)) {
			$address .= ',Street. No-' . $streetno;
		}
		if ($ward_no != null && trim($ward_no) != '' && !preg_match('/^[-]+$/', $ward_no)) {
			$address .= ',Ward No-' . $ward_no;
		}
		if ($villmohala != null && trim($villmohala) != '' && !preg_match('/^[-]+$/', $villmohala)) {
			$address .= ',Village/Mohalla-' . $villmohala;
		}
		if ($postoffice != null && trim($postoffice) != '' && !preg_match('/^[-]+$/', $postoffice)) {
			$address .= ',Post Office-' . $postoffice;
		}
		if ($policestation != null && trim($policestation) != '' && !preg_match('/^[-]+$/', $policestation)) {
			$address .= ',Police station-' . $policestation;
		}
		if ($tehsil != null && trim($tehsil) != '' && !preg_match('/^[-]+$/', $tehsil)) {
			$address .= ',Tehsil-' . $tehsil;
		}
		if ($district != null && trim($district) != '' && !preg_match('/^[-]+$/', $district)) {
			$address .= ',District-' . $district;
		}
		if ($state != null && trim($state) != '' && !preg_match('/^[-]+$/', $state)) {
			$address .= ',State-' . $state;
		}
		if ($nationality != null && trim($nationality) != '' && !preg_match('/^[-]+$/', $nationality)) {
			$address .= ',Nationality-' . $nationality;
		}
		return $address;
	}
	function getPresentStrength()
	{
		$this->load->model('Osi_model');
		$this->load->helper('common_helper');
		$this->load->helper('osi_helper');
		$battalions = osi_getOverallBattalions();
		unset($battalions[91]);
		unset($battalions[93]);
		$ranks_ = osi_getAllRanks();
		$staff_types = osi_getStaffTypes();
		//var_dump(array_keys($battalions));
		$data = $this->Osi_model->getPresentStrength(array_keys($battalions));
		$i = 0;
		$counters = [];
		$total_ = [];
		$ranks = [];
		$total = 0;
		foreach ($data as $a) {
			$rank = osi_getRank($a);
			$employee_type = get_EmployeeType(trim($a->presentrank), trim($rank));
			if (!in_array($rank, $ranks)) {
				$ranks[$rank] = $rank;
				if (!isset($ranks_[$employee_type])) {
					$ranks_[$employee_type] = [];
				}
				if (!in_array($rank, $ranks_[$employee_type])) {
					$ranks_[$employee_type][$rank] = $rank;
					//array_push($ranks_[$employee_type],$rank=>$rank.'-'.$employee_type);
				}
			}
			if (!isset($counters[$a->bat_id])) {
				$counters[$a->bat_id] = osi_initialize_rank_counter();
			}
			if (!isset($counters[$a->bat_id][$employee_type])) {
				$counters[$a->bat_id][$employee_type] = [];
			}
			if (!isset($counters[$a->bat_id][$employee_type][$rank])) {

				$counters[$a->bat_id][$employee_type][$rank] = 1;
				/*if($rank=='Steno'){
								var_dump($a->bat_id);
								var_dump($employee_type);
								var_dump($counters[$a->bat_id][$employee_type][$rank]);
								die;
							}*/
			} else {
				$counters[$a->bat_id][$employee_type][$rank]++;
			}
			if (!isset($total_[$employee_type])) {
				$total_[$employee_type] = [];
				$total_[$employee_type][$rank] = 0;
			}
			if (!isset($total_[$employee_type][$rank])) {
				$total_[$employee_type][$rank] = 1;
			} else {
				$total_[$employee_type][$rank]++;
			}
			if (!isset($counters[$a->bat_id][$employee_type]["Total"])) {
				$counters[$a->bat_id][$employee_type]["Total"] = 1;
			} else {
				$counters[$a->bat_id][$employee_type]["Total"]++;
			}
			$total++;
			$i++;
		}
		$ranks['Total'] = "Total";
		$data['counters'] = $counters;
		$data['total_'] = $total_;
		$data['battalions'] = $battalions;
		$data['ranks'] = $ranks;
		$data['allRanks'] = $ranks_;
		$data['total'] = $total;
		$this->load->view('Osi/presentStrength', $data);
	}
	public function getNotification()
	{
		$this->load->model("Osi_model");
		$data = $this->Osi_model->getNotifications($this->session->userdata('userid'));
		$bat_ids = [];
		$emp_ids = [];
		foreach ($data as $k => $val) {
			$bat_ids[] = $val->BattalionUnitito;
			$emp_ids[] = $val->man_id;
		}
		//get the battalions
		$battalions_objs = $this->Osi_model->getAllBattalionsByIds($bat_ids);
		$battalions = [];
		foreach ($battalions_objs as $k => $val) {
			$battalions[$val->users_id] = $val->nick;
		}
		//date of relieveing
		$deinduction_objs = $this->Osi_model->getDeinductionByUsersIds($emp_ids);
		$employees = [];
		foreach ($deinduction_objs as $k => $val) {
			$employees[$val->nop] = $val;
		}
		$data_ = [];
		foreach ($data as $k => $val) {
			$tempData = new stdClass();
			$tempData->ddr = $val->ddr;
			$tempData->name = $val->name;
			$tempData->man_id = $val->man_id;
			$tempData->BattalionUnitito = $val->BattalionUnitito;
			$tempData->rank = $val->cexrank . $val->cminirank . $val->cmedirank . $val->ccprank . $val->cccrank;
			$tempData->battalion_name = isset($battalions[$val->BattalionUnitito]) ? $battalions[$val->BattalionUnitito] : "";
			$tempData->DateOfRelieving = $employees[$val->man_id]->Dateofrelieving;
			if ($tempData->ddr == null || $tempData->ddr == '') {
				$tempData->ddr = $employees[$val->man_id]->ddr;
			}
			$tempData->phoneNo = $val->phono1;
			$tempData->depttno = $val->depttno;
			$tempData->type = $employees[$val->man_id]->ti;
			$data_[] = $tempData;
		}
		echo json_encode($data_);
	}
	function markNotificationRead($id)
	{
		//verifyLoggedInuser
		if ($id != null) {
			$this->Osi_model->markOsiNotificationAsRead($id);
		}
	}
	function udpateBeltNo()
	{
		$this->load->model("Osi_model");

		$belt_no = $this->input->post('belt_no');
		$employee_id = $this->input->post('employee_id');
		//validate data
		if ($belt_no != null && $employee_id != null) {
			$result = $this->Osi_model->updateBeltNoByEmployeeId($employee_id, $belt_no);
			$this->markNotificationRead($employee_id);
			if ($result) {
				echo json_encode(['status' => true, 'message' => "Belt no Updated Successfully."]);
			} else {
				echo json_encode(['status' => false, 'message' => "Belt no Updation Failed."]);
			}
		} else {
			echo json_encode(['status' => false, 'message' => "Validation Failed."]);
		}
	}
}
